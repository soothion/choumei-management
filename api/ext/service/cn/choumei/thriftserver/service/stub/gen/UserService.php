<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 用户相关服务接口
 */
interface UserServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * @param int $userId
   * @param int $companyId
   * @return \cn\choumei\thriftserver\service\stub\gen\ActivationCompanyRet
   */
  public function activationCompany($userId, $companyId);
  /**
   * @param string $phone
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserInfoByPhoneRet
   */
  public function getUserInfoByPhone($phone);
  /**
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserInfoByUserIdRet
   */
  public function getUserInfoByUserId($userId);
  /**
   * @param int $userId
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\CollectSalonRet
   */
  public function collectSalon($userId, $salonId);
  /**
   * @param int $userId
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectListRet
   */
  public function getUserSalonCollectList($userId, $page, $size);
  /**
   * @param int $userId
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonIsCollectedRet
   */
  public function getSalonIsCollected($userId, $salonId);
  /**
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectNumRet
   */
  public function getUserSalonCollectNum($userId);
  /**
   * @param int $userId
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\CollectItemRet
   */
  public function collectItem($userId, $itemId);
  /**
   * @param int $userId
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectListRet
   */
  public function getUserItemCollectList($userId, $page, $size);
  /**
   * @param int $userId
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemIsCollectedRet
   */
  public function getItemIsCollected($userId, $itemId);
  /**
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectNumRet
   */
  public function getUserItemCollectNum($userId);
  /**
   * @param \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam $updateUserInfoParam
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoRet
   */
  public function updateUserInfo(\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam $updateUserInfoParam);
  /**
   * @param int $userId
   * @param string $content
   * @param string $contact
   * @param int $source
   * @param int $addTime
   * @return \cn\choumei\thriftserver\service\stub\gen\AddUserFeedRet
   */
  public function addUserFeed($userId, $content, $contact, $source, $addTime);
  /**
   * @param string $mobilephone
   * @return \cn\choumei\thriftserver\service\stub\gen\UserRegRet
   */
  public function userReg($mobilephone);
  /**
   * @return \cn\choumei\thriftserver\service\stub\gen\GetUserLevelRuleRet
   */
  public function getUserLevelRule();
  /**
   * @param int $userId
   * @param int $osType
   * @param int $lastVisitTime
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoAfterLoginRet
   */
  public function updateUserInfoAfterLogin($userId, $osType, $lastVisitTime);
  /**
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetStylistFansNumRet
   */
  public function getStylistFansNum($stylistId);
  /**
   * @param int $userId
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\LikeStylistRet
   */
  public function likeStylist($userId, $stylistId);
  /**
   * @param int $userId
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\IsFavorStylistRet
   */
  public function isFavorStylist($userId, $stylistId);
  /**
   * @param int $userId
   * @param string $money
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateUserMoney($userId, $money);
  /**
   * @param int $userId
   * @param int $growth
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateUserGrowth($userId, $growth);
  /**
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam $param
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBountyActivity(\cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam $param);
  /**
   * @param string $phone
   * @param int $activityId
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public function getBountyActivitysByEmployee($phone, $activityId, $page, $size);
  /**
   * @param string $phone
   * @param int $activityId
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public function getBountyEmployees($phone, $activityId, $page, $size);
  /**
   * @param string $phone
   * @param int $activityId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public function getRecommendBountyActivity($phone, $activityId);
}

class UserServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\UserServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function activationCompany($userId, $companyId)
  {
    $this->send_activationCompany($userId, $companyId);
    return $this->recv_activationCompany();
  }

  public function send_activationCompany($userId, $companyId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_activationCompany_args();
    $args->userId = $userId;
    $args->companyId = $companyId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'activationCompany', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('activationCompany', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_activationCompany()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_activationCompany_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_activationCompany_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("activationCompany failed: unknown result");
  }

  public function getUserInfoByPhone($phone)
  {
    $this->send_getUserInfoByPhone($phone);
    return $this->recv_getUserInfoByPhone();
  }

  public function send_getUserInfoByPhone($phone)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByPhone_args();
    $args->phone = $phone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserInfoByPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserInfoByPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserInfoByPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserInfoByPhone failed: unknown result");
  }

  public function getUserInfoByUserId($userId)
  {
    $this->send_getUserInfoByUserId($userId);
    return $this->recv_getUserInfoByUserId();
  }

  public function send_getUserInfoByUserId($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByUserId_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserInfoByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserInfoByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserInfoByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserInfoByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserInfoByUserId failed: unknown result");
  }

  public function collectSalon($userId, $salonId)
  {
    $this->send_collectSalon($userId, $salonId);
    return $this->recv_collectSalon();
  }

  public function send_collectSalon($userId, $salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_collectSalon_args();
    $args->userId = $userId;
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'collectSalon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('collectSalon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_collectSalon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_collectSalon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_collectSalon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("collectSalon failed: unknown result");
  }

  public function getUserSalonCollectList($userId, $page, $size)
  {
    $this->send_getUserSalonCollectList($userId, $page, $size);
    return $this->recv_getUserSalonCollectList();
  }

  public function send_getUserSalonCollectList($userId, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectList_args();
    $args->userId = $userId;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserSalonCollectList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserSalonCollectList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserSalonCollectList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserSalonCollectList failed: unknown result");
  }

  public function getSalonIsCollected($userId, $salonId)
  {
    $this->send_getSalonIsCollected($userId, $salonId);
    return $this->recv_getSalonIsCollected();
  }

  public function send_getSalonIsCollected($userId, $salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getSalonIsCollected_args();
    $args->userId = $userId;
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonIsCollected', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonIsCollected', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonIsCollected()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getSalonIsCollected_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getSalonIsCollected_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonIsCollected failed: unknown result");
  }

  public function getUserSalonCollectNum($userId)
  {
    $this->send_getUserSalonCollectNum($userId);
    return $this->recv_getUserSalonCollectNum();
  }

  public function send_getUserSalonCollectNum($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectNum_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserSalonCollectNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserSalonCollectNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserSalonCollectNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserSalonCollectNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserSalonCollectNum failed: unknown result");
  }

  public function collectItem($userId, $itemId)
  {
    $this->send_collectItem($userId, $itemId);
    return $this->recv_collectItem();
  }

  public function send_collectItem($userId, $itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_collectItem_args();
    $args->userId = $userId;
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'collectItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('collectItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_collectItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_collectItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_collectItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("collectItem failed: unknown result");
  }

  public function getUserItemCollectList($userId, $page, $size)
  {
    $this->send_getUserItemCollectList($userId, $page, $size);
    return $this->recv_getUserItemCollectList();
  }

  public function send_getUserItemCollectList($userId, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectList_args();
    $args->userId = $userId;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserItemCollectList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserItemCollectList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserItemCollectList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserItemCollectList failed: unknown result");
  }

  public function getItemIsCollected($userId, $itemId)
  {
    $this->send_getItemIsCollected($userId, $itemId);
    return $this->recv_getItemIsCollected();
  }

  public function send_getItemIsCollected($userId, $itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getItemIsCollected_args();
    $args->userId = $userId;
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemIsCollected', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemIsCollected', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemIsCollected()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getItemIsCollected_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getItemIsCollected_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemIsCollected failed: unknown result");
  }

  public function getUserItemCollectNum($userId)
  {
    $this->send_getUserItemCollectNum($userId);
    return $this->recv_getUserItemCollectNum();
  }

  public function send_getUserItemCollectNum($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectNum_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserItemCollectNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserItemCollectNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserItemCollectNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserItemCollectNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserItemCollectNum failed: unknown result");
  }

  public function updateUserInfo(\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam $updateUserInfoParam)
  {
    $this->send_updateUserInfo($updateUserInfoParam);
    return $this->recv_updateUserInfo();
  }

  public function send_updateUserInfo(\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam $updateUserInfoParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfo_args();
    $args->updateUserInfoParam = $updateUserInfoParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUserInfo failed: unknown result");
  }

  public function addUserFeed($userId, $content, $contact, $source, $addTime)
  {
    $this->send_addUserFeed($userId, $content, $contact, $source, $addTime);
    return $this->recv_addUserFeed();
  }

  public function send_addUserFeed($userId, $content, $contact, $source, $addTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_addUserFeed_args();
    $args->userId = $userId;
    $args->content = $content;
    $args->contact = $contact;
    $args->source = $source;
    $args->addTime = $addTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addUserFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addUserFeed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addUserFeed()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_addUserFeed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_addUserFeed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addUserFeed failed: unknown result");
  }

  public function userReg($mobilephone)
  {
    $this->send_userReg($mobilephone);
    return $this->recv_userReg();
  }

  public function send_userReg($mobilephone)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_userReg_args();
    $args->mobilephone = $mobilephone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'userReg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('userReg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_userReg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_userReg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_userReg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("userReg failed: unknown result");
  }

  public function getUserLevelRule()
  {
    $this->send_getUserLevelRule();
    return $this->recv_getUserLevelRule();
  }

  public function send_getUserLevelRule()
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserLevelRule_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserLevelRule', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserLevelRule', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserLevelRule()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getUserLevelRule_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getUserLevelRule_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getUserLevelRule failed: unknown result");
  }

  public function updateUserInfoAfterLogin($userId, $osType, $lastVisitTime)
  {
    $this->send_updateUserInfoAfterLogin($userId, $osType, $lastVisitTime);
    return $this->recv_updateUserInfoAfterLogin();
  }

  public function send_updateUserInfoAfterLogin($userId, $osType, $lastVisitTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfoAfterLogin_args();
    $args->userId = $userId;
    $args->osType = $osType;
    $args->lastVisitTime = $lastVisitTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserInfoAfterLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserInfoAfterLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUserInfoAfterLogin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfoAfterLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserInfoAfterLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUserInfoAfterLogin failed: unknown result");
  }

  public function getStylistFansNum($stylistId)
  {
    $this->send_getStylistFansNum($stylistId);
    return $this->recv_getStylistFansNum();
  }

  public function send_getStylistFansNum($stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getStylistFansNum_args();
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistFansNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistFansNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistFansNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getStylistFansNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getStylistFansNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistFansNum failed: unknown result");
  }

  public function likeStylist($userId, $stylistId)
  {
    $this->send_likeStylist($userId, $stylistId);
    return $this->recv_likeStylist();
  }

  public function send_likeStylist($userId, $stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_likeStylist_args();
    $args->userId = $userId;
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'likeStylist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('likeStylist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_likeStylist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_likeStylist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_likeStylist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("likeStylist failed: unknown result");
  }

  public function isFavorStylist($userId, $stylistId)
  {
    $this->send_isFavorStylist($userId, $stylistId);
    return $this->recv_isFavorStylist();
  }

  public function send_isFavorStylist($userId, $stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_isFavorStylist_args();
    $args->userId = $userId;
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isFavorStylist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isFavorStylist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isFavorStylist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_isFavorStylist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_isFavorStylist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("isFavorStylist failed: unknown result");
  }

  public function updateUserMoney($userId, $money)
  {
    $this->send_updateUserMoney($userId, $money);
    return $this->recv_updateUserMoney();
  }

  public function send_updateUserMoney($userId, $money)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserMoney_args();
    $args->userId = $userId;
    $args->money = $money;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserMoney', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserMoney', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUserMoney()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_updateUserMoney_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserMoney_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUserMoney failed: unknown result");
  }

  public function updateUserGrowth($userId, $growth)
  {
    $this->send_updateUserGrowth($userId, $growth);
    return $this->recv_updateUserGrowth();
  }

  public function send_updateUserGrowth($userId, $growth)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserGrowth_args();
    $args->userId = $userId;
    $args->growth = $growth;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserGrowth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserGrowth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateUserGrowth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_updateUserGrowth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_updateUserGrowth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateUserGrowth failed: unknown result");
  }

  public function addBountyActivity(\cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam $param)
  {
    $this->send_addBountyActivity($param);
    return $this->recv_addBountyActivity();
  }

  public function send_addBountyActivity(\cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam $param)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_addBountyActivity_args();
    $args->param = $param;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBountyActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBountyActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBountyActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_addBountyActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_addBountyActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBountyActivity failed: unknown result");
  }

  public function getBountyActivitysByEmployee($phone, $activityId, $page, $size)
  {
    $this->send_getBountyActivitysByEmployee($phone, $activityId, $page, $size);
    return $this->recv_getBountyActivitysByEmployee();
  }

  public function send_getBountyActivitysByEmployee($phone, $activityId, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getBountyActivitysByEmployee_args();
    $args->phone = $phone;
    $args->activityId = $activityId;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyActivitysByEmployee', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyActivitysByEmployee', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyActivitysByEmployee()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getBountyActivitysByEmployee_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getBountyActivitysByEmployee_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyActivitysByEmployee failed: unknown result");
  }

  public function getBountyEmployees($phone, $activityId, $page, $size)
  {
    $this->send_getBountyEmployees($phone, $activityId, $page, $size);
    return $this->recv_getBountyEmployees();
  }

  public function send_getBountyEmployees($phone, $activityId, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getBountyEmployees_args();
    $args->phone = $phone;
    $args->activityId = $activityId;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyEmployees', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyEmployees', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyEmployees()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getBountyEmployees_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getBountyEmployees_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyEmployees failed: unknown result");
  }

  public function getRecommendBountyActivity($phone, $activityId)
  {
    $this->send_getRecommendBountyActivity($phone, $activityId);
    return $this->recv_getRecommendBountyActivity();
  }

  public function send_getRecommendBountyActivity($phone, $activityId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\UserService_getRecommendBountyActivity_args();
    $args->phone = $phone;
    $args->activityId = $activityId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRecommendBountyActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRecommendBountyActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRecommendBountyActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\UserService_getRecommendBountyActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\UserService_getRecommendBountyActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRecommendBountyActivity failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class UserService_activationCompany_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $companyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'companyId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_activationCompany_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_activationCompany_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_activationCompany_args', self::$_TSPEC, $output);
  }

}

class UserService_activationCompany_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ActivationCompanyRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\ActivationCompanyRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_activationCompany_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_activationCompany_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_activationCompany_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserInfoByPhone_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserInfoByPhone_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserInfoByPhone_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserInfoByPhone_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserInfoByPhone_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserInfoByPhoneRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserInfoByPhoneRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserInfoByPhone_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserInfoByPhone_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserInfoByPhone_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserInfoByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserInfoByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserInfoByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserInfoByUserId_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserInfoByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserInfoByUserIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserInfoByUserIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserInfoByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserInfoByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserInfoByUserId_result', self::$_TSPEC, $output);
  }

}

class UserService_collectSalon_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_collectSalon_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_collectSalon_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_collectSalon_args', self::$_TSPEC, $output);
  }

}

class UserService_collectSalon_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\CollectSalonRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\CollectSalonRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_collectSalon_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_collectSalon_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_collectSalon_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserSalonCollectList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserSalonCollectList_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserSalonCollectList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserSalonCollectList_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserSalonCollectList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserSalonCollectList_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserSalonCollectList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserSalonCollectList_result', self::$_TSPEC, $output);
  }

}

class UserService_getSalonIsCollected_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getSalonIsCollected_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getSalonIsCollected_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getSalonIsCollected_args', self::$_TSPEC, $output);
  }

}

class UserService_getSalonIsCollected_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonIsCollectedRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonIsCollectedRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getSalonIsCollected_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getSalonIsCollected_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getSalonIsCollected_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserSalonCollectNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserSalonCollectNum_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserSalonCollectNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserSalonCollectNum_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserSalonCollectNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserSalonCollectNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserSalonCollectNum_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserSalonCollectNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserSalonCollectNum_result', self::$_TSPEC, $output);
  }

}

class UserService_collectItem_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_collectItem_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_collectItem_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_collectItem_args', self::$_TSPEC, $output);
  }

}

class UserService_collectItem_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\CollectItemRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\CollectItemRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_collectItem_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_collectItem_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_collectItem_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserItemCollectList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserItemCollectList_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserItemCollectList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserItemCollectList_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserItemCollectList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserItemCollectList_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserItemCollectList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserItemCollectList_result', self::$_TSPEC, $output);
  }

}

class UserService_getItemIsCollected_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getItemIsCollected_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getItemIsCollected_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getItemIsCollected_args', self::$_TSPEC, $output);
  }

}

class UserService_getItemIsCollected_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemIsCollectedRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemIsCollectedRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getItemIsCollected_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getItemIsCollected_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getItemIsCollected_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserItemCollectNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserItemCollectNum_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserItemCollectNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserItemCollectNum_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserItemCollectNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserItemCollectNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserItemCollectNum_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserItemCollectNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserItemCollectNum_result', self::$_TSPEC, $output);
  }

}

class UserService_updateUserInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam
   */
  public $updateUserInfoParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updateUserInfoParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserInfo_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserInfo_args', self::$_TSPEC, $output);
  }

}

class UserService_updateUserInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserInfo_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserInfo_result', self::$_TSPEC, $output);
  }

}

class UserService_addUserFeed_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $contact = null;
  /**
   * @var int
   */
  public $source = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'contact',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_addUserFeed_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_addUserFeed_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_addUserFeed_args', self::$_TSPEC, $output);
  }

}

class UserService_addUserFeed_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddUserFeedRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddUserFeedRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_addUserFeed_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_addUserFeed_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_addUserFeed_result', self::$_TSPEC, $output);
  }

}

class UserService_userReg_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mobilephone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobilephone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_userReg_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_userReg_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_userReg_args', self::$_TSPEC, $output);
  }

}

class UserService_userReg_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UserRegRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UserRegRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_userReg_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_userReg_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_userReg_result', self::$_TSPEC, $output);
  }

}

class UserService_getUserLevelRule_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'UserService_getUserLevelRule_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserLevelRule_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserLevelRule_args', self::$_TSPEC, $output);
  }

}

class UserService_getUserLevelRule_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetUserLevelRuleRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetUserLevelRuleRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getUserLevelRule_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getUserLevelRule_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getUserLevelRule_result', self::$_TSPEC, $output);
  }

}

class UserService_updateUserInfoAfterLogin_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $osType = null;
  /**
   * @var int
   */
  public $lastVisitTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'osType',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'lastVisitTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserInfoAfterLogin_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserInfoAfterLogin_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserInfoAfterLogin_args', self::$_TSPEC, $output);
  }

}

class UserService_updateUserInfoAfterLogin_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoAfterLoginRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateUserInfoAfterLoginRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserInfoAfterLogin_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserInfoAfterLogin_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserInfoAfterLogin_result', self::$_TSPEC, $output);
  }

}

class UserService_getStylistFansNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getStylistFansNum_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getStylistFansNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getStylistFansNum_args', self::$_TSPEC, $output);
  }

}

class UserService_getStylistFansNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetStylistFansNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetStylistFansNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getStylistFansNum_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getStylistFansNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getStylistFansNum_result', self::$_TSPEC, $output);
  }

}

class UserService_likeStylist_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_likeStylist_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_likeStylist_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_likeStylist_args', self::$_TSPEC, $output);
  }

}

class UserService_likeStylist_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\LikeStylistRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\LikeStylistRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_likeStylist_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_likeStylist_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_likeStylist_result', self::$_TSPEC, $output);
  }

}

class UserService_isFavorStylist_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_isFavorStylist_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_isFavorStylist_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_isFavorStylist_args', self::$_TSPEC, $output);
  }

}

class UserService_isFavorStylist_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\IsFavorStylistRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\IsFavorStylistRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_isFavorStylist_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_isFavorStylist_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_isFavorStylist_result', self::$_TSPEC, $output);
  }

}

class UserService_updateUserMoney_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $money = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserMoney_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserMoney_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserMoney_args', self::$_TSPEC, $output);
  }

}

class UserService_updateUserMoney_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserMoney_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserMoney_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserMoney_result', self::$_TSPEC, $output);
  }

}

class UserService_updateUserGrowth_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $growth = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'growth',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserGrowth_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserGrowth_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserGrowth_args', self::$_TSPEC, $output);
  }

}

class UserService_updateUserGrowth_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_updateUserGrowth_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_updateUserGrowth_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_updateUserGrowth_result', self::$_TSPEC, $output);
  }

}

class UserService_addBountyActivity_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam
   */
  public $param = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'param',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBountyActivityParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_addBountyActivity_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_addBountyActivity_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_addBountyActivity_args', self::$_TSPEC, $output);
  }

}

class UserService_addBountyActivity_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_addBountyActivity_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_addBountyActivity_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_addBountyActivity_result', self::$_TSPEC, $output);
  }

}

class UserService_getBountyActivitysByEmployee_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $activityId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getBountyActivitysByEmployee_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getBountyActivitysByEmployee_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getBountyActivitysByEmployee_args', self::$_TSPEC, $output);
  }

}

class UserService_getBountyActivitysByEmployee_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getBountyActivitysByEmployee_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getBountyActivitysByEmployee_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getBountyActivitysByEmployee_result', self::$_TSPEC, $output);
  }

}

class UserService_getBountyEmployees_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $activityId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getBountyEmployees_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getBountyEmployees_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getBountyEmployees_args', self::$_TSPEC, $output);
  }

}

class UserService_getBountyEmployees_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getBountyEmployees_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getBountyEmployees_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getBountyEmployees_result', self::$_TSPEC, $output);
  }

}

class UserService_getRecommendBountyActivity_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phone = null;
  /**
   * @var int
   */
  public $activityId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getRecommendBountyActivity_args';
  }

  public function read($input)
  {
    return $this->_read('UserService_getRecommendBountyActivity_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getRecommendBountyActivity_args', self::$_TSPEC, $output);
  }

}

class UserService_getRecommendBountyActivity_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyActivitysRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserService_getRecommendBountyActivity_result';
  }

  public function read($input)
  {
    return $this->_read('UserService_getRecommendBountyActivity_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserService_getRecommendBountyActivity_result', self::$_TSPEC, $output);
  }

}


