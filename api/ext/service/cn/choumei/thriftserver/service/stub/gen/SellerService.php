<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 商家相关服务接口
 */
interface SellerServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonBranchRet 获取分店列表接口调用返回参数
   * 
   */
  public function getSalonBranch($salonId);
  /**
   * @param \cn\choumei\thriftserver\service\stub\gen\GetSalonListParam $getSalonListParam
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonListRet 获取店铺列表接口调用返回参数
   * 
   */
  public function getSalonList(\cn\choumei\thriftserver\service\stub\gen\GetSalonListParam $getSalonListParam);
  /**
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonInfoRet 获取店铺信息
   * 
   */
  public function getSalonInfo($salonId);
  /**
   * @param int $salonId
   * @param int $flags
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonWorksRet 店铺图集
   * 
   */
  public function getSalonWorks($salonId, $flags);
  /**
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonStylistsRet 造型师列表
   * 
   */
  public function getSalonStylists($salonId);
  /**
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetStylistWorksRet 造型师作品列表
   * 
   */
  public function getStylistWorks($stylistId);
  /**
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet 获取造型师信息
   * 
   */
  public function getStylistInfo($stylistId);
  /**
   * @param string $mobilephone
   * @return \cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet 获取造型师信息
   * 
   */
  public function getStylistInfoByPhone($mobilephone);
  /**
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonItemRet 获取店铺下的项目
   * 
   */
  public function getSalonItem($salonId);
  /**
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemInfoRet 获取项目信息
   * 
   */
  public function getItemInfo($itemId);
  /**
   * @param int[] $formatIds
   * @return \cn\choumei\thriftserver\service\stub\gen\GetFormatsRet 通过规格元素id获取规格
   * 
   */
  public function getFormats(array $formatIds);
  /**
   * @param int[] $formatTypeIds
   * @return \cn\choumei\thriftserver\service\stub\gen\GetFormatTypesRet 通过规格类型id获取规格类型
   * 
   */
  public function getFormatTypes(array $formatTypeIds);
  /**
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemPriceFormatRet 获取项目的价格、规格 规则
   * 
   */
  public function getItemPriceFormats($itemId);
  /**
   * @param int $itemTypeId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemTypePriceRangesRet 获取服务类型的价格区间
   * 
   */
  public function getItemTypePriceRanges($itemTypeId);
  /**
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemBuyLimitRet 获取项目购买限制返回
   * 
   */
  public function getItemBuyLimit($itemId);
  /**
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemTypesRet 获取项目服务类型返回
   * 
   */
  public function getItemTypes();
  /**
   * @param int $type
   * @param int $id
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSubLocationsRet 获取下一级地理信息
   * 
   */
  public function getSubLocations($type, $id);
  /**
   * @param int $type
   * @param int $id
   * @return \cn\choumei\thriftserver\service\stub\gen\GetLocationInfoRet 获取地理信息
   * 
   */
  public function getLocationInfo($type, $id);
  /**
   * @param int[] $types
   * @param int $itemType
   * @param int $district
   * @param double $addrlong
   * @param double $addrlati
   * @param double $maxPrice
   * @param double $minPrice
   * @param int $page
   * @param int $size
   * @param int $group
   * @return \cn\choumei\thriftserver\service\stub\gen\GetIndexItemsRet
   */
  public function getIndexItems(array $types, $itemType, $district, $addrlong, $addrlati, $maxPrice, $minPrice, $page, $size, $group);
  /**
   * @param int[] $types
   * @param int $itemType
   * @param int $district
   * @param double $maxPrice
   * @param double $minPrice
   * @param int $group
   * @return \cn\choumei\thriftserver\service\stub\gen\GetIndexItemsNumRet 获取项目列表符合条件的项目总数返回
   * 
   */
  public function getIndexItemsNum(array $types, $itemType, $district, $maxPrice, $minPrice, $group);
  /**
   * @param int $district
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonNumRet 获取店铺数量
   * 
   */
  public function getSalonNum($district);
  /**
   * @return \cn\choumei\thriftserver\service\stub\gen\GetDividendSetRet 获取分红联盟开关信息
   * 
   */
  public function getDividendSet();
  /**
   * @param string $recommendCode
   * @return \cn\choumei\thriftserver\service\stub\gen\GetDividendByCodeRet 获取店铺分红配置信息
   * 
   */
  public function getDividendByCode($recommendCode);
  /**
   * @param int $salonId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetDividendBySalonIdRet
   */
  public function getDividendBySalonId($salonId);
  /**
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetRecommendUserByUserIdRet 获取用户的店铺邀请信息
   * 
   */
  public function getRecommendUserByUserId($userId);
  /**
   * @param int $userId
   * @param int $salonId
   * @param string $recommendCode
   * @param int $addTime
   * @return \cn\choumei\thriftserver\service\stub\gen\AddUserRecommendRet 添加店铺受邀用户
   * 
   */
  public function addUserRecommend($userId, $salonId, $recommendCode, $addTime);
  /**
   * @param string $code
   * @return \cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByCodeRet 获取集团码信息
   * 
   */
  public function getCompanyCodeByCode($code);
  /**
   * @param int $companyId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByIdRet
   */
  public function getCompanyCodeById($companyId);
  /**
   * @param int $stylistId
   * @param int $osType
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateStylistOnLoginRet
   */
  public function updateStylistOnLogin($stylistId, $osType);
  /**
   * @param int $stylistId
   * @param string $signature
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateStylistSignRet
   */
  public function updateStylistSign($stylistId, $signature);
  /**
   * @param int $type
   * @param int $status
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSpecialEventListRet
   */
  public function getSpecialEventList($type, $status);
  /**
   * @param int $stylistId
   * @param int $step
   * @return \cn\choumei\thriftserver\service\stub\gen\IncStylistLikeNumRet
   */
  public function incStylistLikeNum($stylistId, $step);
  /**
   * @param int $num
   * @return \cn\choumei\thriftserver\service\stub\gen\GetRandomGroupRet
   */
  public function getRandomGroup($num);
  /**
   * @param int $groupId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetGroupCateRet
   */
  public function getGroupCate($groupId);
  /**
   * @param int[] $catIds
   * @return \cn\choumei\thriftserver\service\stub\gen\GetCategoryRet
   */
  public function getCateGory(array $catIds);
  /**
   * 更改店铺的评论数据
   * 
   * @param int $salonId
   * @param int $commentNumStep
   * @param int $satisfyOneStep
   * @param int $satisfyTwoStep
   * @param int $satisfyThreeStep
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateSalonComment($salonId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep);
  /**
   * 更改项目的评论数据
   * 
   * @param int $itemId
   * @param int $commentNumStep
   * @param int $satisfyOneStep
   * @param int $satisfyTwoStep
   * @param int $satisfyThreeStep
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateItemComment($itemId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep);
  /**
   * 更改项目的库存数据
   * 
   * @param int $itemId
   * @param int $sold
   * @param int $innage
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateItemRepertory($itemId, $sold, $innage);
  /**
   * [赏金任务]获取当前能提供赏金服务的造型师数量
   * 
   * @param int $status
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getHairstylistCount($status);
  /**
   * 更新推荐用户的receivedPrize字段
   * 
   * @param int $userId
   * @param int $receivedPrize
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateRecommendUserReceivedPrize($userId, $receivedPrize);
  /**
   * 获取增值服务详情
   * sql:select * from cm_addservice where sId in ()
   * 
   * @param int[] $ids
   * @return \cn\choumei\thriftserver\service\stub\gen\GetAddServicesRet
   */
  public function getAddServicesById(array $ids);
  /**
   * 获取项目类型增值服务
   * sql:select * from cm_addservice_itemtype where itemType=
   * 
   * @param int $typeid
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemTypeAddServiceRet
   */
  public function getItemTypeAddService($typeid);
}

class SellerServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\SellerServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function getSalonBranch($salonId)
  {
    $this->send_getSalonBranch($salonId);
    return $this->recv_getSalonBranch();
  }

  public function send_getSalonBranch($salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonBranch_args();
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonBranch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonBranch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonBranch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonBranch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonBranch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonBranch failed: unknown result");
  }

  public function getSalonList(\cn\choumei\thriftserver\service\stub\gen\GetSalonListParam $getSalonListParam)
  {
    $this->send_getSalonList($getSalonListParam);
    return $this->recv_getSalonList();
  }

  public function send_getSalonList(\cn\choumei\thriftserver\service\stub\gen\GetSalonListParam $getSalonListParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonList_args();
    $args->getSalonListParam = $getSalonListParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonList failed: unknown result");
  }

  public function getSalonInfo($salonId)
  {
    $this->send_getSalonInfo($salonId);
    return $this->recv_getSalonInfo();
  }

  public function send_getSalonInfo($salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonInfo_args();
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonInfo failed: unknown result");
  }

  public function getSalonWorks($salonId, $flags)
  {
    $this->send_getSalonWorks($salonId, $flags);
    return $this->recv_getSalonWorks();
  }

  public function send_getSalonWorks($salonId, $flags)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonWorks_args();
    $args->salonId = $salonId;
    $args->flags = $flags;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonWorks', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonWorks', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonWorks()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonWorks_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonWorks_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonWorks failed: unknown result");
  }

  public function getSalonStylists($salonId)
  {
    $this->send_getSalonStylists($salonId);
    return $this->recv_getSalonStylists();
  }

  public function send_getSalonStylists($salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonStylists_args();
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonStylists', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonStylists', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonStylists()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonStylists_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonStylists_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonStylists failed: unknown result");
  }

  public function getStylistWorks($stylistId)
  {
    $this->send_getStylistWorks($stylistId);
    return $this->recv_getStylistWorks();
  }

  public function send_getStylistWorks($stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistWorks_args();
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistWorks', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistWorks', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistWorks()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistWorks_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistWorks_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistWorks failed: unknown result");
  }

  public function getStylistInfo($stylistId)
  {
    $this->send_getStylistInfo($stylistId);
    return $this->recv_getStylistInfo();
  }

  public function send_getStylistInfo($stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfo_args();
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistInfo failed: unknown result");
  }

  public function getStylistInfoByPhone($mobilephone)
  {
    $this->send_getStylistInfoByPhone($mobilephone);
    return $this->recv_getStylistInfoByPhone();
  }

  public function send_getStylistInfoByPhone($mobilephone)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfoByPhone_args();
    $args->mobilephone = $mobilephone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistInfoByPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistInfoByPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistInfoByPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfoByPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getStylistInfoByPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistInfoByPhone failed: unknown result");
  }

  public function getSalonItem($salonId)
  {
    $this->send_getSalonItem($salonId);
    return $this->recv_getSalonItem();
  }

  public function send_getSalonItem($salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonItem_args();
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonItem failed: unknown result");
  }

  public function getItemInfo($itemId)
  {
    $this->send_getItemInfo($itemId);
    return $this->recv_getItemInfo();
  }

  public function send_getItemInfo($itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemInfo_args();
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemInfo failed: unknown result");
  }

  public function getFormats(array $formatIds)
  {
    $this->send_getFormats($formatIds);
    return $this->recv_getFormats();
  }

  public function send_getFormats(array $formatIds)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getFormats_args();
    $args->formatIds = $formatIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFormats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFormats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFormats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getFormats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getFormats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFormats failed: unknown result");
  }

  public function getFormatTypes(array $formatTypeIds)
  {
    $this->send_getFormatTypes($formatTypeIds);
    return $this->recv_getFormatTypes();
  }

  public function send_getFormatTypes(array $formatTypeIds)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getFormatTypes_args();
    $args->formatTypeIds = $formatTypeIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFormatTypes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFormatTypes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFormatTypes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getFormatTypes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getFormatTypes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFormatTypes failed: unknown result");
  }

  public function getItemPriceFormats($itemId)
  {
    $this->send_getItemPriceFormats($itemId);
    return $this->recv_getItemPriceFormats();
  }

  public function send_getItemPriceFormats($itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemPriceFormats_args();
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemPriceFormats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemPriceFormats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemPriceFormats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemPriceFormats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemPriceFormats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemPriceFormats failed: unknown result");
  }

  public function getItemTypePriceRanges($itemTypeId)
  {
    $this->send_getItemTypePriceRanges($itemTypeId);
    return $this->recv_getItemTypePriceRanges();
  }

  public function send_getItemTypePriceRanges($itemTypeId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypePriceRanges_args();
    $args->itemTypeId = $itemTypeId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemTypePriceRanges', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemTypePriceRanges', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemTypePriceRanges()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypePriceRanges_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypePriceRanges_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemTypePriceRanges failed: unknown result");
  }

  public function getItemBuyLimit($itemId)
  {
    $this->send_getItemBuyLimit($itemId);
    return $this->recv_getItemBuyLimit();
  }

  public function send_getItemBuyLimit($itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemBuyLimit_args();
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemBuyLimit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemBuyLimit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemBuyLimit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemBuyLimit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemBuyLimit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemBuyLimit failed: unknown result");
  }

  public function getItemTypes()
  {
    $this->send_getItemTypes();
    return $this->recv_getItemTypes();
  }

  public function send_getItemTypes()
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypes_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemTypes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemTypes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemTypes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemTypes failed: unknown result");
  }

  public function getSubLocations($type, $id)
  {
    $this->send_getSubLocations($type, $id);
    return $this->recv_getSubLocations();
  }

  public function send_getSubLocations($type, $id)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSubLocations_args();
    $args->type = $type;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSubLocations', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSubLocations', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSubLocations()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSubLocations_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSubLocations_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSubLocations failed: unknown result");
  }

  public function getLocationInfo($type, $id)
  {
    $this->send_getLocationInfo($type, $id);
    return $this->recv_getLocationInfo();
  }

  public function send_getLocationInfo($type, $id)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getLocationInfo_args();
    $args->type = $type;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLocationInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLocationInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLocationInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getLocationInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getLocationInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getLocationInfo failed: unknown result");
  }

  public function getIndexItems(array $types, $itemType, $district, $addrlong, $addrlati, $maxPrice, $minPrice, $page, $size, $group)
  {
    $this->send_getIndexItems($types, $itemType, $district, $addrlong, $addrlati, $maxPrice, $minPrice, $page, $size, $group);
    return $this->recv_getIndexItems();
  }

  public function send_getIndexItems(array $types, $itemType, $district, $addrlong, $addrlati, $maxPrice, $minPrice, $page, $size, $group)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItems_args();
    $args->types = $types;
    $args->itemType = $itemType;
    $args->district = $district;
    $args->addrlong = $addrlong;
    $args->addrlati = $addrlati;
    $args->maxPrice = $maxPrice;
    $args->minPrice = $minPrice;
    $args->page = $page;
    $args->size = $size;
    $args->group = $group;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getIndexItems', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getIndexItems', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getIndexItems()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItems_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItems_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getIndexItems failed: unknown result");
  }

  public function getIndexItemsNum(array $types, $itemType, $district, $maxPrice, $minPrice, $group)
  {
    $this->send_getIndexItemsNum($types, $itemType, $district, $maxPrice, $minPrice, $group);
    return $this->recv_getIndexItemsNum();
  }

  public function send_getIndexItemsNum(array $types, $itemType, $district, $maxPrice, $minPrice, $group)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItemsNum_args();
    $args->types = $types;
    $args->itemType = $itemType;
    $args->district = $district;
    $args->maxPrice = $maxPrice;
    $args->minPrice = $minPrice;
    $args->group = $group;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getIndexItemsNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getIndexItemsNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getIndexItemsNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItemsNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getIndexItemsNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getIndexItemsNum failed: unknown result");
  }

  public function getSalonNum($district)
  {
    $this->send_getSalonNum($district);
    return $this->recv_getSalonNum();
  }

  public function send_getSalonNum($district)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonNum_args();
    $args->district = $district;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSalonNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonNum failed: unknown result");
  }

  public function getDividendSet()
  {
    $this->send_getDividendSet();
    return $this->recv_getDividendSet();
  }

  public function send_getDividendSet()
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendSet_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDividendSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDividendSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDividendSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDividendSet failed: unknown result");
  }

  public function getDividendByCode($recommendCode)
  {
    $this->send_getDividendByCode($recommendCode);
    return $this->recv_getDividendByCode();
  }

  public function send_getDividendByCode($recommendCode)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendByCode_args();
    $args->recommendCode = $recommendCode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDividendByCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDividendByCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDividendByCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendByCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendByCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDividendByCode failed: unknown result");
  }

  public function getDividendBySalonId($salonId)
  {
    $this->send_getDividendBySalonId($salonId);
    return $this->recv_getDividendBySalonId();
  }

  public function send_getDividendBySalonId($salonId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendBySalonId_args();
    $args->salonId = $salonId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDividendBySalonId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDividendBySalonId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDividendBySalonId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendBySalonId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getDividendBySalonId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDividendBySalonId failed: unknown result");
  }

  public function getRecommendUserByUserId($userId)
  {
    $this->send_getRecommendUserByUserId($userId);
    return $this->recv_getRecommendUserByUserId();
  }

  public function send_getRecommendUserByUserId($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getRecommendUserByUserId_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRecommendUserByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRecommendUserByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRecommendUserByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getRecommendUserByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getRecommendUserByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRecommendUserByUserId failed: unknown result");
  }

  public function addUserRecommend($userId, $salonId, $recommendCode, $addTime)
  {
    $this->send_addUserRecommend($userId, $salonId, $recommendCode, $addTime);
    return $this->recv_addUserRecommend();
  }

  public function send_addUserRecommend($userId, $salonId, $recommendCode, $addTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_addUserRecommend_args();
    $args->userId = $userId;
    $args->salonId = $salonId;
    $args->recommendCode = $recommendCode;
    $args->addTime = $addTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addUserRecommend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addUserRecommend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addUserRecommend()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_addUserRecommend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_addUserRecommend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addUserRecommend failed: unknown result");
  }

  public function getCompanyCodeByCode($code)
  {
    $this->send_getCompanyCodeByCode($code);
    return $this->recv_getCompanyCodeByCode();
  }

  public function send_getCompanyCodeByCode($code)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeByCode_args();
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompanyCodeByCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompanyCodeByCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompanyCodeByCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeByCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeByCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompanyCodeByCode failed: unknown result");
  }

  public function getCompanyCodeById($companyId)
  {
    $this->send_getCompanyCodeById($companyId);
    return $this->recv_getCompanyCodeById();
  }

  public function send_getCompanyCodeById($companyId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeById_args();
    $args->companyId = $companyId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCompanyCodeById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCompanyCodeById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCompanyCodeById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCompanyCodeById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCompanyCodeById failed: unknown result");
  }

  public function updateStylistOnLogin($stylistId, $osType)
  {
    $this->send_updateStylistOnLogin($stylistId, $osType);
    return $this->recv_updateStylistOnLogin();
  }

  public function send_updateStylistOnLogin($stylistId, $osType)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistOnLogin_args();
    $args->stylistId = $stylistId;
    $args->osType = $osType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateStylistOnLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateStylistOnLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateStylistOnLogin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistOnLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistOnLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateStylistOnLogin failed: unknown result");
  }

  public function updateStylistSign($stylistId, $signature)
  {
    $this->send_updateStylistSign($stylistId, $signature);
    return $this->recv_updateStylistSign();
  }

  public function send_updateStylistSign($stylistId, $signature)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistSign_args();
    $args->stylistId = $stylistId;
    $args->signature = $signature;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateStylistSign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateStylistSign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateStylistSign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistSign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateStylistSign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateStylistSign failed: unknown result");
  }

  public function getSpecialEventList($type, $status)
  {
    $this->send_getSpecialEventList($type, $status);
    return $this->recv_getSpecialEventList();
  }

  public function send_getSpecialEventList($type, $status)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSpecialEventList_args();
    $args->type = $type;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSpecialEventList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSpecialEventList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSpecialEventList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getSpecialEventList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getSpecialEventList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSpecialEventList failed: unknown result");
  }

  public function incStylistLikeNum($stylistId, $step)
  {
    $this->send_incStylistLikeNum($stylistId, $step);
    return $this->recv_incStylistLikeNum();
  }

  public function send_incStylistLikeNum($stylistId, $step)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_incStylistLikeNum_args();
    $args->stylistId = $stylistId;
    $args->step = $step;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'incStylistLikeNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('incStylistLikeNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_incStylistLikeNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_incStylistLikeNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_incStylistLikeNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("incStylistLikeNum failed: unknown result");
  }

  public function getRandomGroup($num)
  {
    $this->send_getRandomGroup($num);
    return $this->recv_getRandomGroup();
  }

  public function send_getRandomGroup($num)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getRandomGroup_args();
    $args->num = $num;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRandomGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRandomGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRandomGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getRandomGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getRandomGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRandomGroup failed: unknown result");
  }

  public function getGroupCate($groupId)
  {
    $this->send_getGroupCate($groupId);
    return $this->recv_getGroupCate();
  }

  public function send_getGroupCate($groupId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getGroupCate_args();
    $args->groupId = $groupId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getGroupCate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getGroupCate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getGroupCate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getGroupCate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getGroupCate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getGroupCate failed: unknown result");
  }

  public function getCateGory(array $catIds)
  {
    $this->send_getCateGory($catIds);
    return $this->recv_getCateGory();
  }

  public function send_getCateGory(array $catIds)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCateGory_args();
    $args->catIds = $catIds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCateGory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCateGory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCateGory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getCateGory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getCateGory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCateGory failed: unknown result");
  }

  public function updateSalonComment($salonId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep)
  {
    $this->send_updateSalonComment($salonId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep);
    return $this->recv_updateSalonComment();
  }

  public function send_updateSalonComment($salonId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateSalonComment_args();
    $args->salonId = $salonId;
    $args->commentNumStep = $commentNumStep;
    $args->satisfyOneStep = $satisfyOneStep;
    $args->satisfyTwoStep = $satisfyTwoStep;
    $args->satisfyThreeStep = $satisfyThreeStep;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSalonComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSalonComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSalonComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateSalonComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateSalonComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSalonComment failed: unknown result");
  }

  public function updateItemComment($itemId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep)
  {
    $this->send_updateItemComment($itemId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep);
    return $this->recv_updateItemComment();
  }

  public function send_updateItemComment($itemId, $commentNumStep, $satisfyOneStep, $satisfyTwoStep, $satisfyThreeStep)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemComment_args();
    $args->itemId = $itemId;
    $args->commentNumStep = $commentNumStep;
    $args->satisfyOneStep = $satisfyOneStep;
    $args->satisfyTwoStep = $satisfyTwoStep;
    $args->satisfyThreeStep = $satisfyThreeStep;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateItemComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateItemComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateItemComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateItemComment failed: unknown result");
  }

  public function updateItemRepertory($itemId, $sold, $innage)
  {
    $this->send_updateItemRepertory($itemId, $sold, $innage);
    return $this->recv_updateItemRepertory();
  }

  public function send_updateItemRepertory($itemId, $sold, $innage)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemRepertory_args();
    $args->itemId = $itemId;
    $args->sold = $sold;
    $args->innage = $innage;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateItemRepertory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateItemRepertory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateItemRepertory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemRepertory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateItemRepertory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateItemRepertory failed: unknown result");
  }

  public function getHairstylistCount($status)
  {
    $this->send_getHairstylistCount($status);
    return $this->recv_getHairstylistCount();
  }

  public function send_getHairstylistCount($status)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getHairstylistCount_args();
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getHairstylistCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getHairstylistCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getHairstylistCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getHairstylistCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getHairstylistCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getHairstylistCount failed: unknown result");
  }

  public function updateRecommendUserReceivedPrize($userId, $receivedPrize)
  {
    $this->send_updateRecommendUserReceivedPrize($userId, $receivedPrize);
    return $this->recv_updateRecommendUserReceivedPrize();
  }

  public function send_updateRecommendUserReceivedPrize($userId, $receivedPrize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateRecommendUserReceivedPrize_args();
    $args->userId = $userId;
    $args->receivedPrize = $receivedPrize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateRecommendUserReceivedPrize', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateRecommendUserReceivedPrize', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateRecommendUserReceivedPrize()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_updateRecommendUserReceivedPrize_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_updateRecommendUserReceivedPrize_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateRecommendUserReceivedPrize failed: unknown result");
  }

  public function getAddServicesById(array $ids)
  {
    $this->send_getAddServicesById($ids);
    return $this->recv_getAddServicesById();
  }

  public function send_getAddServicesById(array $ids)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getAddServicesById_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAddServicesById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAddServicesById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAddServicesById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getAddServicesById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getAddServicesById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAddServicesById failed: unknown result");
  }

  public function getItemTypeAddService($typeid)
  {
    $this->send_getItemTypeAddService($typeid);
    return $this->recv_getItemTypeAddService();
  }

  public function send_getItemTypeAddService($typeid)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypeAddService_args();
    $args->typeid = $typeid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemTypeAddService', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemTypeAddService', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemTypeAddService()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypeAddService_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\SellerService_getItemTypeAddService_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemTypeAddService failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class SellerService_getSalonBranch_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonBranch_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonBranch_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonBranch_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonBranch_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonBranchRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonBranchRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonBranch_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonBranch_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonBranch_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonList_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonListParam
   */
  public $getSalonListParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'getSalonListParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonListParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonList_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonList_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonList_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonList_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonInfo_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonInfo_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonInfo_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonInfo_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonWorks_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $flags = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'flags',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonWorks_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonWorks_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonWorks_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonWorks_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonWorksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonWorksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonWorks_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonWorks_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonWorks_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonStylists_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonStylists_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonStylists_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonStylists_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonStylists_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonStylistsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonStylistsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonStylists_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonStylists_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonStylists_result', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistWorks_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistWorks_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistWorks_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistWorks_args', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistWorks_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetStylistWorksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetStylistWorksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistWorks_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistWorks_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistWorks_result', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistInfo_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistInfo_args', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistInfo_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistInfo_result', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistInfoByPhone_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mobilephone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobilephone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistInfoByPhone_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistInfoByPhone_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistInfoByPhone_args', self::$_TSPEC, $output);
  }

}

class SellerService_getStylistInfoByPhone_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetStylistInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getStylistInfoByPhone_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getStylistInfoByPhone_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getStylistInfoByPhone_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonItem_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonItem_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonItem_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonItem_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonItem_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonItemRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonItemRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonItem_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonItem_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonItem_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemInfo_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemInfo_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemInfo_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemInfo_result', self::$_TSPEC, $output);
  }

}

class SellerService_getFormats_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $formatIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'formatIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getFormats_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getFormats_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getFormats_args', self::$_TSPEC, $output);
  }

}

class SellerService_getFormats_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetFormatsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetFormatsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getFormats_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getFormats_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getFormats_result', self::$_TSPEC, $output);
  }

}

class SellerService_getFormatTypes_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $formatTypeIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'formatTypeIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getFormatTypes_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getFormatTypes_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getFormatTypes_args', self::$_TSPEC, $output);
  }

}

class SellerService_getFormatTypes_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetFormatTypesRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetFormatTypesRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getFormatTypes_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getFormatTypes_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getFormatTypes_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemPriceFormats_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemPriceFormats_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemPriceFormats_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemPriceFormats_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemPriceFormats_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemPriceFormatRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemPriceFormatRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemPriceFormats_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemPriceFormats_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemPriceFormats_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypePriceRanges_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemTypeId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemTypeId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemTypePriceRanges_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypePriceRanges_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypePriceRanges_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypePriceRanges_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemTypePriceRangesRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemTypePriceRangesRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemTypePriceRanges_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypePriceRanges_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypePriceRanges_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemBuyLimit_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemBuyLimit_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemBuyLimit_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemBuyLimit_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemBuyLimit_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemBuyLimitRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemBuyLimitRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemBuyLimit_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemBuyLimit_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemBuyLimit_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypes_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'SellerService_getItemTypes_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypes_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypes_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypes_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemTypesRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemTypesRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemTypes_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypes_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypes_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSubLocations_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSubLocations_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSubLocations_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSubLocations_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSubLocations_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSubLocationsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSubLocationsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSubLocations_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSubLocations_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSubLocations_result', self::$_TSPEC, $output);
  }

}

class SellerService_getLocationInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getLocationInfo_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getLocationInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getLocationInfo_args', self::$_TSPEC, $output);
  }

}

class SellerService_getLocationInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetLocationInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetLocationInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getLocationInfo_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getLocationInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getLocationInfo_result', self::$_TSPEC, $output);
  }

}

class SellerService_getIndexItems_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $types = null;
  /**
   * @var int
   */
  public $itemType = null;
  /**
   * @var int
   */
  public $district = null;
  /**
   * @var double
   */
  public $addrlong = null;
  /**
   * @var double
   */
  public $addrlati = null;
  /**
   * @var double
   */
  public $maxPrice = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;
  /**
   * @var int
   */
  public $group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'types',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'itemType',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'addrlong',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'addrlati',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'size',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'group',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getIndexItems_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getIndexItems_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getIndexItems_args', self::$_TSPEC, $output);
  }

}

class SellerService_getIndexItems_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetIndexItemsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetIndexItemsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getIndexItems_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getIndexItems_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getIndexItems_result', self::$_TSPEC, $output);
  }

}

class SellerService_getIndexItemsNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $types = null;
  /**
   * @var int
   */
  public $itemType = null;
  /**
   * @var int
   */
  public $district = null;
  /**
   * @var double
   */
  public $maxPrice = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var int
   */
  public $group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'types',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'itemType',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'group',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getIndexItemsNum_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getIndexItemsNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getIndexItemsNum_args', self::$_TSPEC, $output);
  }

}

class SellerService_getIndexItemsNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetIndexItemsNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetIndexItemsNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getIndexItemsNum_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getIndexItemsNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getIndexItemsNum_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $district = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonNum_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonNum_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSalonNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSalonNum_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSalonNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSalonNum_result', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendSet_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'SellerService_getDividendSet_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendSet_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendSet_args', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendSet_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetDividendSetRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetDividendSetRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getDividendSet_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendSet_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendSet_result', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendByCode_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $recommendCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recommendCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getDividendByCode_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendByCode_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendByCode_args', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendByCode_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetDividendByCodeRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetDividendByCodeRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getDividendByCode_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendByCode_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendByCode_result', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendBySalonId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getDividendBySalonId_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendBySalonId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendBySalonId_args', self::$_TSPEC, $output);
  }

}

class SellerService_getDividendBySalonId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetDividendBySalonIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetDividendBySalonIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getDividendBySalonId_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getDividendBySalonId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getDividendBySalonId_result', self::$_TSPEC, $output);
  }

}

class SellerService_getRecommendUserByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getRecommendUserByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getRecommendUserByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getRecommendUserByUserId_args', self::$_TSPEC, $output);
  }

}

class SellerService_getRecommendUserByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetRecommendUserByUserIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetRecommendUserByUserIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getRecommendUserByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getRecommendUserByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getRecommendUserByUserId_result', self::$_TSPEC, $output);
  }

}

class SellerService_addUserRecommend_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $recommendCode = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'recommendCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_addUserRecommend_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_addUserRecommend_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_addUserRecommend_args', self::$_TSPEC, $output);
  }

}

class SellerService_addUserRecommend_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddUserRecommendRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddUserRecommendRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_addUserRecommend_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_addUserRecommend_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_addUserRecommend_result', self::$_TSPEC, $output);
  }

}

class SellerService_getCompanyCodeByCode_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCompanyCodeByCode_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCompanyCodeByCode_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCompanyCodeByCode_args', self::$_TSPEC, $output);
  }

}

class SellerService_getCompanyCodeByCode_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByCodeRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByCodeRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCompanyCodeByCode_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCompanyCodeByCode_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCompanyCodeByCode_result', self::$_TSPEC, $output);
  }

}

class SellerService_getCompanyCodeById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $companyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'companyId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCompanyCodeById_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCompanyCodeById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCompanyCodeById_args', self::$_TSPEC, $output);
  }

}

class SellerService_getCompanyCodeById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetCompanyCodeByIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCompanyCodeById_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCompanyCodeById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCompanyCodeById_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateStylistOnLogin_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $osType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'osType',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateStylistOnLogin_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateStylistOnLogin_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateStylistOnLogin_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateStylistOnLogin_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateStylistOnLoginRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateStylistOnLoginRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateStylistOnLogin_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateStylistOnLogin_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateStylistOnLogin_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateStylistSign_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var string
   */
  public $signature = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateStylistSign_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateStylistSign_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateStylistSign_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateStylistSign_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateStylistSignRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateStylistSignRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateStylistSign_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateStylistSign_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateStylistSign_result', self::$_TSPEC, $output);
  }

}

class SellerService_getSpecialEventList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSpecialEventList_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSpecialEventList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSpecialEventList_args', self::$_TSPEC, $output);
  }

}

class SellerService_getSpecialEventList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSpecialEventListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSpecialEventListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getSpecialEventList_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getSpecialEventList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getSpecialEventList_result', self::$_TSPEC, $output);
  }

}

class SellerService_incStylistLikeNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $step = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'step',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_incStylistLikeNum_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_incStylistLikeNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_incStylistLikeNum_args', self::$_TSPEC, $output);
  }

}

class SellerService_incStylistLikeNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\IncStylistLikeNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\IncStylistLikeNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_incStylistLikeNum_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_incStylistLikeNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_incStylistLikeNum_result', self::$_TSPEC, $output);
  }

}

class SellerService_getRandomGroup_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $num = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getRandomGroup_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getRandomGroup_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getRandomGroup_args', self::$_TSPEC, $output);
  }

}

class SellerService_getRandomGroup_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetRandomGroupRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetRandomGroupRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getRandomGroup_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getRandomGroup_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getRandomGroup_result', self::$_TSPEC, $output);
  }

}

class SellerService_getGroupCate_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getGroupCate_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getGroupCate_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getGroupCate_args', self::$_TSPEC, $output);
  }

}

class SellerService_getGroupCate_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetGroupCateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetGroupCateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getGroupCate_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getGroupCate_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getGroupCate_result', self::$_TSPEC, $output);
  }

}

class SellerService_getCateGory_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $catIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'catIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCateGory_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCateGory_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCateGory_args', self::$_TSPEC, $output);
  }

}

class SellerService_getCateGory_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetCategoryRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetCategoryRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getCateGory_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getCateGory_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getCateGory_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateSalonComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $commentNumStep = null;
  /**
   * @var int
   */
  public $satisfyOneStep = null;
  /**
   * @var int
   */
  public $satisfyTwoStep = null;
  /**
   * @var int
   */
  public $satisfyThreeStep = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'commentNumStep',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'satisfyOneStep',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'satisfyTwoStep',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'satisfyThreeStep',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateSalonComment_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateSalonComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateSalonComment_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateSalonComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateSalonComment_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateSalonComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateSalonComment_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateItemComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $commentNumStep = null;
  /**
   * @var int
   */
  public $satisfyOneStep = null;
  /**
   * @var int
   */
  public $satisfyTwoStep = null;
  /**
   * @var int
   */
  public $satisfyThreeStep = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'commentNumStep',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'satisfyOneStep',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'satisfyTwoStep',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'satisfyThreeStep',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateItemComment_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateItemComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateItemComment_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateItemComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateItemComment_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateItemComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateItemComment_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateItemRepertory_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $sold = null;
  /**
   * @var int
   */
  public $innage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sold',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'innage',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateItemRepertory_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateItemRepertory_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateItemRepertory_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateItemRepertory_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateItemRepertory_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateItemRepertory_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateItemRepertory_result', self::$_TSPEC, $output);
  }

}

class SellerService_getHairstylistCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getHairstylistCount_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getHairstylistCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getHairstylistCount_args', self::$_TSPEC, $output);
  }

}

class SellerService_getHairstylistCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getHairstylistCount_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getHairstylistCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getHairstylistCount_result', self::$_TSPEC, $output);
  }

}

class SellerService_updateRecommendUserReceivedPrize_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $receivedPrize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'receivedPrize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateRecommendUserReceivedPrize_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateRecommendUserReceivedPrize_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateRecommendUserReceivedPrize_args', self::$_TSPEC, $output);
  }

}

class SellerService_updateRecommendUserReceivedPrize_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_updateRecommendUserReceivedPrize_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_updateRecommendUserReceivedPrize_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_updateRecommendUserReceivedPrize_result', self::$_TSPEC, $output);
  }

}

class SellerService_getAddServicesById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getAddServicesById_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getAddServicesById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getAddServicesById_args', self::$_TSPEC, $output);
  }

}

class SellerService_getAddServicesById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetAddServicesRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetAddServicesRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getAddServicesById_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getAddServicesById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getAddServicesById_result', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypeAddService_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $typeid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'typeid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemTypeAddService_args';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypeAddService_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypeAddService_args', self::$_TSPEC, $output);
  }

}

class SellerService_getItemTypeAddService_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemTypeAddServiceRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemTypeAddServiceRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SellerService_getItemTypeAddService_result';
  }

  public function read($input)
  {
    return $this->_read('SellerService_getItemTypeAddService_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('SellerService_getItemTypeAddService_result', self::$_TSPEC, $output);
  }

}


