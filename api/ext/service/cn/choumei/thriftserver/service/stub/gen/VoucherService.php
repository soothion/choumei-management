<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * ******************************
 *  方法定义
 * *****************************
 */
interface VoucherServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * SQL: selcet count(*) from cm_voucher where vMobilephone=#{vMobilephone} and vcId=#{vcId} and vStatus=#{vStatus}
   * 
   * @param string $vMobilephone
   * @param int $vStatus
   * @param int $vcId
   * @return \cn\choumei\thriftserver\service\stub\gen\VouchersRet
   */
  public function getVouchersByPhone($vMobilephone, $vStatus, $vcId);
  /**
   * 参考查询准则 #getCountVoucherBy(String, long, String, int) <br>
   * SQL: select count(*) from cm_voucher_trend where 'vId'=#{vId},'vOrderSn'=#{orderSn},'vStatus'=1
   * 
   * @param int $vId
   * @param string $vOrderSn
   * @param int $vStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getCountVoucherTrendBy($vId, $vOrderSn, $vStatus);
  /**
   * 参考查询准则 #getCountVoucherBy(String, long, String, int) <br>
   * SQL:
   * SELECT * FROM cm_voucher_conf WHERE status=1 AND getNumMax>0 AND ( UNIX_TIMESTAMP(NOW()) BETWEEN getStart AND if(getEnd<=0,'2147443200',getEnd) ) AND ( UNIX_TIMESTAMP(NOW()) BETWEEN useStart AND useEnd )
   * <if"test consume != null">
   * AND getNeedMoney<={$needMoney}
   * </if>
   * @param: consume 0 false, 1 true
   * 
   * @param int $needMoney
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherConfsRet
   */
  public function getAllVoucherConf($needMoney);
  /**
   * 参考查询准则 #getCountVoucherBy(String, long, String, int) <br>
   * SQL: select vUseMoney from cm_voucher where  vId=#{vId}
   * 
   * 
   * @param int $vId
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherRet ******************************
   *  返回消息体
   * *****************************
   * 
   */
  public function getVocherById($vId);
  /**
   * 参考查询准则 #getCountVoucherBy(String, long, String, int) <br>
   * SQL: select vUseMoney from cm_voucher where `vOrderSn`=#{vOrderSn}
   * 
   * 
   * @param string $vOrderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherRet ******************************
   *  返回消息体
   * *****************************
   * 
   */
  public function getVocherByOrdersn($vOrderSn);
  /**
   * 参考查询准则 #getCountVoucherBy(String, long, String, int) <br>
   * SQL: select vUseMoney from cm_voucher where `vSn`=#{vSn}
   * 
   * 
   * @param string $vSn
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherRet ******************************
   *  返回消息体
   * *****************************
   * 
   */
  public function getVocherBySn($vSn);
  /**
   * 获取用户代金券列表
   * SQL: select * from cm_voucher where vUserId=#{vUserId} and and vStatus = #{status}
   * 
   * @param int $userId
   * @param int $status
   * @param int $vcId
   * @return \cn\choumei\thriftserver\service\stub\gen\VouchersRet
   */
  public function getVoucherByIds($userId, $status, $vcId);
  /**
   * 1. 对于0或null的字段，程序中根据数据库字段设置相应的默认值；<br>
   * 2. 除1外，直接赋值<br>
   * @return 插入纪录的id
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\VoucherParam $voucherParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addVoucher(\cn\choumei\thriftserver\service\stub\gen\VoucherParam $voucherParam);
  /**
   * 参考上#addVoucher(VoucherThrift)
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam $voucherTrendParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addVoucherTrend(\cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam $voucherTrendParam);
  /**
   * 更新券状态
   * 
   * @param int[] $vId
   * @param int $status
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateVoucherStatus(array $vId, $status, $userId);
  /**
   * 获取优惠券活动配置
   * 
   * @param string $vcSn
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherConfRet
   */
  public function getVoucherConfBySn($vcSn);
  /**
   * 获取活动优惠券发送数量
   * 
   * @param int $vcId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getVoucherNumByVcId($vcId);
  /**
   * 取消优惠券与订单的绑定关系
   * 
   * @param int $vId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function unbindOrder($vId);
  /**
   * 绑定优惠券与订单
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\BindOrderParam $param
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function bindOrder(\cn\choumei\thriftserver\service\stub\gen\BindOrderParam $param);
  /**
   * 获取券动态
   * 
   * @param int $vId
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\VoucherTrendsRet
   */
  public function getVoucherTrends($vId, $orderSn);
}

class VoucherServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\VoucherServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function getVouchersByPhone($vMobilephone, $vStatus, $vcId)
  {
    $this->send_getVouchersByPhone($vMobilephone, $vStatus, $vcId);
    return $this->recv_getVouchersByPhone();
  }

  public function send_getVouchersByPhone($vMobilephone, $vStatus, $vcId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVouchersByPhone_args();
    $args->vMobilephone = $vMobilephone;
    $args->vStatus = $vStatus;
    $args->vcId = $vcId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVouchersByPhone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVouchersByPhone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVouchersByPhone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVouchersByPhone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVouchersByPhone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVouchersByPhone failed: unknown result");
  }

  public function getCountVoucherTrendBy($vId, $vOrderSn, $vStatus)
  {
    $this->send_getCountVoucherTrendBy($vId, $vOrderSn, $vStatus);
    return $this->recv_getCountVoucherTrendBy();
  }

  public function send_getCountVoucherTrendBy($vId, $vOrderSn, $vStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getCountVoucherTrendBy_args();
    $args->vId = $vId;
    $args->vOrderSn = $vOrderSn;
    $args->vStatus = $vStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCountVoucherTrendBy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCountVoucherTrendBy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCountVoucherTrendBy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getCountVoucherTrendBy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getCountVoucherTrendBy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCountVoucherTrendBy failed: unknown result");
  }

  public function getAllVoucherConf($needMoney)
  {
    $this->send_getAllVoucherConf($needMoney);
    return $this->recv_getAllVoucherConf();
  }

  public function send_getAllVoucherConf($needMoney)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getAllVoucherConf_args();
    $args->needMoney = $needMoney;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllVoucherConf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllVoucherConf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllVoucherConf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getAllVoucherConf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getAllVoucherConf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllVoucherConf failed: unknown result");
  }

  public function getVocherById($vId)
  {
    $this->send_getVocherById($vId);
    return $this->recv_getVocherById();
  }

  public function send_getVocherById($vId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherById_args();
    $args->vId = $vId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVocherById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVocherById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVocherById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVocherById failed: unknown result");
  }

  public function getVocherByOrdersn($vOrderSn)
  {
    $this->send_getVocherByOrdersn($vOrderSn);
    return $this->recv_getVocherByOrdersn();
  }

  public function send_getVocherByOrdersn($vOrderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherByOrdersn_args();
    $args->vOrderSn = $vOrderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVocherByOrdersn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVocherByOrdersn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVocherByOrdersn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherByOrdersn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherByOrdersn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVocherByOrdersn failed: unknown result");
  }

  public function getVocherBySn($vSn)
  {
    $this->send_getVocherBySn($vSn);
    return $this->recv_getVocherBySn();
  }

  public function send_getVocherBySn($vSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherBySn_args();
    $args->vSn = $vSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVocherBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVocherBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVocherBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVocherBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVocherBySn failed: unknown result");
  }

  public function getVoucherByIds($userId, $status, $vcId)
  {
    $this->send_getVoucherByIds($userId, $status, $vcId);
    return $this->recv_getVoucherByIds();
  }

  public function send_getVoucherByIds($userId, $status, $vcId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherByIds_args();
    $args->userId = $userId;
    $args->status = $status;
    $args->vcId = $vcId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVoucherByIds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVoucherByIds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVoucherByIds()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherByIds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherByIds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVoucherByIds failed: unknown result");
  }

  public function addVoucher(\cn\choumei\thriftserver\service\stub\gen\VoucherParam $voucherParam)
  {
    $this->send_addVoucher($voucherParam);
    return $this->recv_addVoucher();
  }

  public function send_addVoucher(\cn\choumei\thriftserver\service\stub\gen\VoucherParam $voucherParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucher_args();
    $args->voucherParam = $voucherParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addVoucher', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addVoucher', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addVoucher()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucher_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucher_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addVoucher failed: unknown result");
  }

  public function addVoucherTrend(\cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam $voucherTrendParam)
  {
    $this->send_addVoucherTrend($voucherTrendParam);
    return $this->recv_addVoucherTrend();
  }

  public function send_addVoucherTrend(\cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam $voucherTrendParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucherTrend_args();
    $args->voucherTrendParam = $voucherTrendParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addVoucherTrend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addVoucherTrend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addVoucherTrend()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucherTrend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_addVoucherTrend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addVoucherTrend failed: unknown result");
  }

  public function updateVoucherStatus(array $vId, $status, $userId)
  {
    $this->send_updateVoucherStatus($vId, $status, $userId);
    return $this->recv_updateVoucherStatus();
  }

  public function send_updateVoucherStatus(array $vId, $status, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_updateVoucherStatus_args();
    $args->vId = $vId;
    $args->status = $status;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateVoucherStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateVoucherStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateVoucherStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_updateVoucherStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_updateVoucherStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateVoucherStatus failed: unknown result");
  }

  public function getVoucherConfBySn($vcSn)
  {
    $this->send_getVoucherConfBySn($vcSn);
    return $this->recv_getVoucherConfBySn();
  }

  public function send_getVoucherConfBySn($vcSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherConfBySn_args();
    $args->vcSn = $vcSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVoucherConfBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVoucherConfBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVoucherConfBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherConfBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherConfBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVoucherConfBySn failed: unknown result");
  }

  public function getVoucherNumByVcId($vcId)
  {
    $this->send_getVoucherNumByVcId($vcId);
    return $this->recv_getVoucherNumByVcId();
  }

  public function send_getVoucherNumByVcId($vcId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherNumByVcId_args();
    $args->vcId = $vcId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVoucherNumByVcId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVoucherNumByVcId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVoucherNumByVcId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherNumByVcId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherNumByVcId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVoucherNumByVcId failed: unknown result");
  }

  public function unbindOrder($vId)
  {
    $this->send_unbindOrder($vId);
    return $this->recv_unbindOrder();
  }

  public function send_unbindOrder($vId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_unbindOrder_args();
    $args->vId = $vId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unbindOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unbindOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unbindOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_unbindOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_unbindOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("unbindOrder failed: unknown result");
  }

  public function bindOrder(\cn\choumei\thriftserver\service\stub\gen\BindOrderParam $param)
  {
    $this->send_bindOrder($param);
    return $this->recv_bindOrder();
  }

  public function send_bindOrder(\cn\choumei\thriftserver\service\stub\gen\BindOrderParam $param)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_bindOrder_args();
    $args->param = $param;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bindOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bindOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bindOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_bindOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_bindOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("bindOrder failed: unknown result");
  }

  public function getVoucherTrends($vId, $orderSn)
  {
    $this->send_getVoucherTrends($vId, $orderSn);
    return $this->recv_getVoucherTrends();
  }

  public function send_getVoucherTrends($vId, $orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherTrends_args();
    $args->vId = $vId;
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getVoucherTrends', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getVoucherTrends', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getVoucherTrends()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherTrends_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\VoucherService_getVoucherTrends_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getVoucherTrends failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class VoucherService_getVouchersByPhone_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $vMobilephone = null;
  /**
   * @var int
   */
  public $vStatus = null;
  /**
   * @var int
   */
  public $vcId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vMobilephone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'vStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'vcId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVouchersByPhone_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVouchersByPhone_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVouchersByPhone_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVouchersByPhone_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VouchersRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VouchersRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVouchersByPhone_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVouchersByPhone_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVouchersByPhone_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getCountVoucherTrendBy_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $vId = null;
  /**
   * @var string
   */
  public $vOrderSn = null;
  /**
   * @var int
   */
  public $vStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'vOrderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'vStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getCountVoucherTrendBy_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getCountVoucherTrendBy_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getCountVoucherTrendBy_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getCountVoucherTrendBy_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getCountVoucherTrendBy_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getCountVoucherTrendBy_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getCountVoucherTrendBy_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getAllVoucherConf_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $needMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'needMoney',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getAllVoucherConf_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getAllVoucherConf_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getAllVoucherConf_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getAllVoucherConf_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherConfsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherConfsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getAllVoucherConf_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getAllVoucherConf_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getAllVoucherConf_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $vId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherById_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherById_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherById_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherById_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherByOrdersn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $vOrderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vOrderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherByOrdersn_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherByOrdersn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherByOrdersn_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherByOrdersn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherByOrdersn_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherByOrdersn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherByOrdersn_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $vSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherBySn_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherBySn_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVocherBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVocherBySn_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVocherBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVocherBySn_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherByIds_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $vcId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'vcId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherByIds_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherByIds_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherByIds_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherByIds_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VouchersRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VouchersRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherByIds_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherByIds_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherByIds_result', self::$_TSPEC, $output);
  }

}

class VoucherService_addVoucher_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherParam
   */
  public $voucherParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_addVoucher_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_addVoucher_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_addVoucher_args', self::$_TSPEC, $output);
  }

}

class VoucherService_addVoucher_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_addVoucher_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_addVoucher_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_addVoucher_result', self::$_TSPEC, $output);
  }

}

class VoucherService_addVoucherTrend_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam
   */
  public $voucherTrendParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherTrendParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherTrendParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_addVoucherTrend_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_addVoucherTrend_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_addVoucherTrend_args', self::$_TSPEC, $output);
  }

}

class VoucherService_addVoucherTrend_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_addVoucherTrend_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_addVoucherTrend_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_addVoucherTrend_result', self::$_TSPEC, $output);
  }

}

class VoucherService_updateVoucherStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $vId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vId',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_updateVoucherStatus_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_updateVoucherStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_updateVoucherStatus_args', self::$_TSPEC, $output);
  }

}

class VoucherService_updateVoucherStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_updateVoucherStatus_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_updateVoucherStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_updateVoucherStatus_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherConfBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $vcSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vcSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherConfBySn_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherConfBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherConfBySn_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherConfBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherConfRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherConfRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherConfBySn_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherConfBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherConfBySn_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherNumByVcId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $vcId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vcId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherNumByVcId_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherNumByVcId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherNumByVcId_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherNumByVcId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherNumByVcId_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherNumByVcId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherNumByVcId_result', self::$_TSPEC, $output);
  }

}

class VoucherService_unbindOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $vId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_unbindOrder_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_unbindOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_unbindOrder_args', self::$_TSPEC, $output);
  }

}

class VoucherService_unbindOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_unbindOrder_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_unbindOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_unbindOrder_result', self::$_TSPEC, $output);
  }

}

class VoucherService_bindOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BindOrderParam
   */
  public $param = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'param',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\BindOrderParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_bindOrder_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_bindOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_bindOrder_args', self::$_TSPEC, $output);
  }

}

class VoucherService_bindOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_bindOrder_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_bindOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_bindOrder_result', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherTrends_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $vId = null;
  /**
   * @var string
   */
  public $orderSn = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherTrends_args';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherTrends_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherTrends_args', self::$_TSPEC, $output);
  }

}

class VoucherService_getVoucherTrends_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\VoucherTrendsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\VoucherTrendsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'VoucherService_getVoucherTrends_result';
  }

  public function read($input)
  {
    return $this->_read('VoucherService_getVoucherTrends_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('VoucherService_getVoucherTrends_result', self::$_TSPEC, $output);
  }

}


