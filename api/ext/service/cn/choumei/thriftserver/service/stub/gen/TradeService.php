<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Trade服务接口
 */
interface TradeServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * 通过userId获取用户的臭美券信息
   * 对应PHP：OrderTicketModel  public function getTicketByUserId($userId, $status, $page, $size)
   * sortType 0=>addTime降序(默认) 1=>addTime升序
   * 
   * @param int $userId
   * @param int $status
   * @param int $page
   * @param int $pageSize
   * @param int $sortType
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTicketByUserIdRet
   */
  public function getTicketByUserId($userId, $status, $page, $pageSize, $sortType);
  /**
   * 通过userId获取ticket的数量
   * 对应PHP：OrderTicketModel public function getTicketNumByUserId($userId, $status)
   * 
   * @param int $userId
   * @param int $status
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getTicketNumByUserId($userId, $status);
  /**
   * 更新订单中的price
   * 
   * @param string $orderSn
   * @param string $priceall
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateOrderPrice($orderSn, $priceall);
  /**
   * 获取我的退款臭美卷信息列表
   * 对应PHP OrderTicketMode public function getRefundList( $userId , $start , $pageSize )
   * userId:用户id
   * start:起始条数
   * pageSize:页面条数
   * 
   * @param int $userId
   * @param int $start
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetRefundListRet 我的退款臭美卷信息列表结果集
   * 
   */
  public function getRefundList($userId, $start, $pageSize);
  /**
   * 获取我的退款臭美卷信息条数
   * 对应PHP OrderTicketMode public function getRefundCount ($userId)
   * userId:用户id
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getRefundCount($userId);
  /**
   * 获取我的未消费臭美卷信息列表
   * 对应PHP OrderTicketMode public function getNonConsumeList ( $userId , $start , $pageSize )
   * userId:用户id
   * start:起始条数
   * pageSize:页面条数
   * 
   * @param int $userId
   * @param int $start
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNonConsumeListRet 我的未消费臭美卷信息列表结果集
   * 
   */
  public function getNonConsumeList($userId, $start, $pageSize);
  /**
   * 获取我的未消费臭美卷信息条数
   * 对应PHP OrderTicketMode public function getNonConsumeCount ($userId)
   * userId:用户id
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getNonConsumeCount($userId);
  /**
   * 通过订单项目id获取项目订单详情
   * 对应PHP OrderItemModel public getOrderInfoById ( $ itemId )
   * itemId,项目id
   * 
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public function getOrderItemById($itemId);
  /**
   * 获取参与过激活码活动的首单
   * 对应PHP OrderModel public getFirstOrderIspay2($userId)
   * userId:用户ID
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public function getFirstOrderIspay2($userId);
  /**
   * 通过ticketNo找到pay_type和money
   * 对应PHP FundflowModel public getFundflowArr($ticketNo)
   * ticketNo:券号
   * 
   * @param string $ticketNo
   * @return \cn\choumei\thriftserver\service\stub\gen\GetFundflowArrRet 通过ticketNo找到pay_type和money结果集
   * 
   */
  public function getFundflowArr($ticketNo);
  /**
   * 通过ordersn找到RecommendCodeOrder
   * 对应PHP RecommendCodeUserModel public getRecommendCodeOrder($ordersn)
   * ticketNo:券号
   * 
   * @param string $ordersn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetRecommendCodeOrderRet 通过ordersn找到RecommendCodeOrder结果集
   * 
   */
  public function getRecommendCodeOrder($ordersn);
  /**
   * 通过OrderId查询Order信息
   * 对应PHP OrderModel public getOrerInfoById($orderId)
   * orderId:订单Id
   * 
   * @param int $orderId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public function getOrderById($orderId);
  /**
   *   生成订单
   * 对应PHP：OrderModel private function createOrder
   * 1：orderSn订单号 2：shopCartSn购物车号 3：salonId店铺id 4：userId用户id 5： num包含项目数 6：priceall总额 7: priceallOri原总额 8：addTime下单时间 9：companyId集团id 10：isCompanyPrice是否集团价
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\OrderParam $orderParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addOrder(\cn\choumei\thriftserver\service\stub\gen\OrderParam $orderParam);
  /**
   *  生成订单项目
   * 对应PHP： OrderItemModel public function  addOrderItem($orderItemData)
   * 1:orderId订单id 2: orderSn订单号 3: itemId项目id 4: userId用户id 5:salonId店铺id 6:itemName项目名称 7:num项目数量 8:priceDis项目单价 9:priceall项目总额 10:priceallOri项目原总额 11:extra额外选项 12:normsStr规格描述 13:endTime有效期时间
   *  14:serviceDetail服务详情 15:useLimit消费限制描述 16:salonNormsId规格描述id
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\OrderItemParam $orderItemParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addOrderItem(\cn\choumei\thriftserver\service\stub\gen\OrderItemParam $orderItemParam);
  /**
   *  通过订单号拿到订单信息
   *  对应PHP： OrderModel public function getOrderByOrdersn($orderSn)
   * 　1:orderSn 订单号
   * 
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public function getOrderByOrderSn($orderSn);
  /**
   *  
   * 添加商家扣分记录
   * 对应PHP RecommendCodeUserModel private function addOrder($data)
   * 1: recommendCode店铺的推荐码 2:orderSn订单号 3:addTime添加时间 4:updateTime更新时间)
   * 
   * @param string $recommendCode
   * @param string $orderSn
   * @param int $addTime
   * @param int $updateTime
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addRecommendCodeOrder($recommendCode, $orderSn, $addTime, $updateTime);
  /**
   *  通过订单id拿到订单项目信息
   *  对应PHP： OrderModel public function getOrderAndOrderItemBySnAndUserId($ordersn,$user_id)
   * 　1:orderId 订单id
   * 
   * @param int $orderId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public function getOrderItemByOrderId($orderId);
  /**
   * 更新订单项目中的price
   *  对应PHP：OrderItemModel public function  updateOrderItemPrice($priceDis)
   *  1: priceDis项目单价 2: priceall 项目总价3:orderSn订单号
   * 
   * @param string $priceDis
   * @param string $priceall
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateOrderItemPrice($priceDis, $priceall, $orderSn);
  /**
   * 通过userId获取订单信息数量
   *  对应PHP：OrderItemModel public function getCount(ispay,status,userId,shopcartsn)
   *  1: priceDis项目单价 2: priceall 项目总价
   * 
   * @param int $ispay
   * @param int $status
   * @param int $userId
   * @param string $shopcartsn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getOrderCountByUserId($ispay, $status, $userId, $shopcartsn);
  /**
   *  通过订单号拿到订单项目信息
   *  对应PHP：OrderItemTicketViewModel  'order_item'   => array('ordersn','salonid','itemname','price_dis','priceall','extra','itemid','useLimit'
   * 　1:orderSn 订单号
   * 
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public function getOrderItemByOrderSn($orderSn);
  /**
   * 支付日志写入
   * 对应PHP HairstylistModel public function payment_log($tn,$ordersn, $total_fee, $device) payid=1, add_time=time()
   * tn:支付方返回的流水号
   * ordersn:订单编号
   * 支付总金额
   * device:终端类别 1:app 2:wap
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam $addPaymentLogParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addPaymentLog(\cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam $addPaymentLogParam);
  /**
   * ************************Trade API Of Cart**************************
   * 
   * @param int[] $scIds
   * @param int $userId
   * @param string $shopCartSn
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function setShopCartSn(array $scIds, $userId, $shopCartSn);
  /**
   * 得到购物车数量
   * 对应PHP ShopCartModel public function getShopCartNums($userId)
   * userId:用户id
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getShopCartNums($userId);
  /**
   * 获取购物车列表
   * 对应PHP ShopCartModel public function getShopCartList($userId)
   * userId:用户id
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet
   */
  public function getShopCartList($userId);
  /**
   * 根据$scIds获取购物车
   * 对应PHP ShopCartModel public function getShopCarts($scIds,$userId)
   * userId:用户id
   * scIds:购物车Id数组
   * 
   * @param int[] $scIds
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet
   */
  public function getShopCarts(array $scIds, $userId);
  /**
   * 根据购物车号获取所有购物车
   * 对应PHP ShopCartModel public function getAllShopCartBySn($shopcartSn)
   * shopcartSn:购物车号
   * 
   * @param string $shopcartSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetAllShopCartBySnRet
   */
  public function getAllShopCartBySn($shopcartSn);
  /**
   * 根据用户id删除对应scId的购物车列表
   * 对应PHP ShopCartModel public function deleteShopCarts($scIds,$userId)
   * scIds:购物车Id数组
   * userId:用户Id
   * 
   * @param int[] $scIds
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function deleteShopCarts(array $scIds, $userId);
  /**
   * 根据购物车号删除购物车列表
   * 对应PHP ShopCartModel public function deleteShopCartBySn($shopcartSn,$userId)
   * shopcartSn:购物车号
   * userId:用户Id
   * 
   * @param string $shopcartSn
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function deleteShopCartBySn($shopcartSn, $userId);
  /**
   * 根据项目和规格获取用户购物车
   * 对应PHP ShopCartModel public function getShopCartByItemNorms($itemId,$salonNormsId, $userId)
   * shopcartSn:购物车号
   * userId:用户Id
   * 
   * @param int $itemId
   * @param int $salonNormsId
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetShopCartByItemNormsRet
   */
  public function getShopCartByItemNorms($itemId, $salonNormsId, $userId);
  /**
   * 根据ShopCartSn获取OrderList
   * 对应PHP OrderMode public function getOrderByShopCartSn($shopcartsn）
   * shopcartsn：购物车号
   * 
   * @param string $shopcartsn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public function getOrderByShopCartSn($shopcartsn);
  /**
   * 根据id更新购物车(条件为scId, userId)
   * 对应PHP ShopCartMode updatShopCartById($scId, $userId, $nums,$datapriceAll,$datapriceDisAll);
   * scId：购物车id
   * userId:用户id
   * nums:数量
   * priceAll:总额
   * priceDisAll:原总额
   * 
   * @param int $scId
   * @param int $userId
   * @param int $nums
   * @param int $priceAll
   * @param int $priceDisAll
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdatShopCartByIdRet
   */
  public function updatShopCartById($scId, $userId, $nums, $priceAll, $priceDisAll);
  /**
   * 添加购物车
   * 对应PHP ShopCartMode addShopCart($salonId,$salonName,$itemId,$itemName,$salonNormsId,$salonNormsName,$nums,$price,$priceAll,$priceDis,$priceDisAll,$userId,$addTime);
   * 对应ShopCart的字段
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddShopCartParam $addShopCartParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addShopCart(\cn\choumei\thriftserver\service\stub\gen\AddShopCartParam $addShopCartParam);
  /**
   * 根据orderItemId获取优惠券
   * 对应PHP OrderTicketMode getTicketByOrderItemId($orderItemId)
   * orderItemId:订单项目id
   * 
   * @param int $orderItemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTicketRet
   */
  public function getTicketByOrderItemId($orderItemId);
  /**
   * 获取已评价任务列表
   * 对应PHP BountyMode getCommentedTaskList($userId, $page, $pageSize)
   * sql: select 'name','money','satisfyType',bounty_task.'hairstylistId','salonId',bounty_task.'btSn','taskType'
   * from cm_bount_task bounty_task left join cm_bounty_comment bounty_comment ON bounty_task.btSn = bounty_comment.btSn
   * where bounty_task.userId=$userId and btStatus=4 and iscomment = 2 and bounty_comment.type=2 order by bounty_comment.addTime desc
   * 
   * @param int $userId
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public function getCommentedTaskList($userId, $page, $pageSize);
  /**
   * @param string $bountySn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getBountyRequestCountBySn($bountySn);
  /**
   * 取消赏金任务
   * 对应PHP BountyMode cancelTask($btSn,$userId);
   * sql: update cm_bounty_task set btStatus=9, set refundStatus=5 , set endTime=//当前时间戳// where btSn=$btSn and userId=$userId and btStatus<3 and refundStatus<5
   * endTime：取消时间
   * 
   * @param string $btSn
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function cancelTask($btSn, $userId);
  /**
   * 批量添加BountyPush
   * 对应PHP BountyMode addAllBountyPush($allPushData)
   * sql: insert into cm_bounty_push (userId,btSn,status,reqStatus,addTime,stylistId,ostype) values(?,?,?,?,?,?,?)
   * 对应bounty_push字段
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam[] $allPushData
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addAllBountyPush(array $allPushData);
  /**
   * 通过赏金单号更新赏金选择造型师信息(条件：btSn)
   * 对应PHP：BountyModel
   * 
   * @param string $btSn
   * @param int $salonId
   * @param int $hairstylistId
   * @param int $btStatus
   * @param int $selectTime
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateStylistSelectedBySn($btSn, $salonId, $hairstylistId, $btStatus, $selectTime);
  /**
   * 通过赏金单号更新赏金选择造型师信息(条件：btSn)
   * 对应PHP：SalonFundflowModel updateSalonFundflowByOrderSn($orderSn, $salonId,  $bargainno);
   * 
   * @param string $orderSn
   * @param int $salonId
   * @param string $bargainno
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateSalonFundflowByOrderSn($orderSn, $salonId, $bargainno);
  /**
   * 通过赏金号更新推送消息抢单状态(条件：btSn,reqStatus,更新reqStatus,)
   * 对应PHP：BountyPushModel updateReqStatusBySnAndReqS($btSn,$oldReqStatus,$newReqStatus)
   * 
   * @param string $btSn
   * @param int $oldReqStatus
   * @param int $newReqStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateReqStatusBySnAndReqS($btSn, $oldReqStatus, $newReqStatus);
  /**
   * 根据id获取任务信息
   * 对应PHP BountyModel public function getTaskById($btId,$userId,$btStatus)
   * btId:任务Id
   * userId:用户Id
   * btStatus:任务状态
   * 
   * @param int $btId
   * @param int $userId
   * @param int $btStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet
   */
  public function getTaskById($btId, $userId, $btStatus);
  /**
   * 获取任务列表
   * 对应PHP BountyModel public function getTask($userId, $btStatus, $page, $pageSize, $totalNum)
   * userId:用户Id
   * btStatus:任务状态
   * page:页数
   * pageSize:页面条数
   * totalNum:获取总条数
   * 
   * @param int $userId
   * @param int $btStatus
   * @param int $page
   * @param int $pageSize
   * @param int $totalNum
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTaskRet ************************赏金频道API**************************
   * 
   */
  public function getTask($userId, $btStatus, $page, $pageSize, $totalNum);
  /**
   * 得到不同任务状态的任务数目
   * 对应PHP BountyModel public function getBtStatusCount($userId,$btStatus)
   * userId:用户Id
   * btStatus:任务状态
   * 
   * @param int $userId
   * @param int $btStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getBtStatusCount($userId, $btStatus);
  /**
   * 得到没评论的任务数目(btStatus=4,iscomment=1)
   * 对应PHP BountyModel public function getNotCommentCount($userId)
   * userId:用户Id
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getNotCommentCount($userId);
  /**
   * 通过userId拿到BountyTask信息
   * 对应PHP： BountyModel public function getBountyTaskByUserId($userId)
   *  1:userId用户id 2:ispay是否支付1表示未支付，2表示已支付 3: i32 btStatus任务状态
   * 
   * @param int $userId
   * @param int $ispay
   * @param int $btStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public function getBountyTaskByUserId($userId, $ispay, $btStatus);
  /**
   * 通过赏金单号拿到BountyTask信息
   * 对应PHP： BountyModel public function  getBountyTaskBybtSn($btSn)
   *  1：btSn 赏金单号
   * 
   * @param string $btSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet
   */
  public function getBountyTaskBybtSn($btSn);
  /**
   * 通过赏金单号获取抢单信息
   * 对应PHP：BountyRequestModel  public function getBountyRequestListBybtSn($bountySn,$page,$pageSize)
   * 1: btSn赏金单号 2:page,3:pageSize
   * 
   * @param string $btSn
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyRequestListRet
   */
  public function getBountyRequestList($btSn, $page, $pageSize);
  /**
   * 通过hairstylistId和满意类型拿到该造型师被打赏或者被取消打赏的次数
   * 对应PHP：BountyModel  public function getHairstylistBountyCount($hairstylistId,$satisfy)
   * 1:hairstylistId造型师id  2:satisfy 满意类型：1满意 2不满意
   * 
   * @param int $hairstylistId
   * @param int $satisfy
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getHairstylistBountyCount($hairstylistId, $satisfy);
  /**
   * 根据造型师id和赏金单号更新抢单状态 1未抢到 2抢到
   * 对应PHP：BountyRequestModel   public function updateBountyReqBrStatus($hairstylistId,$btSn,$brStatus)
   * 1: btSn赏金单号 2:hairstylistId
   * 
   * @param int $hairstylistId
   * @param string $btSn
   * @param int $brStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateBountyReqBrStatus($hairstylistId, $btSn, $brStatus);
  /**
   * 添加赏金任务
   * 对应PHP：BountyModel   public function addBounty( $data )
   * 1：userId,2: money,3: sneedsStr,4: name,5: madeTo,6:  reason,7: district,8:  zone, 9: selectType,10: remark,11:addTime,12:btSn
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam $addBountyTaskParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBountyTask(\cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam $addBountyTaskParam);
  /**
   * 服务完成时用户是否满意
   * 
   * @param string $btSn
   * @param int $satisfyType
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateBountyTaskOnFinish($btSn, $satisfyType);
  /**
   * 获取用户赏金任务完成未评价和评价列表信息
   * 对应PHP：BountyModel   public function taskList( $userId,$commentStatus,$btStatus, $page,$pageSize )
   * 1: userId,2: isComment,3: page 4: pageSize
   * 
   * @param int $userId
   * @param int $isComment
   * @param int $btStatus
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public function getTaskList($userId, $isComment, $btStatus, $page, $pageSize);
  /**
   * 获取用户单次赏金金额排行榜
   * 对应PHP：BountyModel  public function getSingleRanklist()
   * $list=$this->field('userId,name as nameStr,money')->where($where)->order('money desc')->limit(8)->select();
   * 1: btStatus,2: satisfyType,3:addTime
   * 
   * @param int $btStatus
   * @param int $satisfyType
   * @param int $addTime
   * @param int $district
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistRet
   */
  public function getSingleRanklist($btStatus, $satisfyType, $addTime, $district);
  /**
   * 获取用户赏金总额排行榜
   * 对应PHP：BountyModel  public function getTotalRanklist()
   * $sql='select userId,name as nameStr,sum(money) as total from __PREFIX__bounty_task where btStatus=4
   * and satisfyType=1 and addTime<'.$endDate.' group by userId order by total desc limit 8';
   * 1: btStatus,2: satisfyType,3:addTime
   * 
   * @param int $btStatus
   * @param int $satisfyType
   * @param int $addTime
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistRet
   */
  public function getTotalRanklist($btStatus, $satisfyType, $addTime);
  /**
   * 更新消息推送的抢单状态
   * 对应PHP：BountyPushModel   public function updateReqStatus($bountySn,$reqStatus)
   * 1:btSn,2:reqStatus,3:stylistId
   * 
   * @param string $btSn
   * @param int $reqStatus
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateReqStatus($btSn, $reqStatus, $stylistId);
  /**
   * 根据赏金单号获取推送次数
   * 对应PHP：BountyPushModel   public function updateReqStatus($bountySn,$reqStatus)
   * 1:btSn,赏金单号
   * 
   * @param string $btSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getBountyPushCount($btSn);
  /**
   * 通过赏金单号更新赏金任务信息
   * 对应PHP：BountyModel   public function  updateBountyTaskBybtSn()
   * 1: btSn,2: salonId,3: stylistId,4: btStatus,5: requestNum抢单数量6: addTime, 7: selectTime
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam $updateBountyTaskBybtSnAndSalonIdParam
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateBountyTaskBybtSnAndSalonId(\cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam $updateBountyTaskBybtSnAndSalonIdParam);
  /**
   * 添加BountyRequest信息到表中
   * 对应PHP：BountyRequestModel   public function addBountyRequest($btSn,$salonId,$stylistId,$brStatus,$addTime)
   * 1: btSn,2: salonId,3: stylistId,4: brStatus抢单状态：1未抢到 2抢到 5：addTime
   * 
   * @param string $btSn
   * @param int $salonId
   * @param int $stylistId
   * @param int $brStatus
   * @param int $addTime
   * @param string $remark
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBountyRequest($btSn, $salonId, $stylistId, $brStatus, $addTime, $remark);
  /**
   * 将信息插入到bounty_push中
   * 对应PHP：BountyPushModel  public function addBountyPush($userId,$bountySn,$status,$reqStatus,$stylistId,$ostype,$addTime)
   * 1:userId,2:  btSn,3:status,4:  reqStatus,抢单状态5: stylistId,6:ostype,设备类型7: i64 addTime
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam $addBountyPushParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBountyPush(\cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam $addBountyPushParam);
  /**
   * 向bounty_friends表写记录数据
   * 对应PHP：BountyFriendsModel public function addBountyFriends($btSn,$name,$needsStr,$reason,$remark,$addTime)
   * 1: btSn,2:name,3:  needsStr,美发需求4:reason,5: remark个性需求,6:addTime
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam $addBountyFriendsParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBountyFriends(\cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam $addBountyFriendsParam);
  /**
   * 发布消息展示
   * 对应PHP：BountyModel  public function getBountyTaskList($startTime,$endTime,$isPay)
   * 1:  startTime,2:endTime,3: isPay 这个场景是2，注意排序是addTime desc
   * 
   * @param int $startTime
   * @param int $endTime
   * @param int $isPay
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public function getBountyTaskList($startTime, $endTime, $isPay);
  /**
   * 通过userId拿到订单列表
   * 
   * 
   * @param int $userId
   * @param int $ispay
   * @param int $status
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public function getOrderList($userId, $ispay, $status, $page, $pageSize);
  /**
   * 根据臭美券号获取券信息
   * 
   * @param string $ticketNo
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTicketRet
   */
  public function getTicketByNo($ticketNo);
  /**
   * 更新订单状态
   * 
   * @param string $orderSn
   * @param int $ispay
   * @param int $paytime
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function UpdateOrderIsPayByOrderSn($orderSn, $ispay, $paytime);
  /**
   * 生成臭美券号
   * 
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTicketNoRet
   */
  public function getTicketNo();
  /**
   * 添加臭美券
   * 
   * @param int $orderItemId
   * @param string $orderSn
   * @param int $userId
   * @param string $ticketNo
   * @param int $endTime
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addOrderTicket($orderItemId, $orderSn, $userId, $ticketNo, $endTime);
  /**
   * 添加臭美券趋势
   * 
   * @param string $orderSn
   * @param string $ticketNo
   * @param int $status
   * @param string $remark
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addOrderTicketTrends($orderSn, $ticketNo, $status, $remark);
  /**
   * 增加用户流水
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddFundflowParam $addFundflowParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addFundflow(\cn\choumei\thriftserver\service\stub\gen\AddFundflowParam $addFundflowParam);
  /**
   * 增加退款流水
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam $addOrderRefundParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addOrderRefund(\cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam $addOrderRefundParam);
  /**
   * 修改券状态
   * 
   * @param string $ticketNo
   * @param int $status
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateTicketStatus($ticketNo, $status);
  /**
   * @param string $ticketNo
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderRefundRet
   */
  public function getOrderRefundByTicketNo($ticketNo);
  /**
   * 获取造型师赏金大厅任务列表
   * 
   * @param int $stylistId
   * @param int $status
   * @param int $time
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyPushListRet
   */
  public function getStylistPushTask($stylistId, $status, $time, $page, $size);
  /**
   * 获取造型师赏金大厅任务刷新数量
   * 
   * @param int $stylistId
   * @param int $status
   * @param int $time
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getStylistNewPushTaskNum($stylistId, $status, $time);
  /**
   * 获取造型师任务列表变动数量
   * 
   * @param int $stylistId
   * @param int $status
   * @param int $time
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getStylistNewBountyTaskNum($stylistId, $status, $time);
  /**
   * 获取造型师任务列表
   * 
   * @param int $stylistId
   * @param string $status
   * @param int $time
   * @param int $page
   * @param int $size
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public function getStylistBountyTask($stylistId, $status, $time, $page, $size);
  /**
   * 更新bounty_task表中iscomment的状态
   * 对应PHP： BountyModel public function modifyComment( $btSn , $userId )
   * orderId:订单Id
   * 
   * @param string $btSn
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateIsComment($btSn, $userId);
  /**
   * 造型师更新任务信息
   * 
   * @param string $btSn
   * @param int $status
   * @param int $requestnum
   * @param int $score
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function stylistUpdateTask($btSn, $status, $requestnum, $score);
  /**
   * 更新券的评论状态
   * 
   * @param int $orderTicketId
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateTicketIsComment($orderTicketId);
  /**
   * 添加ShopCartBuy
   * 对应PHP ShopCartBuyMode addShopCartBuy($ShopcartBuy);
   * 对应ShopCartBuy的字段,参数不包括scId和shopcartsn
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift $shopcartBuy
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addShopCartBuy(\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift $shopcartBuy);
  /**
   * 添加salon fundflow
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam $salonFundflow
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addSalonFundflow(\cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam $salonFundflow);
  /**
   * 更改赏金任务退款状态
   * 
   * @param string $btSn
   * @param int $refundStatus
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateBountyTaskRefund($btSn, $refundStatus);
  /**
   * 更改赏金任务支付状态
   * 
   * @param string $btSn
   * @param int $isPay
   * @param int $payType
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateBountyTaskIsPay($btSn, $isPay, $payType);
  /**
   * 更新订单支付状态并生成臭美券
   * 
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function validateOrderAndGenTicket($orderSn);
  /**
   * 未评论券数量
   * 
   * @param int $userId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getNonCommentTicketNum($userId);
  /**
   * 更新券已发送短信状态
   * 
   * @param string $ticketNo
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateTicketSendMsgStatus($ticketNo);
  /**
   * 根据orderid获取order信息
   * 
   * @param int $orderId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public function getOrderByOrderId($orderId);
  /**
   * 更新订单实际支付金额
   * 
   * @param string $orderSn
   * @param string $actuallyPay
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function updateOrderActuallyPay($orderSn, $actuallyPay);
  /**
   * 易联支付下单
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam $payecoPlaceRequestParam
   * @return \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRet PayecoPlaceRet
   * 易联支付下单请求返回结果
   * 
   */
  public function payecoPlace(\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam $payecoPlaceRequestParam);
  /**
   * 易联支付回调
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam $payecoNotifyRequestParam
   * @return \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRet PayecoNotifyRet
   * 易联支付回调请求返回结果
   * 
   */
  public function payecoNotify(\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam $payecoNotifyRequestParam);
  /**
   * 易联支付退款
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam $payecoRefundRequestParam
   * @return \cn\choumei\thriftserver\service\stub\gen\PayecoRefundRet PayecoPlaceRet
   * 易联支付退款请求返回结果
   * 
   */
  public function payecoRefund(\cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam $payecoRefundRequestParam);
  /**
   * 微信支付退款
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam $wehcatRefundRequestParam
   * @return \cn\choumei\thriftserver\service\stub\gen\WechatRefundRet WechatRefundRet
   * 微信支付退款请求返回结果
   * 
   */
  public function wechatRefund(\cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam $wehcatRefundRequestParam);
  /**
   * 获取订单支付日志
   * 
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetPaymentLogRet
   */
  public function getPaymentLogByOrderSn($orderSn);
  /**
   *  添加订单的活动处理记录 cm_dispose_order
   *  对应PHP： CodeActivityModel private function addDisposeRecord($dpoCode,$orderSn,$shopcartSn='')
   * 　1:dpoCode 处理活动的邀请码 2:orderSn 订单号 3：shopcartsn 购物车号 4 dpoAddTime 添加时间
   * 
   * @param string $dpoCode
   * @param string $orderSn
   * @param string $shopcartsn
   * @param int $dpoAddTime
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addDisposeOrder($dpoCode, $orderSn, $shopcartsn, $dpoAddTime);
  /**
   *  获取订单的活动处理记录 cm_dispose_order
   *  对应PHP： CodeActivityModel private function isDispose($dpoCode,$orderSn,$shopcartSn='')
   * 　1:orderSn 订单号
   * 
   * @param string $orderSn
   * @return \cn\choumei\thriftserver\service\stub\gen\GetDisposeOrderRet
   */
  public function getDisposeOrder($orderSn);
  /**
   * 获取某项目用户的购买数量
   * 
   * @param int $userId
   * @param int $itemId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetNumRet count 操作
   * 
   */
  public function getItemUserBuyNum($userId, $itemId);
  /**
   *  通过赏金单号和发型师id获取push信息
   * 对应PHP：$pushinfo = M('bounty_push')->where(array('btSn' => $sn, 'stylistId' => $this->stylistId))->find();
   * 
   * @param string $btSn
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyPushInfoRet
   */
  public function getBountyPushInfo($btSn, $stylistId);
  /**
   * 通过赏金单号和发型师id获取BountyRequest信息
   * 对应PHP：$req = M('bounty_request')->where(array('btSn' => $sn, 'hairstylistId' => $this->stylistId))->find();
   * 
   * @param string $btSn
   * @param int $stylistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyRequestRet
   */
  public function getBountyRequest($btSn, $stylistId);
  /**
   * 根据status 和 endTime获取 order_ticket
   * 对应PHP：OrderTicketModel getOrderTicketByStatus
   * 
   * 
   * @param int $status
   * @param int $endTime
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetOrderTicketByStatusRet
   */
  public function getOrderTicketByStatus($status, $endTime, $page, $pageSize);
}

class TradeServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\TradeServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function getTicketByUserId($userId, $status, $page, $pageSize, $sortType)
  {
    $this->send_getTicketByUserId($userId, $status, $page, $pageSize, $sortType);
    return $this->recv_getTicketByUserId();
  }

  public function send_getTicketByUserId($userId, $status, $page, $pageSize, $sortType)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByUserId_args();
    $args->userId = $userId;
    $args->status = $status;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $args->sortType = $sortType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTicketByUserId failed: unknown result");
  }

  public function getTicketNumByUserId($userId, $status)
  {
    $this->send_getTicketNumByUserId($userId, $status);
    return $this->recv_getTicketNumByUserId();
  }

  public function send_getTicketNumByUserId($userId, $status)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNumByUserId_args();
    $args->userId = $userId;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketNumByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketNumByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketNumByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNumByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNumByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTicketNumByUserId failed: unknown result");
  }

  public function updateOrderPrice($orderSn, $priceall)
  {
    $this->send_updateOrderPrice($orderSn, $priceall);
    return $this->recv_updateOrderPrice();
  }

  public function send_updateOrderPrice($orderSn, $priceall)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderPrice_args();
    $args->orderSn = $orderSn;
    $args->priceall = $priceall;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrderPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrderPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrderPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrderPrice failed: unknown result");
  }

  public function getRefundList($userId, $start, $pageSize)
  {
    $this->send_getRefundList($userId, $start, $pageSize);
    return $this->recv_getRefundList();
  }

  public function send_getRefundList($userId, $start, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundList_args();
    $args->userId = $userId;
    $args->start = $start;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRefundList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRefundList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRefundList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRefundList failed: unknown result");
  }

  public function getRefundCount($userId)
  {
    $this->send_getRefundCount($userId);
    return $this->recv_getRefundCount();
  }

  public function send_getRefundCount($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundCount_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRefundCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRefundCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRefundCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRefundCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRefundCount failed: unknown result");
  }

  public function getNonConsumeList($userId, $start, $pageSize)
  {
    $this->send_getNonConsumeList($userId, $start, $pageSize);
    return $this->recv_getNonConsumeList();
  }

  public function send_getNonConsumeList($userId, $start, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeList_args();
    $args->userId = $userId;
    $args->start = $start;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNonConsumeList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNonConsumeList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNonConsumeList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNonConsumeList failed: unknown result");
  }

  public function getNonConsumeCount($userId)
  {
    $this->send_getNonConsumeCount($userId);
    return $this->recv_getNonConsumeCount();
  }

  public function send_getNonConsumeCount($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeCount_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNonConsumeCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNonConsumeCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNonConsumeCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonConsumeCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNonConsumeCount failed: unknown result");
  }

  public function getOrderItemById($itemId)
  {
    $this->send_getOrderItemById($itemId);
    return $this->recv_getOrderItemById();
  }

  public function send_getOrderItemById($itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemById_args();
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderItemById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderItemById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderItemById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderItemById failed: unknown result");
  }

  public function getFirstOrderIspay2($userId)
  {
    $this->send_getFirstOrderIspay2($userId);
    return $this->recv_getFirstOrderIspay2();
  }

  public function send_getFirstOrderIspay2($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getFirstOrderIspay2_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFirstOrderIspay2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFirstOrderIspay2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFirstOrderIspay2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getFirstOrderIspay2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getFirstOrderIspay2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFirstOrderIspay2 failed: unknown result");
  }

  public function getFundflowArr($ticketNo)
  {
    $this->send_getFundflowArr($ticketNo);
    return $this->recv_getFundflowArr();
  }

  public function send_getFundflowArr($ticketNo)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getFundflowArr_args();
    $args->ticketNo = $ticketNo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFundflowArr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFundflowArr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFundflowArr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getFundflowArr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getFundflowArr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getFundflowArr failed: unknown result");
  }

  public function getRecommendCodeOrder($ordersn)
  {
    $this->send_getRecommendCodeOrder($ordersn);
    return $this->recv_getRecommendCodeOrder();
  }

  public function send_getRecommendCodeOrder($ordersn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRecommendCodeOrder_args();
    $args->ordersn = $ordersn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getRecommendCodeOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getRecommendCodeOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getRecommendCodeOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getRecommendCodeOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getRecommendCodeOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getRecommendCodeOrder failed: unknown result");
  }

  public function getOrderById($orderId)
  {
    $this->send_getOrderById($orderId);
    return $this->recv_getOrderById();
  }

  public function send_getOrderById($orderId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderById_args();
    $args->orderId = $orderId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderById failed: unknown result");
  }

  public function addOrder(\cn\choumei\thriftserver\service\stub\gen\OrderParam $orderParam)
  {
    $this->send_addOrder($orderParam);
    return $this->recv_addOrder();
  }

  public function send_addOrder(\cn\choumei\thriftserver\service\stub\gen\OrderParam $orderParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrder_args();
    $args->orderParam = $orderParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addOrder failed: unknown result");
  }

  public function addOrderItem(\cn\choumei\thriftserver\service\stub\gen\OrderItemParam $orderItemParam)
  {
    $this->send_addOrderItem($orderItemParam);
    return $this->recv_addOrderItem();
  }

  public function send_addOrderItem(\cn\choumei\thriftserver\service\stub\gen\OrderItemParam $orderItemParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderItem_args();
    $args->orderItemParam = $orderItemParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrderItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrderItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrderItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addOrderItem failed: unknown result");
  }

  public function getOrderByOrderSn($orderSn)
  {
    $this->send_getOrderByOrderSn($orderSn);
    return $this->recv_getOrderByOrderSn();
  }

  public function send_getOrderByOrderSn($orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderSn_args();
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderByOrderSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderByOrderSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderByOrderSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderByOrderSn failed: unknown result");
  }

  public function addRecommendCodeOrder($recommendCode, $orderSn, $addTime, $updateTime)
  {
    $this->send_addRecommendCodeOrder($recommendCode, $orderSn, $addTime, $updateTime);
    return $this->recv_addRecommendCodeOrder();
  }

  public function send_addRecommendCodeOrder($recommendCode, $orderSn, $addTime, $updateTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addRecommendCodeOrder_args();
    $args->recommendCode = $recommendCode;
    $args->orderSn = $orderSn;
    $args->addTime = $addTime;
    $args->updateTime = $updateTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addRecommendCodeOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addRecommendCodeOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addRecommendCodeOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addRecommendCodeOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addRecommendCodeOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addRecommendCodeOrder failed: unknown result");
  }

  public function getOrderItemByOrderId($orderId)
  {
    $this->send_getOrderItemByOrderId($orderId);
    return $this->recv_getOrderItemByOrderId();
  }

  public function send_getOrderItemByOrderId($orderId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderId_args();
    $args->orderId = $orderId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderItemByOrderId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderItemByOrderId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderItemByOrderId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderItemByOrderId failed: unknown result");
  }

  public function updateOrderItemPrice($priceDis, $priceall, $orderSn)
  {
    $this->send_updateOrderItemPrice($priceDis, $priceall, $orderSn);
    return $this->recv_updateOrderItemPrice();
  }

  public function send_updateOrderItemPrice($priceDis, $priceall, $orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderItemPrice_args();
    $args->priceDis = $priceDis;
    $args->priceall = $priceall;
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrderItemPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrderItemPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrderItemPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderItemPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderItemPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrderItemPrice failed: unknown result");
  }

  public function getOrderCountByUserId($ispay, $status, $userId, $shopcartsn)
  {
    $this->send_getOrderCountByUserId($ispay, $status, $userId, $shopcartsn);
    return $this->recv_getOrderCountByUserId();
  }

  public function send_getOrderCountByUserId($ispay, $status, $userId, $shopcartsn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderCountByUserId_args();
    $args->ispay = $ispay;
    $args->status = $status;
    $args->userId = $userId;
    $args->shopcartsn = $shopcartsn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderCountByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderCountByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderCountByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderCountByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderCountByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderCountByUserId failed: unknown result");
  }

  public function getOrderItemByOrderSn($orderSn)
  {
    $this->send_getOrderItemByOrderSn($orderSn);
    return $this->recv_getOrderItemByOrderSn();
  }

  public function send_getOrderItemByOrderSn($orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderSn_args();
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderItemByOrderSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderItemByOrderSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderItemByOrderSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderItemByOrderSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderItemByOrderSn failed: unknown result");
  }

  public function addPaymentLog(\cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam $addPaymentLogParam)
  {
    $this->send_addPaymentLog($addPaymentLogParam);
    return $this->recv_addPaymentLog();
  }

  public function send_addPaymentLog(\cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam $addPaymentLogParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addPaymentLog_args();
    $args->addPaymentLogParam = $addPaymentLogParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addPaymentLog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addPaymentLog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addPaymentLog()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addPaymentLog_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addPaymentLog_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addPaymentLog failed: unknown result");
  }

  public function setShopCartSn(array $scIds, $userId, $shopCartSn)
  {
    $this->send_setShopCartSn($scIds, $userId, $shopCartSn);
    return $this->recv_setShopCartSn();
  }

  public function send_setShopCartSn(array $scIds, $userId, $shopCartSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_setShopCartSn_args();
    $args->scIds = $scIds;
    $args->userId = $userId;
    $args->shopCartSn = $shopCartSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setShopCartSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setShopCartSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setShopCartSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_setShopCartSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_setShopCartSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("setShopCartSn failed: unknown result");
  }

  public function getShopCartNums($userId)
  {
    $this->send_getShopCartNums($userId);
    return $this->recv_getShopCartNums();
  }

  public function send_getShopCartNums($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartNums_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShopCartNums', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShopCartNums', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShopCartNums()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartNums_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartNums_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getShopCartNums failed: unknown result");
  }

  public function getShopCartList($userId)
  {
    $this->send_getShopCartList($userId);
    return $this->recv_getShopCartList();
  }

  public function send_getShopCartList($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartList_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShopCartList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShopCartList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShopCartList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getShopCartList failed: unknown result");
  }

  public function getShopCarts(array $scIds, $userId)
  {
    $this->send_getShopCarts($scIds, $userId);
    return $this->recv_getShopCarts();
  }

  public function send_getShopCarts(array $scIds, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCarts_args();
    $args->scIds = $scIds;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShopCarts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShopCarts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShopCarts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCarts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCarts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getShopCarts failed: unknown result");
  }

  public function getAllShopCartBySn($shopcartSn)
  {
    $this->send_getAllShopCartBySn($shopcartSn);
    return $this->recv_getAllShopCartBySn();
  }

  public function send_getAllShopCartBySn($shopcartSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getAllShopCartBySn_args();
    $args->shopcartSn = $shopcartSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllShopCartBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllShopCartBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllShopCartBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getAllShopCartBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getAllShopCartBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAllShopCartBySn failed: unknown result");
  }

  public function deleteShopCarts(array $scIds, $userId)
  {
    $this->send_deleteShopCarts($scIds, $userId);
    return $this->recv_deleteShopCarts();
  }

  public function send_deleteShopCarts(array $scIds, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCarts_args();
    $args->scIds = $scIds;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteShopCarts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteShopCarts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteShopCarts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCarts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCarts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteShopCarts failed: unknown result");
  }

  public function deleteShopCartBySn($shopcartSn, $userId)
  {
    $this->send_deleteShopCartBySn($shopcartSn, $userId);
    return $this->recv_deleteShopCartBySn();
  }

  public function send_deleteShopCartBySn($shopcartSn, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCartBySn_args();
    $args->shopcartSn = $shopcartSn;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteShopCartBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteShopCartBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteShopCartBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCartBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_deleteShopCartBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("deleteShopCartBySn failed: unknown result");
  }

  public function getShopCartByItemNorms($itemId, $salonNormsId, $userId)
  {
    $this->send_getShopCartByItemNorms($itemId, $salonNormsId, $userId);
    return $this->recv_getShopCartByItemNorms();
  }

  public function send_getShopCartByItemNorms($itemId, $salonNormsId, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartByItemNorms_args();
    $args->itemId = $itemId;
    $args->salonNormsId = $salonNormsId;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShopCartByItemNorms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShopCartByItemNorms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShopCartByItemNorms()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartByItemNorms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getShopCartByItemNorms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getShopCartByItemNorms failed: unknown result");
  }

  public function getOrderByShopCartSn($shopcartsn)
  {
    $this->send_getOrderByShopCartSn($shopcartsn);
    return $this->recv_getOrderByShopCartSn();
  }

  public function send_getOrderByShopCartSn($shopcartsn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByShopCartSn_args();
    $args->shopcartsn = $shopcartsn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderByShopCartSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderByShopCartSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderByShopCartSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByShopCartSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByShopCartSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderByShopCartSn failed: unknown result");
  }

  public function updatShopCartById($scId, $userId, $nums, $priceAll, $priceDisAll)
  {
    $this->send_updatShopCartById($scId, $userId, $nums, $priceAll, $priceDisAll);
    return $this->recv_updatShopCartById();
  }

  public function send_updatShopCartById($scId, $userId, $nums, $priceAll, $priceDisAll)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updatShopCartById_args();
    $args->scId = $scId;
    $args->userId = $userId;
    $args->nums = $nums;
    $args->priceAll = $priceAll;
    $args->priceDisAll = $priceDisAll;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatShopCartById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatShopCartById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatShopCartById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updatShopCartById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updatShopCartById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatShopCartById failed: unknown result");
  }

  public function addShopCart(\cn\choumei\thriftserver\service\stub\gen\AddShopCartParam $addShopCartParam)
  {
    $this->send_addShopCart($addShopCartParam);
    return $this->recv_addShopCart();
  }

  public function send_addShopCart(\cn\choumei\thriftserver\service\stub\gen\AddShopCartParam $addShopCartParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCart_args();
    $args->addShopCartParam = $addShopCartParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addShopCart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addShopCart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addShopCart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addShopCart failed: unknown result");
  }

  public function getTicketByOrderItemId($orderItemId)
  {
    $this->send_getTicketByOrderItemId($orderItemId);
    return $this->recv_getTicketByOrderItemId();
  }

  public function send_getTicketByOrderItemId($orderItemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByOrderItemId_args();
    $args->orderItemId = $orderItemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketByOrderItemId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketByOrderItemId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketByOrderItemId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByOrderItemId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByOrderItemId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTicketByOrderItemId failed: unknown result");
  }

  public function getCommentedTaskList($userId, $page, $pageSize)
  {
    $this->send_getCommentedTaskList($userId, $page, $pageSize);
    return $this->recv_getCommentedTaskList();
  }

  public function send_getCommentedTaskList($userId, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getCommentedTaskList_args();
    $args->userId = $userId;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCommentedTaskList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCommentedTaskList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCommentedTaskList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getCommentedTaskList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getCommentedTaskList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCommentedTaskList failed: unknown result");
  }

  public function getBountyRequestCountBySn($bountySn)
  {
    $this->send_getBountyRequestCountBySn($bountySn);
    return $this->recv_getBountyRequestCountBySn();
  }

  public function send_getBountyRequestCountBySn($bountySn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestCountBySn_args();
    $args->bountySn = $bountySn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyRequestCountBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyRequestCountBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyRequestCountBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestCountBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestCountBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyRequestCountBySn failed: unknown result");
  }

  public function cancelTask($btSn, $userId)
  {
    $this->send_cancelTask($btSn, $userId);
    return $this->recv_cancelTask();
  }

  public function send_cancelTask($btSn, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_cancelTask_args();
    $args->btSn = $btSn;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cancelTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cancelTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cancelTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_cancelTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_cancelTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("cancelTask failed: unknown result");
  }

  public function addAllBountyPush(array $allPushData)
  {
    $this->send_addAllBountyPush($allPushData);
    return $this->recv_addAllBountyPush();
  }

  public function send_addAllBountyPush(array $allPushData)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addAllBountyPush_args();
    $args->allPushData = $allPushData;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addAllBountyPush', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addAllBountyPush', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addAllBountyPush()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addAllBountyPush_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addAllBountyPush_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addAllBountyPush failed: unknown result");
  }

  public function updateStylistSelectedBySn($btSn, $salonId, $hairstylistId, $btStatus, $selectTime)
  {
    $this->send_updateStylistSelectedBySn($btSn, $salonId, $hairstylistId, $btStatus, $selectTime);
    return $this->recv_updateStylistSelectedBySn();
  }

  public function send_updateStylistSelectedBySn($btSn, $salonId, $hairstylistId, $btStatus, $selectTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateStylistSelectedBySn_args();
    $args->btSn = $btSn;
    $args->salonId = $salonId;
    $args->hairstylistId = $hairstylistId;
    $args->btStatus = $btStatus;
    $args->selectTime = $selectTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateStylistSelectedBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateStylistSelectedBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateStylistSelectedBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateStylistSelectedBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateStylistSelectedBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateStylistSelectedBySn failed: unknown result");
  }

  public function updateSalonFundflowByOrderSn($orderSn, $salonId, $bargainno)
  {
    $this->send_updateSalonFundflowByOrderSn($orderSn, $salonId, $bargainno);
    return $this->recv_updateSalonFundflowByOrderSn();
  }

  public function send_updateSalonFundflowByOrderSn($orderSn, $salonId, $bargainno)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateSalonFundflowByOrderSn_args();
    $args->orderSn = $orderSn;
    $args->salonId = $salonId;
    $args->bargainno = $bargainno;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateSalonFundflowByOrderSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateSalonFundflowByOrderSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateSalonFundflowByOrderSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateSalonFundflowByOrderSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateSalonFundflowByOrderSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateSalonFundflowByOrderSn failed: unknown result");
  }

  public function updateReqStatusBySnAndReqS($btSn, $oldReqStatus, $newReqStatus)
  {
    $this->send_updateReqStatusBySnAndReqS($btSn, $oldReqStatus, $newReqStatus);
    return $this->recv_updateReqStatusBySnAndReqS();
  }

  public function send_updateReqStatusBySnAndReqS($btSn, $oldReqStatus, $newReqStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatusBySnAndReqS_args();
    $args->btSn = $btSn;
    $args->oldReqStatus = $oldReqStatus;
    $args->newReqStatus = $newReqStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateReqStatusBySnAndReqS', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateReqStatusBySnAndReqS', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateReqStatusBySnAndReqS()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatusBySnAndReqS_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatusBySnAndReqS_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateReqStatusBySnAndReqS failed: unknown result");
  }

  public function getTaskById($btId, $userId, $btStatus)
  {
    $this->send_getTaskById($btId, $userId, $btStatus);
    return $this->recv_getTaskById();
  }

  public function send_getTaskById($btId, $userId, $btStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskById_args();
    $args->btId = $btId;
    $args->userId = $userId;
    $args->btStatus = $btStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTaskById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTaskById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTaskById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTaskById failed: unknown result");
  }

  public function getTask($userId, $btStatus, $page, $pageSize, $totalNum)
  {
    $this->send_getTask($userId, $btStatus, $page, $pageSize, $totalNum);
    return $this->recv_getTask();
  }

  public function send_getTask($userId, $btStatus, $page, $pageSize, $totalNum)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTask_args();
    $args->userId = $userId;
    $args->btStatus = $btStatus;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $args->totalNum = $totalNum;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTask failed: unknown result");
  }

  public function getBtStatusCount($userId, $btStatus)
  {
    $this->send_getBtStatusCount($userId, $btStatus);
    return $this->recv_getBtStatusCount();
  }

  public function send_getBtStatusCount($userId, $btStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBtStatusCount_args();
    $args->userId = $userId;
    $args->btStatus = $btStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBtStatusCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBtStatusCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBtStatusCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBtStatusCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBtStatusCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBtStatusCount failed: unknown result");
  }

  public function getNotCommentCount($userId)
  {
    $this->send_getNotCommentCount($userId);
    return $this->recv_getNotCommentCount();
  }

  public function send_getNotCommentCount($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNotCommentCount_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNotCommentCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNotCommentCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNotCommentCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getNotCommentCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNotCommentCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNotCommentCount failed: unknown result");
  }

  public function getBountyTaskByUserId($userId, $ispay, $btStatus)
  {
    $this->send_getBountyTaskByUserId($userId, $ispay, $btStatus);
    return $this->recv_getBountyTaskByUserId();
  }

  public function send_getBountyTaskByUserId($userId, $ispay, $btStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskByUserId_args();
    $args->userId = $userId;
    $args->ispay = $ispay;
    $args->btStatus = $btStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyTaskByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyTaskByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyTaskByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyTaskByUserId failed: unknown result");
  }

  public function getBountyTaskBybtSn($btSn)
  {
    $this->send_getBountyTaskBybtSn($btSn);
    return $this->recv_getBountyTaskBybtSn();
  }

  public function send_getBountyTaskBybtSn($btSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskBybtSn_args();
    $args->btSn = $btSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyTaskBybtSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyTaskBybtSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyTaskBybtSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskBybtSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskBybtSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyTaskBybtSn failed: unknown result");
  }

  public function getBountyRequestList($btSn, $page, $pageSize)
  {
    $this->send_getBountyRequestList($btSn, $page, $pageSize);
    return $this->recv_getBountyRequestList();
  }

  public function send_getBountyRequestList($btSn, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestList_args();
    $args->btSn = $btSn;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyRequestList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyRequestList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyRequestList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequestList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyRequestList failed: unknown result");
  }

  public function getHairstylistBountyCount($hairstylistId, $satisfy)
  {
    $this->send_getHairstylistBountyCount($hairstylistId, $satisfy);
    return $this->recv_getHairstylistBountyCount();
  }

  public function send_getHairstylistBountyCount($hairstylistId, $satisfy)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getHairstylistBountyCount_args();
    $args->hairstylistId = $hairstylistId;
    $args->satisfy = $satisfy;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getHairstylistBountyCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getHairstylistBountyCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getHairstylistBountyCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getHairstylistBountyCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getHairstylistBountyCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getHairstylistBountyCount failed: unknown result");
  }

  public function updateBountyReqBrStatus($hairstylistId, $btSn, $brStatus)
  {
    $this->send_updateBountyReqBrStatus($hairstylistId, $btSn, $brStatus);
    return $this->recv_updateBountyReqBrStatus();
  }

  public function send_updateBountyReqBrStatus($hairstylistId, $btSn, $brStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyReqBrStatus_args();
    $args->hairstylistId = $hairstylistId;
    $args->btSn = $btSn;
    $args->brStatus = $brStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBountyReqBrStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBountyReqBrStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBountyReqBrStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyReqBrStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyReqBrStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBountyReqBrStatus failed: unknown result");
  }

  public function addBountyTask(\cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam $addBountyTaskParam)
  {
    $this->send_addBountyTask($addBountyTaskParam);
    return $this->recv_addBountyTask();
  }

  public function send_addBountyTask(\cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam $addBountyTaskParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyTask_args();
    $args->addBountyTaskParam = $addBountyTaskParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBountyTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBountyTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBountyTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBountyTask failed: unknown result");
  }

  public function updateBountyTaskOnFinish($btSn, $satisfyType)
  {
    $this->send_updateBountyTaskOnFinish($btSn, $satisfyType);
    return $this->recv_updateBountyTaskOnFinish();
  }

  public function send_updateBountyTaskOnFinish($btSn, $satisfyType)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskOnFinish_args();
    $args->btSn = $btSn;
    $args->satisfyType = $satisfyType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBountyTaskOnFinish', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBountyTaskOnFinish', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBountyTaskOnFinish()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskOnFinish_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskOnFinish_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBountyTaskOnFinish failed: unknown result");
  }

  public function getTaskList($userId, $isComment, $btStatus, $page, $pageSize)
  {
    $this->send_getTaskList($userId, $isComment, $btStatus, $page, $pageSize);
    return $this->recv_getTaskList();
  }

  public function send_getTaskList($userId, $isComment, $btStatus, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskList_args();
    $args->userId = $userId;
    $args->isComment = $isComment;
    $args->btStatus = $btStatus;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTaskList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTaskList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTaskList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTaskList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTaskList failed: unknown result");
  }

  public function getSingleRanklist($btStatus, $satisfyType, $addTime, $district)
  {
    $this->send_getSingleRanklist($btStatus, $satisfyType, $addTime, $district);
    return $this->recv_getSingleRanklist();
  }

  public function send_getSingleRanklist($btStatus, $satisfyType, $addTime, $district)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getSingleRanklist_args();
    $args->btStatus = $btStatus;
    $args->satisfyType = $satisfyType;
    $args->addTime = $addTime;
    $args->district = $district;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSingleRanklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSingleRanklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSingleRanklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getSingleRanklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getSingleRanklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSingleRanklist failed: unknown result");
  }

  public function getTotalRanklist($btStatus, $satisfyType, $addTime)
  {
    $this->send_getTotalRanklist($btStatus, $satisfyType, $addTime);
    return $this->recv_getTotalRanklist();
  }

  public function send_getTotalRanklist($btStatus, $satisfyType, $addTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTotalRanklist_args();
    $args->btStatus = $btStatus;
    $args->satisfyType = $satisfyType;
    $args->addTime = $addTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTotalRanklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTotalRanklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTotalRanklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTotalRanklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTotalRanklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTotalRanklist failed: unknown result");
  }

  public function updateReqStatus($btSn, $reqStatus, $stylistId)
  {
    $this->send_updateReqStatus($btSn, $reqStatus, $stylistId);
    return $this->recv_updateReqStatus();
  }

  public function send_updateReqStatus($btSn, $reqStatus, $stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatus_args();
    $args->btSn = $btSn;
    $args->reqStatus = $reqStatus;
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateReqStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateReqStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateReqStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateReqStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateReqStatus failed: unknown result");
  }

  public function getBountyPushCount($btSn)
  {
    $this->send_getBountyPushCount($btSn);
    return $this->recv_getBountyPushCount();
  }

  public function send_getBountyPushCount($btSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushCount_args();
    $args->btSn = $btSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyPushCount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyPushCount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyPushCount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushCount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushCount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyPushCount failed: unknown result");
  }

  public function updateBountyTaskBybtSnAndSalonId(\cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam $updateBountyTaskBybtSnAndSalonIdParam)
  {
    $this->send_updateBountyTaskBybtSnAndSalonId($updateBountyTaskBybtSnAndSalonIdParam);
    return $this->recv_updateBountyTaskBybtSnAndSalonId();
  }

  public function send_updateBountyTaskBybtSnAndSalonId(\cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam $updateBountyTaskBybtSnAndSalonIdParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskBybtSnAndSalonId_args();
    $args->updateBountyTaskBybtSnAndSalonIdParam = $updateBountyTaskBybtSnAndSalonIdParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBountyTaskBybtSnAndSalonId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBountyTaskBybtSnAndSalonId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBountyTaskBybtSnAndSalonId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskBybtSnAndSalonId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskBybtSnAndSalonId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBountyTaskBybtSnAndSalonId failed: unknown result");
  }

  public function addBountyRequest($btSn, $salonId, $stylistId, $brStatus, $addTime, $remark)
  {
    $this->send_addBountyRequest($btSn, $salonId, $stylistId, $brStatus, $addTime, $remark);
    return $this->recv_addBountyRequest();
  }

  public function send_addBountyRequest($btSn, $salonId, $stylistId, $brStatus, $addTime, $remark)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyRequest_args();
    $args->btSn = $btSn;
    $args->salonId = $salonId;
    $args->stylistId = $stylistId;
    $args->brStatus = $brStatus;
    $args->addTime = $addTime;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBountyRequest', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBountyRequest', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBountyRequest()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyRequest_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyRequest_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBountyRequest failed: unknown result");
  }

  public function addBountyPush(\cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam $addBountyPushParam)
  {
    $this->send_addBountyPush($addBountyPushParam);
    return $this->recv_addBountyPush();
  }

  public function send_addBountyPush(\cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam $addBountyPushParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyPush_args();
    $args->addBountyPushParam = $addBountyPushParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBountyPush', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBountyPush', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBountyPush()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyPush_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyPush_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBountyPush failed: unknown result");
  }

  public function addBountyFriends(\cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam $addBountyFriendsParam)
  {
    $this->send_addBountyFriends($addBountyFriendsParam);
    return $this->recv_addBountyFriends();
  }

  public function send_addBountyFriends(\cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam $addBountyFriendsParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyFriends_args();
    $args->addBountyFriendsParam = $addBountyFriendsParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBountyFriends', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBountyFriends', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBountyFriends()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyFriends_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addBountyFriends_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBountyFriends failed: unknown result");
  }

  public function getBountyTaskList($startTime, $endTime, $isPay)
  {
    $this->send_getBountyTaskList($startTime, $endTime, $isPay);
    return $this->recv_getBountyTaskList();
  }

  public function send_getBountyTaskList($startTime, $endTime, $isPay)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskList_args();
    $args->startTime = $startTime;
    $args->endTime = $endTime;
    $args->isPay = $isPay;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyTaskList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyTaskList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyTaskList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyTaskList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyTaskList failed: unknown result");
  }

  public function getOrderList($userId, $ispay, $status, $page, $pageSize)
  {
    $this->send_getOrderList($userId, $ispay, $status, $page, $pageSize);
    return $this->recv_getOrderList();
  }

  public function send_getOrderList($userId, $ispay, $status, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderList_args();
    $args->userId = $userId;
    $args->ispay = $ispay;
    $args->status = $status;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderList failed: unknown result");
  }

  public function getTicketByNo($ticketNo)
  {
    $this->send_getTicketByNo($ticketNo);
    return $this->recv_getTicketByNo();
  }

  public function send_getTicketByNo($ticketNo)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByNo_args();
    $args->ticketNo = $ticketNo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketByNo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketByNo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketByNo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByNo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketByNo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTicketByNo failed: unknown result");
  }

  public function UpdateOrderIsPayByOrderSn($orderSn, $ispay, $paytime)
  {
    $this->send_UpdateOrderIsPayByOrderSn($orderSn, $ispay, $paytime);
    return $this->recv_UpdateOrderIsPayByOrderSn();
  }

  public function send_UpdateOrderIsPayByOrderSn($orderSn, $ispay, $paytime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_UpdateOrderIsPayByOrderSn_args();
    $args->orderSn = $orderSn;
    $args->ispay = $ispay;
    $args->paytime = $paytime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateOrderIsPayByOrderSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateOrderIsPayByOrderSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateOrderIsPayByOrderSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_UpdateOrderIsPayByOrderSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_UpdateOrderIsPayByOrderSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("UpdateOrderIsPayByOrderSn failed: unknown result");
  }

  public function getTicketNo()
  {
    $this->send_getTicketNo();
    return $this->recv_getTicketNo();
  }

  public function send_getTicketNo()
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNo_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTicketNo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTicketNo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTicketNo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getTicketNo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getTicketNo failed: unknown result");
  }

  public function addOrderTicket($orderItemId, $orderSn, $userId, $ticketNo, $endTime)
  {
    $this->send_addOrderTicket($orderItemId, $orderSn, $userId, $ticketNo, $endTime);
    return $this->recv_addOrderTicket();
  }

  public function send_addOrderTicket($orderItemId, $orderSn, $userId, $ticketNo, $endTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicket_args();
    $args->orderItemId = $orderItemId;
    $args->orderSn = $orderSn;
    $args->userId = $userId;
    $args->ticketNo = $ticketNo;
    $args->endTime = $endTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrderTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrderTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrderTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addOrderTicket failed: unknown result");
  }

  public function addOrderTicketTrends($orderSn, $ticketNo, $status, $remark)
  {
    $this->send_addOrderTicketTrends($orderSn, $ticketNo, $status, $remark);
    return $this->recv_addOrderTicketTrends();
  }

  public function send_addOrderTicketTrends($orderSn, $ticketNo, $status, $remark)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicketTrends_args();
    $args->orderSn = $orderSn;
    $args->ticketNo = $ticketNo;
    $args->status = $status;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrderTicketTrends', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrderTicketTrends', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrderTicketTrends()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicketTrends_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderTicketTrends_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addOrderTicketTrends failed: unknown result");
  }

  public function addFundflow(\cn\choumei\thriftserver\service\stub\gen\AddFundflowParam $addFundflowParam)
  {
    $this->send_addFundflow($addFundflowParam);
    return $this->recv_addFundflow();
  }

  public function send_addFundflow(\cn\choumei\thriftserver\service\stub\gen\AddFundflowParam $addFundflowParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addFundflow_args();
    $args->addFundflowParam = $addFundflowParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addFundflow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addFundflow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addFundflow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addFundflow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addFundflow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addFundflow failed: unknown result");
  }

  public function addOrderRefund(\cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam $addOrderRefundParam)
  {
    $this->send_addOrderRefund($addOrderRefundParam);
    return $this->recv_addOrderRefund();
  }

  public function send_addOrderRefund(\cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam $addOrderRefundParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderRefund_args();
    $args->addOrderRefundParam = $addOrderRefundParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrderRefund', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrderRefund', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrderRefund()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderRefund_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addOrderRefund_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addOrderRefund failed: unknown result");
  }

  public function updateTicketStatus($ticketNo, $status)
  {
    $this->send_updateTicketStatus($ticketNo, $status);
    return $this->recv_updateTicketStatus();
  }

  public function send_updateTicketStatus($ticketNo, $status)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketStatus_args();
    $args->ticketNo = $ticketNo;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTicketStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTicketStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTicketStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTicketStatus failed: unknown result");
  }

  public function getOrderRefundByTicketNo($ticketNo)
  {
    $this->send_getOrderRefundByTicketNo($ticketNo);
    return $this->recv_getOrderRefundByTicketNo();
  }

  public function send_getOrderRefundByTicketNo($ticketNo)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderRefundByTicketNo_args();
    $args->ticketNo = $ticketNo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderRefundByTicketNo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderRefundByTicketNo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderRefundByTicketNo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderRefundByTicketNo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderRefundByTicketNo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderRefundByTicketNo failed: unknown result");
  }

  public function getStylistPushTask($stylistId, $status, $time, $page, $size)
  {
    $this->send_getStylistPushTask($stylistId, $status, $time, $page, $size);
    return $this->recv_getStylistPushTask();
  }

  public function send_getStylistPushTask($stylistId, $status, $time, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistPushTask_args();
    $args->stylistId = $stylistId;
    $args->status = $status;
    $args->time = $time;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistPushTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistPushTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistPushTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistPushTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistPushTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistPushTask failed: unknown result");
  }

  public function getStylistNewPushTaskNum($stylistId, $status, $time)
  {
    $this->send_getStylistNewPushTaskNum($stylistId, $status, $time);
    return $this->recv_getStylistNewPushTaskNum();
  }

  public function send_getStylistNewPushTaskNum($stylistId, $status, $time)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewPushTaskNum_args();
    $args->stylistId = $stylistId;
    $args->status = $status;
    $args->time = $time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistNewPushTaskNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistNewPushTaskNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistNewPushTaskNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewPushTaskNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewPushTaskNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistNewPushTaskNum failed: unknown result");
  }

  public function getStylistNewBountyTaskNum($stylistId, $status, $time)
  {
    $this->send_getStylistNewBountyTaskNum($stylistId, $status, $time);
    return $this->recv_getStylistNewBountyTaskNum();
  }

  public function send_getStylistNewBountyTaskNum($stylistId, $status, $time)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewBountyTaskNum_args();
    $args->stylistId = $stylistId;
    $args->status = $status;
    $args->time = $time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistNewBountyTaskNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistNewBountyTaskNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistNewBountyTaskNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewBountyTaskNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistNewBountyTaskNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistNewBountyTaskNum failed: unknown result");
  }

  public function getStylistBountyTask($stylistId, $status, $time, $page, $size)
  {
    $this->send_getStylistBountyTask($stylistId, $status, $time, $page, $size);
    return $this->recv_getStylistBountyTask();
  }

  public function send_getStylistBountyTask($stylistId, $status, $time, $page, $size)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistBountyTask_args();
    $args->stylistId = $stylistId;
    $args->status = $status;
    $args->time = $time;
    $args->page = $page;
    $args->size = $size;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStylistBountyTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStylistBountyTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStylistBountyTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistBountyTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getStylistBountyTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getStylistBountyTask failed: unknown result");
  }

  public function updateIsComment($btSn, $userId)
  {
    $this->send_updateIsComment($btSn, $userId);
    return $this->recv_updateIsComment();
  }

  public function send_updateIsComment($btSn, $userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateIsComment_args();
    $args->btSn = $btSn;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateIsComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateIsComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateIsComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateIsComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateIsComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateIsComment failed: unknown result");
  }

  public function stylistUpdateTask($btSn, $status, $requestnum, $score)
  {
    $this->send_stylistUpdateTask($btSn, $status, $requestnum, $score);
    return $this->recv_stylistUpdateTask();
  }

  public function send_stylistUpdateTask($btSn, $status, $requestnum, $score)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_stylistUpdateTask_args();
    $args->btSn = $btSn;
    $args->status = $status;
    $args->requestnum = $requestnum;
    $args->score = $score;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stylistUpdateTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stylistUpdateTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stylistUpdateTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_stylistUpdateTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_stylistUpdateTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("stylistUpdateTask failed: unknown result");
  }

  public function updateTicketIsComment($orderTicketId)
  {
    $this->send_updateTicketIsComment($orderTicketId);
    return $this->recv_updateTicketIsComment();
  }

  public function send_updateTicketIsComment($orderTicketId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketIsComment_args();
    $args->orderTicketId = $orderTicketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTicketIsComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTicketIsComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTicketIsComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketIsComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketIsComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTicketIsComment failed: unknown result");
  }

  public function addShopCartBuy(\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift $shopcartBuy)
  {
    $this->send_addShopCartBuy($shopcartBuy);
    return $this->recv_addShopCartBuy();
  }

  public function send_addShopCartBuy(\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift $shopcartBuy)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCartBuy_args();
    $args->shopcartBuy = $shopcartBuy;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addShopCartBuy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addShopCartBuy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addShopCartBuy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCartBuy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addShopCartBuy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addShopCartBuy failed: unknown result");
  }

  public function addSalonFundflow(\cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam $salonFundflow)
  {
    $this->send_addSalonFundflow($salonFundflow);
    return $this->recv_addSalonFundflow();
  }

  public function send_addSalonFundflow(\cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam $salonFundflow)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addSalonFundflow_args();
    $args->salonFundflow = $salonFundflow;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSalonFundflow', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSalonFundflow', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSalonFundflow()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addSalonFundflow_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addSalonFundflow_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addSalonFundflow failed: unknown result");
  }

  public function updateBountyTaskRefund($btSn, $refundStatus)
  {
    $this->send_updateBountyTaskRefund($btSn, $refundStatus);
    return $this->recv_updateBountyTaskRefund();
  }

  public function send_updateBountyTaskRefund($btSn, $refundStatus)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskRefund_args();
    $args->btSn = $btSn;
    $args->refundStatus = $refundStatus;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBountyTaskRefund', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBountyTaskRefund', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBountyTaskRefund()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskRefund_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskRefund_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBountyTaskRefund failed: unknown result");
  }

  public function updateBountyTaskIsPay($btSn, $isPay, $payType)
  {
    $this->send_updateBountyTaskIsPay($btSn, $isPay, $payType);
    return $this->recv_updateBountyTaskIsPay();
  }

  public function send_updateBountyTaskIsPay($btSn, $isPay, $payType)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskIsPay_args();
    $args->btSn = $btSn;
    $args->isPay = $isPay;
    $args->payType = $payType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateBountyTaskIsPay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateBountyTaskIsPay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateBountyTaskIsPay()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskIsPay_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateBountyTaskIsPay_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateBountyTaskIsPay failed: unknown result");
  }

  public function validateOrderAndGenTicket($orderSn)
  {
    $this->send_validateOrderAndGenTicket($orderSn);
    return $this->recv_validateOrderAndGenTicket();
  }

  public function send_validateOrderAndGenTicket($orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_validateOrderAndGenTicket_args();
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validateOrderAndGenTicket', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validateOrderAndGenTicket', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validateOrderAndGenTicket()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_validateOrderAndGenTicket_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_validateOrderAndGenTicket_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("validateOrderAndGenTicket failed: unknown result");
  }

  public function getNonCommentTicketNum($userId)
  {
    $this->send_getNonCommentTicketNum($userId);
    return $this->recv_getNonCommentTicketNum();
  }

  public function send_getNonCommentTicketNum($userId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonCommentTicketNum_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNonCommentTicketNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNonCommentTicketNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNonCommentTicketNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getNonCommentTicketNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getNonCommentTicketNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getNonCommentTicketNum failed: unknown result");
  }

  public function updateTicketSendMsgStatus($ticketNo)
  {
    $this->send_updateTicketSendMsgStatus($ticketNo);
    return $this->recv_updateTicketSendMsgStatus();
  }

  public function send_updateTicketSendMsgStatus($ticketNo)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketSendMsgStatus_args();
    $args->ticketNo = $ticketNo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateTicketSendMsgStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateTicketSendMsgStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateTicketSendMsgStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketSendMsgStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateTicketSendMsgStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateTicketSendMsgStatus failed: unknown result");
  }

  public function getOrderByOrderId($orderId)
  {
    $this->send_getOrderByOrderId($orderId);
    return $this->recv_getOrderByOrderId();
  }

  public function send_getOrderByOrderId($orderId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderId_args();
    $args->orderId = $orderId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderByOrderId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderByOrderId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderByOrderId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderByOrderId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderByOrderId failed: unknown result");
  }

  public function updateOrderActuallyPay($orderSn, $actuallyPay)
  {
    $this->send_updateOrderActuallyPay($orderSn, $actuallyPay);
    return $this->recv_updateOrderActuallyPay();
  }

  public function send_updateOrderActuallyPay($orderSn, $actuallyPay)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderActuallyPay_args();
    $args->orderSn = $orderSn;
    $args->actuallyPay = $actuallyPay;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateOrderActuallyPay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateOrderActuallyPay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateOrderActuallyPay()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderActuallyPay_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_updateOrderActuallyPay_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateOrderActuallyPay failed: unknown result");
  }

  public function payecoPlace(\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam $payecoPlaceRequestParam)
  {
    $this->send_payecoPlace($payecoPlaceRequestParam);
    return $this->recv_payecoPlace();
  }

  public function send_payecoPlace(\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam $payecoPlaceRequestParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoPlace_args();
    $args->payecoPlaceRequestParam = $payecoPlaceRequestParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'payecoPlace', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('payecoPlace', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_payecoPlace()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_payecoPlace_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoPlace_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("payecoPlace failed: unknown result");
  }

  public function payecoNotify(\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam $payecoNotifyRequestParam)
  {
    $this->send_payecoNotify($payecoNotifyRequestParam);
    return $this->recv_payecoNotify();
  }

  public function send_payecoNotify(\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam $payecoNotifyRequestParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoNotify_args();
    $args->payecoNotifyRequestParam = $payecoNotifyRequestParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'payecoNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('payecoNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_payecoNotify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_payecoNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("payecoNotify failed: unknown result");
  }

  public function payecoRefund(\cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam $payecoRefundRequestParam)
  {
    $this->send_payecoRefund($payecoRefundRequestParam);
    return $this->recv_payecoRefund();
  }

  public function send_payecoRefund(\cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam $payecoRefundRequestParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoRefund_args();
    $args->payecoRefundRequestParam = $payecoRefundRequestParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'payecoRefund', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('payecoRefund', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_payecoRefund()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_payecoRefund_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_payecoRefund_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("payecoRefund failed: unknown result");
  }

  public function wechatRefund(\cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam $wehcatRefundRequestParam)
  {
    $this->send_wechatRefund($wehcatRefundRequestParam);
    return $this->recv_wechatRefund();
  }

  public function send_wechatRefund(\cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam $wehcatRefundRequestParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_wechatRefund_args();
    $args->wehcatRefundRequestParam = $wehcatRefundRequestParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'wechatRefund', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('wechatRefund', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_wechatRefund()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_wechatRefund_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_wechatRefund_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("wechatRefund failed: unknown result");
  }

  public function getPaymentLogByOrderSn($orderSn)
  {
    $this->send_getPaymentLogByOrderSn($orderSn);
    return $this->recv_getPaymentLogByOrderSn();
  }

  public function send_getPaymentLogByOrderSn($orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getPaymentLogByOrderSn_args();
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPaymentLogByOrderSn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPaymentLogByOrderSn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPaymentLogByOrderSn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getPaymentLogByOrderSn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getPaymentLogByOrderSn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPaymentLogByOrderSn failed: unknown result");
  }

  public function addDisposeOrder($dpoCode, $orderSn, $shopcartsn, $dpoAddTime)
  {
    $this->send_addDisposeOrder($dpoCode, $orderSn, $shopcartsn, $dpoAddTime);
    return $this->recv_addDisposeOrder();
  }

  public function send_addDisposeOrder($dpoCode, $orderSn, $shopcartsn, $dpoAddTime)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addDisposeOrder_args();
    $args->dpoCode = $dpoCode;
    $args->orderSn = $orderSn;
    $args->shopcartsn = $shopcartsn;
    $args->dpoAddTime = $dpoAddTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addDisposeOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addDisposeOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addDisposeOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_addDisposeOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_addDisposeOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addDisposeOrder failed: unknown result");
  }

  public function getDisposeOrder($orderSn)
  {
    $this->send_getDisposeOrder($orderSn);
    return $this->recv_getDisposeOrder();
  }

  public function send_getDisposeOrder($orderSn)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getDisposeOrder_args();
    $args->orderSn = $orderSn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getDisposeOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getDisposeOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getDisposeOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getDisposeOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getDisposeOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getDisposeOrder failed: unknown result");
  }

  public function getItemUserBuyNum($userId, $itemId)
  {
    $this->send_getItemUserBuyNum($userId, $itemId);
    return $this->recv_getItemUserBuyNum();
  }

  public function send_getItemUserBuyNum($userId, $itemId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getItemUserBuyNum_args();
    $args->userId = $userId;
    $args->itemId = $itemId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemUserBuyNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemUserBuyNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemUserBuyNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getItemUserBuyNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getItemUserBuyNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemUserBuyNum failed: unknown result");
  }

  public function getBountyPushInfo($btSn, $stylistId)
  {
    $this->send_getBountyPushInfo($btSn, $stylistId);
    return $this->recv_getBountyPushInfo();
  }

  public function send_getBountyPushInfo($btSn, $stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushInfo_args();
    $args->btSn = $btSn;
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyPushInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyPushInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyPushInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyPushInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyPushInfo failed: unknown result");
  }

  public function getBountyRequest($btSn, $stylistId)
  {
    $this->send_getBountyRequest($btSn, $stylistId);
    return $this->recv_getBountyRequest();
  }

  public function send_getBountyRequest($btSn, $stylistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequest_args();
    $args->btSn = $btSn;
    $args->stylistId = $stylistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyRequest', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyRequest', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyRequest()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequest_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getBountyRequest_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyRequest failed: unknown result");
  }

  public function getOrderTicketByStatus($status, $endTime, $page, $pageSize)
  {
    $this->send_getOrderTicketByStatus($status, $endTime, $page, $pageSize);
    return $this->recv_getOrderTicketByStatus();
  }

  public function send_getOrderTicketByStatus($status, $endTime, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderTicketByStatus_args();
    $args->status = $status;
    $args->endTime = $endTime;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderTicketByStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderTicketByStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderTicketByStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderTicketByStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\TradeService_getOrderTicketByStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderTicketByStatus failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TradeService_getTicketByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $sortType = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'sortType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByUserId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTicketByUserIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTicketByUserIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByUserId_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketNumByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketNumByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketNumByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketNumByUserId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketNumByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketNumByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketNumByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketNumByUserId_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderPrice_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $priceall = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderPrice_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderPrice_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderPrice_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderPrice_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderPrice_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderPrice_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderPrice_result', self::$_TSPEC, $output);
  }

}

class TradeService_getRefundList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRefundList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRefundList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRefundList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getRefundList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetRefundListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetRefundListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRefundList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRefundList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRefundList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getRefundCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRefundCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRefundCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRefundCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getRefundCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRefundCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRefundCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRefundCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_getNonConsumeList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonConsumeList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonConsumeList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonConsumeList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getNonConsumeList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNonConsumeListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNonConsumeListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonConsumeList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonConsumeList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonConsumeList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getNonConsumeCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonConsumeCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonConsumeCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonConsumeCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getNonConsumeCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonConsumeCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonConsumeCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonConsumeCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemById_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemById_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemById_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemById_result', self::$_TSPEC, $output);
  }

}

class TradeService_getFirstOrderIspay2_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getFirstOrderIspay2_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getFirstOrderIspay2_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getFirstOrderIspay2_args', self::$_TSPEC, $output);
  }

}

class TradeService_getFirstOrderIspay2_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getFirstOrderIspay2_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getFirstOrderIspay2_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getFirstOrderIspay2_result', self::$_TSPEC, $output);
  }

}

class TradeService_getFundflowArr_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ticketNo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getFundflowArr_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getFundflowArr_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getFundflowArr_args', self::$_TSPEC, $output);
  }

}

class TradeService_getFundflowArr_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetFundflowArrRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetFundflowArrRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getFundflowArr_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getFundflowArr_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getFundflowArr_result', self::$_TSPEC, $output);
  }

}

class TradeService_getRecommendCodeOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ordersn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRecommendCodeOrder_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRecommendCodeOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRecommendCodeOrder_args', self::$_TSPEC, $output);
  }

}

class TradeService_getRecommendCodeOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetRecommendCodeOrderRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetRecommendCodeOrderRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getRecommendCodeOrder_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getRecommendCodeOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getRecommendCodeOrder_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderById_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderById_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderById_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderById_result', self::$_TSPEC, $output);
  }

}

class TradeService_addOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderParam
   */
  public $orderParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrder_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrder_args', self::$_TSPEC, $output);
  }

}

class TradeService_addOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrder_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrder_result', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderItem_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderItemParam
   */
  public $orderItemParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItemParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderItemParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderItem_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderItem_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderItem_args', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderItem_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderItem_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderItem_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderItem_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByOrderSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByOrderSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByOrderSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByOrderSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByOrderSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByOrderSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByOrderSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByOrderSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_addRecommendCodeOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $recommendCode = null;
  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $updateTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recommendCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addRecommendCodeOrder_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addRecommendCodeOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addRecommendCodeOrder_args', self::$_TSPEC, $output);
  }

}

class TradeService_addRecommendCodeOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addRecommendCodeOrder_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addRecommendCodeOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addRecommendCodeOrder_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemByOrderId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemByOrderId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemByOrderId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemByOrderId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemByOrderId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemByOrderId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemByOrderId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemByOrderId_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderItemPrice_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $priceDis = null;
  /**
   * @var string
   */
  public $priceall = null;
  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'priceDis',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderItemPrice_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderItemPrice_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderItemPrice_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderItemPrice_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderItemPrice_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderItemPrice_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderItemPrice_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderCountByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $shopcartsn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderCountByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderCountByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderCountByUserId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderCountByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderCountByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderCountByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderCountByUserId_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemByOrderSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemByOrderSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemByOrderSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemByOrderSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderItemByOrderSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderItemRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderItemByOrderSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderItemByOrderSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderItemByOrderSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_addPaymentLog_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam
   */
  public $addPaymentLogParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addPaymentLogParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddPaymentLogParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addPaymentLog_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addPaymentLog_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addPaymentLog_args', self::$_TSPEC, $output);
  }

}

class TradeService_addPaymentLog_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addPaymentLog_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addPaymentLog_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addPaymentLog_result', self::$_TSPEC, $output);
  }

}

class TradeService_setShopCartSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $scIds = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $shopCartSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'shopCartSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_setShopCartSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_setShopCartSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_setShopCartSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_setShopCartSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_setShopCartSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_setShopCartSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_setShopCartSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartNums_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartNums_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartNums_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartNums_args', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartNums_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartNums_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartNums_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartNums_result', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCarts_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $scIds = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCarts_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCarts_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCarts_args', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCarts_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetShopCartsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCarts_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCarts_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCarts_result', self::$_TSPEC, $output);
  }

}

class TradeService_getAllShopCartBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shopcartSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shopcartSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getAllShopCartBySn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getAllShopCartBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getAllShopCartBySn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getAllShopCartBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetAllShopCartBySnRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetAllShopCartBySnRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getAllShopCartBySn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getAllShopCartBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getAllShopCartBySn_result', self::$_TSPEC, $output);
  }

}

class TradeService_deleteShopCarts_args extends TBase {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $scIds = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scIds',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_deleteShopCarts_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_deleteShopCarts_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_deleteShopCarts_args', self::$_TSPEC, $output);
  }

}

class TradeService_deleteShopCarts_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_deleteShopCarts_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_deleteShopCarts_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_deleteShopCarts_result', self::$_TSPEC, $output);
  }

}

class TradeService_deleteShopCartBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shopcartSn = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shopcartSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_deleteShopCartBySn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_deleteShopCartBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_deleteShopCartBySn_args', self::$_TSPEC, $output);
  }

}

class TradeService_deleteShopCartBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_deleteShopCartBySn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_deleteShopCartBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_deleteShopCartBySn_result', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartByItemNorms_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $salonNormsId = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonNormsId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartByItemNorms_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartByItemNorms_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartByItemNorms_args', self::$_TSPEC, $output);
  }

}

class TradeService_getShopCartByItemNorms_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetShopCartByItemNormsRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetShopCartByItemNormsRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getShopCartByItemNorms_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getShopCartByItemNorms_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getShopCartByItemNorms_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByShopCartSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $shopcartsn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByShopCartSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByShopCartSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByShopCartSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByShopCartSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByShopCartSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByShopCartSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByShopCartSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_updatShopCartById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $scId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $nums = null;
  /**
   * @var int
   */
  public $priceAll = null;
  /**
   * @var int
   */
  public $priceDisAll = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'nums',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'priceAll',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'priceDisAll',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updatShopCartById_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updatShopCartById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updatShopCartById_args', self::$_TSPEC, $output);
  }

}

class TradeService_updatShopCartById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdatShopCartByIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdatShopCartByIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updatShopCartById_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updatShopCartById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updatShopCartById_result', self::$_TSPEC, $output);
  }

}

class TradeService_addShopCart_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddShopCartParam
   */
  public $addShopCartParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addShopCartParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddShopCartParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addShopCart_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addShopCart_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addShopCart_args', self::$_TSPEC, $output);
  }

}

class TradeService_addShopCart_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addShopCart_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addShopCart_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addShopCart_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketByOrderItemId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderItemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByOrderItemId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByOrderItemId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByOrderItemId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketByOrderItemId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTicketRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTicketRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByOrderItemId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByOrderItemId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByOrderItemId_result', self::$_TSPEC, $output);
  }

}

class TradeService_getCommentedTaskList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getCommentedTaskList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getCommentedTaskList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getCommentedTaskList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getCommentedTaskList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getCommentedTaskList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getCommentedTaskList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getCommentedTaskList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequestCountBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $bountySn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bountySn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequestCountBySn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequestCountBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequestCountBySn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequestCountBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequestCountBySn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequestCountBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequestCountBySn_result', self::$_TSPEC, $output);
  }

}

class TradeService_cancelTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_cancelTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_cancelTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_cancelTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_cancelTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_cancelTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_cancelTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_cancelTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_addAllBountyPush_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam[]
   */
  public $allPushData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'allPushData',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addAllBountyPush_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addAllBountyPush_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addAllBountyPush_args', self::$_TSPEC, $output);
  }

}

class TradeService_addAllBountyPush_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addAllBountyPush_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addAllBountyPush_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addAllBountyPush_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateStylistSelectedBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $selectTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'hairstylistId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'selectTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateStylistSelectedBySn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateStylistSelectedBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateStylistSelectedBySn_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateStylistSelectedBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateStylistSelectedBySn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateStylistSelectedBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateStylistSelectedBySn_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateSalonFundflowByOrderSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $bargainno = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'bargainno',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateSalonFundflowByOrderSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateSalonFundflowByOrderSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateSalonFundflowByOrderSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateSalonFundflowByOrderSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateSalonFundflowByOrderSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateSalonFundflowByOrderSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateSalonFundflowByOrderSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateReqStatusBySnAndReqS_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $oldReqStatus = null;
  /**
   * @var int
   */
  public $newReqStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'oldReqStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'newReqStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateReqStatusBySnAndReqS_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateReqStatusBySnAndReqS_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateReqStatusBySnAndReqS_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateReqStatusBySnAndReqS_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateReqStatusBySnAndReqS_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateReqStatusBySnAndReqS_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateReqStatusBySnAndReqS_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTaskById_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $btId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $btStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTaskById_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTaskById_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTaskById_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTaskById_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTaskById_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTaskById_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTaskById_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $totalNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'totalNum',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTaskRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTaskRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBtStatusCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $btStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBtStatusCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBtStatusCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBtStatusCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBtStatusCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBtStatusCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBtStatusCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBtStatusCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_getNotCommentCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNotCommentCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNotCommentCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNotCommentCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getNotCommentCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNotCommentCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNotCommentCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNotCommentCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskByUserId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $btStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskByUserId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskByUserId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskByUserId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskByUserId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskByUserId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskByUserId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskByUserId_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskBybtSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskBybtSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskBybtSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskBybtSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskBybtSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTaskRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskBybtSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskBybtSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskBybtSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequestList_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequestList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequestList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequestList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequestList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyRequestListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyRequestListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequestList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequestList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequestList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getHairstylistBountyCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var int
   */
  public $satisfy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hairstylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'satisfy',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getHairstylistBountyCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getHairstylistBountyCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getHairstylistBountyCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getHairstylistBountyCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getHairstylistBountyCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getHairstylistBountyCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getHairstylistBountyCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyReqBrStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $brStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hairstylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'brStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyReqBrStatus_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyReqBrStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyReqBrStatus_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyReqBrStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyReqBrStatus_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyReqBrStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyReqBrStatus_result', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam
   */
  public $addBountyTaskParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addBountyTaskParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBountyTaskParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskOnFinish_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $satisfyType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'satisfyType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskOnFinish_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskOnFinish_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskOnFinish_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskOnFinish_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskOnFinish_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskOnFinish_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskOnFinish_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTaskList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $isComment = null;
  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'isComment',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTaskList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTaskList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTaskList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTaskList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTaskList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTaskList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTaskList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getSingleRanklist_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $satisfyType = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $district = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'satisfyType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getSingleRanklist_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getSingleRanklist_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getSingleRanklist_args', self::$_TSPEC, $output);
  }

}

class TradeService_getSingleRanklist_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getSingleRanklist_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getSingleRanklist_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getSingleRanklist_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTotalRanklist_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $satisfyType = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'satisfyType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTotalRanklist_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTotalRanklist_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTotalRanklist_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTotalRanklist_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTotalRanklist_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTotalRanklist_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTotalRanklist_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateReqStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $reqStatus = null;
  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'reqStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateReqStatus_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateReqStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateReqStatus_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateReqStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateReqStatus_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateReqStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateReqStatus_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyPushCount_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyPushCount_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyPushCount_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyPushCount_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyPushCount_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyPushCount_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyPushCount_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyPushCount_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskBybtSnAndSalonId_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam
   */
  public $updateBountyTaskBybtSnAndSalonIdParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updateBountyTaskBybtSnAndSalonIdParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateBountyTaskBybtSnAndSalonIdParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskBybtSnAndSalonId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskBybtSnAndSalonId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskBybtSnAndSalonId_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskBybtSnAndSalonId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskBybtSnAndSalonId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskBybtSnAndSalonId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskBybtSnAndSalonId_result', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyRequest_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $brStatus = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var string
   */
  public $remark = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'brStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyRequest_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyRequest_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyRequest_args', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyRequest_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyRequest_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyRequest_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyRequest_result', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyPush_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam
   */
  public $addBountyPushParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addBountyPushParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBountyPushParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyPush_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyPush_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyPush_args', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyPush_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyPush_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyPush_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyPush_result', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyFriends_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam
   */
  public $addBountyFriendsParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addBountyFriendsParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBountyFriendsParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyFriends_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyFriends_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyFriends_args', self::$_TSPEC, $output);
  }

}

class TradeService_addBountyFriends_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addBountyFriends_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addBountyFriends_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addBountyFriends_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $isPay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'isPay',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyTaskList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyTaskList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyTaskList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyTaskList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderList_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderList_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderList_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderList_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderList_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketByNo_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ticketNo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByNo_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByNo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByNo_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketByNo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTicketRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTicketRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketByNo_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketByNo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketByNo_result', self::$_TSPEC, $output);
  }

}

class TradeService_UpdateOrderIsPayByOrderSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $paytime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'paytime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_UpdateOrderIsPayByOrderSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_UpdateOrderIsPayByOrderSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_UpdateOrderIsPayByOrderSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_UpdateOrderIsPayByOrderSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_UpdateOrderIsPayByOrderSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_UpdateOrderIsPayByOrderSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_UpdateOrderIsPayByOrderSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketNo_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'TradeService_getTicketNo_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketNo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketNo_args', self::$_TSPEC, $output);
  }

}

class TradeService_getTicketNo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTicketNoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTicketNoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getTicketNo_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getTicketNo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getTicketNo_result', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderTicket_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderItemId = null;
  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $ticketNo = null;
  /**
   * @var int
   */
  public $endTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderTicket_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderTicket_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderTicket_args', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderTicket_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderTicket_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderTicket_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderTicket_result', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderTicketTrends_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $ticketNo = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $remark = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderTicketTrends_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderTicketTrends_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderTicketTrends_args', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderTicketTrends_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderTicketTrends_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderTicketTrends_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderTicketTrends_result', self::$_TSPEC, $output);
  }

}

class TradeService_addFundflow_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddFundflowParam
   */
  public $addFundflowParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addFundflowParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddFundflowParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addFundflow_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addFundflow_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addFundflow_args', self::$_TSPEC, $output);
  }

}

class TradeService_addFundflow_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addFundflow_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addFundflow_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addFundflow_result', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderRefund_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam
   */
  public $addOrderRefundParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addOrderRefundParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddOrderRefundParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderRefund_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderRefund_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderRefund_args', self::$_TSPEC, $output);
  }

}

class TradeService_addOrderRefund_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addOrderRefund_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addOrderRefund_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addOrderRefund_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ticketNo = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketStatus_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketStatus_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketStatus_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketStatus_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderRefundByTicketNo_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ticketNo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderRefundByTicketNo_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderRefundByTicketNo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderRefundByTicketNo_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderRefundByTicketNo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderRefundRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderRefundRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderRefundByTicketNo_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderRefundByTicketNo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderRefundByTicketNo_result', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistPushTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistPushTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistPushTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistPushTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistPushTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyPushListRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyPushListRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistPushTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistPushTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistPushTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistNewPushTaskNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistNewPushTaskNum_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistNewPushTaskNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistNewPushTaskNum_args', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistNewPushTaskNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistNewPushTaskNum_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistNewPushTaskNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistNewPushTaskNum_result', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistNewBountyTaskNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistNewBountyTaskNum_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistNewBountyTaskNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistNewBountyTaskNum_args', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistNewBountyTaskNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistNewBountyTaskNum_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistNewBountyTaskNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistNewBountyTaskNum_result', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistBountyTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var string
   */
  public $status = null;
  /**
   * @var int
   */
  public $time = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistBountyTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistBountyTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistBountyTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_getStylistBountyTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyTasksRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getStylistBountyTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getStylistBountyTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getStylistBountyTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateIsComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateIsComment_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateIsComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateIsComment_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateIsComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateIsComment_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateIsComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateIsComment_result', self::$_TSPEC, $output);
  }

}

class TradeService_stylistUpdateTask_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $requestnum = null;
  /**
   * @var int
   */
  public $score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'requestnum',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_stylistUpdateTask_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_stylistUpdateTask_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_stylistUpdateTask_args', self::$_TSPEC, $output);
  }

}

class TradeService_stylistUpdateTask_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_stylistUpdateTask_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_stylistUpdateTask_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_stylistUpdateTask_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketIsComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderTicketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderTicketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketIsComment_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketIsComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketIsComment_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketIsComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketIsComment_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketIsComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketIsComment_result', self::$_TSPEC, $output);
  }

}

class TradeService_addShopCartBuy_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift
   */
  public $shopcartBuy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'shopcartBuy',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addShopCartBuy_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addShopCartBuy_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addShopCartBuy_args', self::$_TSPEC, $output);
  }

}

class TradeService_addShopCartBuy_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addShopCartBuy_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addShopCartBuy_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addShopCartBuy_result', self::$_TSPEC, $output);
  }

}

class TradeService_addSalonFundflow_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam
   */
  public $salonFundflow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonFundflow',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\SalonFundflowParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addSalonFundflow_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addSalonFundflow_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addSalonFundflow_args', self::$_TSPEC, $output);
  }

}

class TradeService_addSalonFundflow_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addSalonFundflow_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addSalonFundflow_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addSalonFundflow_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskRefund_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $refundStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'refundStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskRefund_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskRefund_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskRefund_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskRefund_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskRefund_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskRefund_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskRefund_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskIsPay_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $isPay = null;
  /**
   * @var int
   */
  public $payType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'isPay',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'payType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskIsPay_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskIsPay_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskIsPay_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateBountyTaskIsPay_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateBountyTaskIsPay_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateBountyTaskIsPay_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateBountyTaskIsPay_result', self::$_TSPEC, $output);
  }

}

class TradeService_validateOrderAndGenTicket_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_validateOrderAndGenTicket_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_validateOrderAndGenTicket_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_validateOrderAndGenTicket_args', self::$_TSPEC, $output);
  }

}

class TradeService_validateOrderAndGenTicket_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_validateOrderAndGenTicket_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_validateOrderAndGenTicket_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_validateOrderAndGenTicket_result', self::$_TSPEC, $output);
  }

}

class TradeService_getNonCommentTicketNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonCommentTicketNum_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonCommentTicketNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonCommentTicketNum_args', self::$_TSPEC, $output);
  }

}

class TradeService_getNonCommentTicketNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getNonCommentTicketNum_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getNonCommentTicketNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getNonCommentTicketNum_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketSendMsgStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ticketNo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketSendMsgStatus_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketSendMsgStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketSendMsgStatus_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateTicketSendMsgStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateTicketSendMsgStatus_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateTicketSendMsgStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateTicketSendMsgStatus_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByOrderId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByOrderId_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByOrderId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByOrderId_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderByOrderId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderByOrderId_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderByOrderId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderByOrderId_result', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderActuallyPay_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $actuallyPay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'actuallyPay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderActuallyPay_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderActuallyPay_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderActuallyPay_args', self::$_TSPEC, $output);
  }

}

class TradeService_updateOrderActuallyPay_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_updateOrderActuallyPay_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_updateOrderActuallyPay_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_updateOrderActuallyPay_result', self::$_TSPEC, $output);
  }

}

class TradeService_payecoPlace_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam
   */
  public $payecoPlaceRequestParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payecoPlaceRequestParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRequestParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoPlace_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoPlace_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoPlace_args', self::$_TSPEC, $output);
  }

}

class TradeService_payecoPlace_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoPlace_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoPlace_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoPlace_result', self::$_TSPEC, $output);
  }

}

class TradeService_payecoNotify_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam
   */
  public $payecoNotifyRequestParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payecoNotifyRequestParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRequestParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoNotify_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoNotify_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoNotify_args', self::$_TSPEC, $output);
  }

}

class TradeService_payecoNotify_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoNotify_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoNotify_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoNotify_result', self::$_TSPEC, $output);
  }

}

class TradeService_payecoRefund_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam
   */
  public $payecoRefundRequestParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payecoRefundRequestParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoRefundRequestParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoRefund_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoRefund_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoRefund_args', self::$_TSPEC, $output);
  }

}

class TradeService_payecoRefund_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoRefundRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoRefundRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_payecoRefund_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_payecoRefund_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_payecoRefund_result', self::$_TSPEC, $output);
  }

}

class TradeService_wechatRefund_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam
   */
  public $wehcatRefundRequestParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wehcatRefundRequestParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\WechatRefundRequestParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_wechatRefund_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_wechatRefund_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_wechatRefund_args', self::$_TSPEC, $output);
  }

}

class TradeService_wechatRefund_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\WechatRefundRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\WechatRefundRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_wechatRefund_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_wechatRefund_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_wechatRefund_result', self::$_TSPEC, $output);
  }

}

class TradeService_getPaymentLogByOrderSn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getPaymentLogByOrderSn_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getPaymentLogByOrderSn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getPaymentLogByOrderSn_args', self::$_TSPEC, $output);
  }

}

class TradeService_getPaymentLogByOrderSn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetPaymentLogRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetPaymentLogRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getPaymentLogByOrderSn_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getPaymentLogByOrderSn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getPaymentLogByOrderSn_result', self::$_TSPEC, $output);
  }

}

class TradeService_addDisposeOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $dpoCode = null;
  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $shopcartsn = null;
  /**
   * @var int
   */
  public $dpoAddTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dpoCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dpoAddTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addDisposeOrder_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addDisposeOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addDisposeOrder_args', self::$_TSPEC, $output);
  }

}

class TradeService_addDisposeOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_addDisposeOrder_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_addDisposeOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_addDisposeOrder_result', self::$_TSPEC, $output);
  }

}

class TradeService_getDisposeOrder_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getDisposeOrder_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getDisposeOrder_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getDisposeOrder_args', self::$_TSPEC, $output);
  }

}

class TradeService_getDisposeOrder_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetDisposeOrderRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetDisposeOrderRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getDisposeOrder_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getDisposeOrder_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getDisposeOrder_result', self::$_TSPEC, $output);
  }

}

class TradeService_getItemUserBuyNum_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $itemId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getItemUserBuyNum_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getItemUserBuyNum_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getItemUserBuyNum_args', self::$_TSPEC, $output);
  }

}

class TradeService_getItemUserBuyNum_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetNumRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetNumRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getItemUserBuyNum_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getItemUserBuyNum_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getItemUserBuyNum_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyPushInfo_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyPushInfo_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyPushInfo_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyPushInfo_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyPushInfo_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyPushInfoRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyPushInfoRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyPushInfo_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyPushInfo_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyPushInfo_result', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequest_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $stylistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequest_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequest_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequest_args', self::$_TSPEC, $output);
  }

}

class TradeService_getBountyRequest_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyRequestRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyRequestRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getBountyRequest_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getBountyRequest_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getBountyRequest_result', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderTicketByStatus_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderTicketByStatus_args';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderTicketByStatus_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderTicketByStatus_args', self::$_TSPEC, $output);
  }

}

class TradeService_getOrderTicketByStatus_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetOrderTicketByStatusRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetOrderTicketByStatusRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TradeService_getOrderTicketByStatus_result';
  }

  public function read($input)
  {
    return $this->_read('TradeService_getOrderTicketByStatus_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('TradeService_getOrderTicketByStatus_result', self::$_TSPEC, $output);
  }

}


