<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 搜索服务接口
 */
interface FileServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * @param int $userId
   * @param int $type
   * @return \cn\choumei\thriftserver\service\stub\gen\GetTokenResult
   */
  public function getToken($userId, $type);
}

class FileServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\FileServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function getToken($userId, $type)
  {
    $this->send_getToken($userId, $type);
    return $this->recv_getToken();
  }

  public function send_getToken($userId, $type)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\FileService_getToken_args();
    $args->userId = $userId;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getToken()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\FileService_getToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\FileService_getToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getToken failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class FileService_getToken_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'FileService_getToken_args';
  }

  public function read($input)
  {
    return $this->_read('FileService_getToken_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('FileService_getToken_args', self::$_TSPEC, $output);
  }

}

class FileService_getToken_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTokenResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTokenResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'FileService_getToken_result';
  }

  public function read($input)
  {
    return $this->_read('FileService_getToken_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('FileService_getToken_result', self::$_TSPEC, $output);
  }

}


