<?php
namespace cn\choumei\thriftserver\service\stub\gen;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 评论服务接口
 */
interface CommentServiceIf extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceIf {
  /**
   * @param \cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam $sendItemCommentParam
   * @return \cn\choumei\thriftserver\service\stub\gen\SendItemCommentResult
   */
  public function sendItemComment(\cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam $sendItemCommentParam);
  /**
   * @param int $orderTicketId
   * @return \cn\choumei\thriftserver\service\stub\gen\ItemCommentDetailResult
   */
  public function queryItemCommentDetail($orderTicketId);
  /**
   * @param string $userId
   * @param int $page
   * @param int $pageSize
   * @param int $totalNum
   * @return \cn\choumei\thriftserver\service\stub\gen\ItemCommentListResult
   */
  public function queryItemCommentList($userId, $page, $pageSize, $totalNum);
  /**
   * @param string $userId
   * @param string $bountySn
   * @param int $hairstylistId
   * @param string $content
   * @param string $imgUrl
   * @return \cn\choumei\thriftserver\service\stub\gen\SendHairStylistCommentResult 发表HairStylistComment返回的信息
   * 
   */
  public function sendHairStylistComment($userId, $bountySn, $hairstylistId, $content, $imgUrl);
  /**
   * @param string $userId
   * @param int $page
   * @param int $pageSize
   * @param int $totalNum
   * @return \cn\choumei\thriftserver\service\stub\gen\StylistCommentListResult
   */
  public function queryStylistCommentList($userId, $page, $pageSize, $totalNum);
  /**
   * 获取店铺评论
   * 查询cm_salon_itemcomment表，type为0时satisfyType不参与查询
   * 
   * @param int $salonId
   * @param int $type
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetSalonCommentRet
   */
  public function getSalonComment($salonId, $type, $page, $pageSize);
  /**
   * 获取项目评论
   * 查询cm_salon_itemcomment表，type为0时satisfyType不参与查询
   * 
   * @param int $itemId
   * @param int $type
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetItemCommentRet
   */
  public function getItemComment($itemId, $type, $page, $pageSize);
  /**
   * 获取券的评论详情
   * 
   * @param int $orderTicketId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetCommentRet
   */
  public function getCommentByTicketId($orderTicketId);
  /**
   * 发表评论
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam $postItemCommentParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function postItemComment(\cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam $postItemCommentParam);
  /**
   * 修改评论
   * 
   * @param int $orderTicketId
   * @param int $satisfyType
   * @param int $remark
   * @param string $content
   * @param string $imgsrc
   * @return \cn\choumei\thriftserver\service\stub\gen\UpdateRet db udpate操作的类型
   * 
   */
  public function changeItemComment($orderTicketId, $satisfyType, $remark, $content, $imgsrc);
  /**
   * 在bounty_comment表中通过造型师id找到用户评论信息
   * 对应PHP： $userInfoList = M('bounty_comment')->field($field)->where("hairstylistId = %d",$stylistId)->order('addTime desc')->page($page,$pageSize)->select();
   * 
   * @param int $sytlistId
   * @param int $page
   * @param int $pageSize
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBtCommentByStylistIdRet
   */
  public function getBtCommentByStylistId($sytlistId, $page, $pageSize);
  /**
   * 通过造型师id拿到评价的数量
   * 对应PHP： $count = M('bounty_comment')->where("hairstylistId = %d",$stylistId)->count();
   * 
   * @param int $sytlistId
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBtCommentCountByStylistIdRet
   */
  public function getBtCommentCountByStylistId($sytlistId);
  /**
   * 添加bounty评论
   * 注意：type为评论类型 1:用户打赏不满意信息 ，这个时候content是空的，2:用户评论 这个时候content是用户评论什么就是什么
   * 
   * @param \cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam $addBtCommentParam
   * @return \cn\choumei\thriftserver\service\stub\gen\InsertRet db insert操作的类型
   * 
   */
  public function addBtComment(\cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam $addBtCommentParam);
  /**
   * 获取赏金单用户评论
   * 
   * @param string $btSn
   * @param int $type
   * @return \cn\choumei\thriftserver\service\stub\gen\GetBountyCommentBySnRet
   */
  public function getBountyCommentBySn($btSn, $type);
}

class CommentServiceClient extends \cn\choumei\thriftserver\service\stub\gen\BaseServiceClient implements \cn\choumei\thriftserver\service\stub\gen\CommentServiceIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function sendItemComment(\cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam $sendItemCommentParam)
  {
    $this->send_sendItemComment($sendItemCommentParam);
    return $this->recv_sendItemComment();
  }

  public function send_sendItemComment(\cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam $sendItemCommentParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_sendItemComment_args();
    $args->sendItemCommentParam = $sendItemCommentParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendItemComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendItemComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendItemComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_sendItemComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_sendItemComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendItemComment failed: unknown result");
  }

  public function queryItemCommentDetail($orderTicketId)
  {
    $this->send_queryItemCommentDetail($orderTicketId);
    return $this->recv_queryItemCommentDetail();
  }

  public function send_queryItemCommentDetail($orderTicketId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentDetail_args();
    $args->orderTicketId = $orderTicketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryItemCommentDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryItemCommentDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryItemCommentDetail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryItemCommentDetail failed: unknown result");
  }

  public function queryItemCommentList($userId, $page, $pageSize, $totalNum)
  {
    $this->send_queryItemCommentList($userId, $page, $pageSize, $totalNum);
    return $this->recv_queryItemCommentList();
  }

  public function send_queryItemCommentList($userId, $page, $pageSize, $totalNum)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentList_args();
    $args->userId = $userId;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $args->totalNum = $totalNum;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryItemCommentList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryItemCommentList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryItemCommentList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryItemCommentList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryItemCommentList failed: unknown result");
  }

  public function sendHairStylistComment($userId, $bountySn, $hairstylistId, $content, $imgUrl)
  {
    $this->send_sendHairStylistComment($userId, $bountySn, $hairstylistId, $content, $imgUrl);
    return $this->recv_sendHairStylistComment();
  }

  public function send_sendHairStylistComment($userId, $bountySn, $hairstylistId, $content, $imgUrl)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_sendHairStylistComment_args();
    $args->userId = $userId;
    $args->bountySn = $bountySn;
    $args->hairstylistId = $hairstylistId;
    $args->content = $content;
    $args->imgUrl = $imgUrl;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendHairStylistComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendHairStylistComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendHairStylistComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_sendHairStylistComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_sendHairStylistComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendHairStylistComment failed: unknown result");
  }

  public function queryStylistCommentList($userId, $page, $pageSize, $totalNum)
  {
    $this->send_queryStylistCommentList($userId, $page, $pageSize, $totalNum);
    return $this->recv_queryStylistCommentList();
  }

  public function send_queryStylistCommentList($userId, $page, $pageSize, $totalNum)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryStylistCommentList_args();
    $args->userId = $userId;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $args->totalNum = $totalNum;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryStylistCommentList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryStylistCommentList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryStylistCommentList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_queryStylistCommentList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_queryStylistCommentList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryStylistCommentList failed: unknown result");
  }

  public function getSalonComment($salonId, $type, $page, $pageSize)
  {
    $this->send_getSalonComment($salonId, $type, $page, $pageSize);
    return $this->recv_getSalonComment();
  }

  public function send_getSalonComment($salonId, $type, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getSalonComment_args();
    $args->salonId = $salonId;
    $args->type = $type;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSalonComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSalonComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSalonComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getSalonComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getSalonComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSalonComment failed: unknown result");
  }

  public function getItemComment($itemId, $type, $page, $pageSize)
  {
    $this->send_getItemComment($itemId, $type, $page, $pageSize);
    return $this->recv_getItemComment();
  }

  public function send_getItemComment($itemId, $type, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getItemComment_args();
    $args->itemId = $itemId;
    $args->type = $type;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getItemComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getItemComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemComment failed: unknown result");
  }

  public function getCommentByTicketId($orderTicketId)
  {
    $this->send_getCommentByTicketId($orderTicketId);
    return $this->recv_getCommentByTicketId();
  }

  public function send_getCommentByTicketId($orderTicketId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getCommentByTicketId_args();
    $args->orderTicketId = $orderTicketId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCommentByTicketId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCommentByTicketId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCommentByTicketId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getCommentByTicketId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getCommentByTicketId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getCommentByTicketId failed: unknown result");
  }

  public function postItemComment(\cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam $postItemCommentParam)
  {
    $this->send_postItemComment($postItemCommentParam);
    return $this->recv_postItemComment();
  }

  public function send_postItemComment(\cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam $postItemCommentParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_postItemComment_args();
    $args->postItemCommentParam = $postItemCommentParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'postItemComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('postItemComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_postItemComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_postItemComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_postItemComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("postItemComment failed: unknown result");
  }

  public function changeItemComment($orderTicketId, $satisfyType, $remark, $content, $imgsrc)
  {
    $this->send_changeItemComment($orderTicketId, $satisfyType, $remark, $content, $imgsrc);
    return $this->recv_changeItemComment();
  }

  public function send_changeItemComment($orderTicketId, $satisfyType, $remark, $content, $imgsrc)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_changeItemComment_args();
    $args->orderTicketId = $orderTicketId;
    $args->satisfyType = $satisfyType;
    $args->remark = $remark;
    $args->content = $content;
    $args->imgsrc = $imgsrc;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'changeItemComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('changeItemComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_changeItemComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_changeItemComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_changeItemComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("changeItemComment failed: unknown result");
  }

  public function getBtCommentByStylistId($sytlistId, $page, $pageSize)
  {
    $this->send_getBtCommentByStylistId($sytlistId, $page, $pageSize);
    return $this->recv_getBtCommentByStylistId();
  }

  public function send_getBtCommentByStylistId($sytlistId, $page, $pageSize)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentByStylistId_args();
    $args->sytlistId = $sytlistId;
    $args->page = $page;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBtCommentByStylistId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBtCommentByStylistId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBtCommentByStylistId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentByStylistId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentByStylistId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBtCommentByStylistId failed: unknown result");
  }

  public function getBtCommentCountByStylistId($sytlistId)
  {
    $this->send_getBtCommentCountByStylistId($sytlistId);
    return $this->recv_getBtCommentCountByStylistId();
  }

  public function send_getBtCommentCountByStylistId($sytlistId)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentCountByStylistId_args();
    $args->sytlistId = $sytlistId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBtCommentCountByStylistId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBtCommentCountByStylistId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBtCommentCountByStylistId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentCountByStylistId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBtCommentCountByStylistId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBtCommentCountByStylistId failed: unknown result");
  }

  public function addBtComment(\cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam $addBtCommentParam)
  {
    $this->send_addBtComment($addBtCommentParam);
    return $this->recv_addBtComment();
  }

  public function send_addBtComment(\cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam $addBtCommentParam)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_addBtComment_args();
    $args->addBtCommentParam = $addBtCommentParam;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addBtComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addBtComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addBtComment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_addBtComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_addBtComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addBtComment failed: unknown result");
  }

  public function getBountyCommentBySn($btSn, $type)
  {
    $this->send_getBountyCommentBySn($btSn, $type);
    return $this->recv_getBountyCommentBySn();
  }

  public function send_getBountyCommentBySn($btSn, $type)
  {
    $args = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBountyCommentBySn_args();
    $args->btSn = $btSn;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBountyCommentBySn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBountyCommentBySn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBountyCommentBySn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cn\choumei\thriftserver\service\stub\gen\CommentService_getBountyCommentBySn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cn\choumei\thriftserver\service\stub\gen\CommentService_getBountyCommentBySn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getBountyCommentBySn failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class CommentService_sendItemComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam
   */
  public $sendItemCommentParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendItemCommentParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\SendItemCommentParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_sendItemComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_sendItemComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_sendItemComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_sendItemComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\SendItemCommentResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\SendItemCommentResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_sendItemComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_sendItemComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_sendItemComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_queryItemCommentDetail_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderTicketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderTicketId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryItemCommentDetail_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryItemCommentDetail_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryItemCommentDetail_args', self::$_TSPEC, $output);
  }

}

class CommentService_queryItemCommentDetail_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ItemCommentDetailResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\ItemCommentDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryItemCommentDetail_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryItemCommentDetail_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryItemCommentDetail_result', self::$_TSPEC, $output);
  }

}

class CommentService_queryItemCommentList_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $totalNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryItemCommentList_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryItemCommentList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryItemCommentList_args', self::$_TSPEC, $output);
  }

}

class CommentService_queryItemCommentList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ItemCommentListResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\ItemCommentListResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryItemCommentList_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryItemCommentList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryItemCommentList_result', self::$_TSPEC, $output);
  }

}

class CommentService_sendHairStylistComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userId = null;
  /**
   * @var string
   */
  public $bountySn = null;
  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $imgUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'bountySn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hairstylistId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'imgUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_sendHairStylistComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_sendHairStylistComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_sendHairStylistComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_sendHairStylistComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\SendHairStylistCommentResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\SendHairStylistCommentResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_sendHairStylistComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_sendHairStylistComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_sendHairStylistComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_queryStylistCommentList_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $userId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int
   */
  public $totalNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryStylistCommentList_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryStylistCommentList_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryStylistCommentList_args', self::$_TSPEC, $output);
  }

}

class CommentService_queryStylistCommentList_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\StylistCommentListResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\StylistCommentListResult',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_queryStylistCommentList_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_queryStylistCommentList_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_queryStylistCommentList_result', self::$_TSPEC, $output);
  }

}

class CommentService_getSalonComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getSalonComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getSalonComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getSalonComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_getSalonComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSalonCommentRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSalonCommentRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getSalonComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getSalonComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getSalonComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_getItemComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getItemComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getItemComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getItemComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_getItemComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetItemCommentRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetItemCommentRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getItemComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getItemComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getItemComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_getCommentByTicketId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderTicketId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderTicketId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getCommentByTicketId_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getCommentByTicketId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getCommentByTicketId_args', self::$_TSPEC, $output);
  }

}

class CommentService_getCommentByTicketId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetCommentRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetCommentRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getCommentByTicketId_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getCommentByTicketId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getCommentByTicketId_result', self::$_TSPEC, $output);
  }

}

class CommentService_postItemComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam
   */
  public $postItemCommentParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'postItemCommentParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PostItemCommentParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_postItemComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_postItemComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_postItemComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_postItemComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_postItemComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_postItemComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_postItemComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_changeItemComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderTicketId = null;
  /**
   * @var int
   */
  public $satisfyType = null;
  /**
   * @var int
   */
  public $remark = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $imgsrc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderTicketId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'satisfyType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'imgsrc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_changeItemComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_changeItemComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_changeItemComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_changeItemComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\UpdateRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\UpdateRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_changeItemComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_changeItemComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_changeItemComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_getBtCommentByStylistId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sytlistId = null;
  /**
   * @var int
   */
  public $page = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sytlistId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBtCommentByStylistId_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBtCommentByStylistId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBtCommentByStylistId_args', self::$_TSPEC, $output);
  }

}

class CommentService_getBtCommentByStylistId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBtCommentByStylistIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBtCommentByStylistIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBtCommentByStylistId_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBtCommentByStylistId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBtCommentByStylistId_result', self::$_TSPEC, $output);
  }

}

class CommentService_getBtCommentCountByStylistId_args extends TBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sytlistId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sytlistId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBtCommentCountByStylistId_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBtCommentCountByStylistId_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBtCommentCountByStylistId_args', self::$_TSPEC, $output);
  }

}

class CommentService_getBtCommentCountByStylistId_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBtCommentCountByStylistIdRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBtCommentCountByStylistIdRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBtCommentCountByStylistId_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBtCommentCountByStylistId_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBtCommentCountByStylistId_result', self::$_TSPEC, $output);
  }

}

class CommentService_addBtComment_args extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam
   */
  public $addBtCommentParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addBtCommentParam',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\AddBtCommentParam',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_addBtComment_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_addBtComment_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_addBtComment_args', self::$_TSPEC, $output);
  }

}

class CommentService_addBtComment_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\InsertRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\InsertRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_addBtComment_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_addBtComment_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_addBtComment_result', self::$_TSPEC, $output);
  }

}

class CommentService_getBountyCommentBySn_args extends TBase {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBountyCommentBySn_args';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBountyCommentBySn_args', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBountyCommentBySn_args', self::$_TSPEC, $output);
  }

}

class CommentService_getBountyCommentBySn_result extends TBase {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetBountyCommentBySnRet
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\GetBountyCommentBySnRet',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'CommentService_getBountyCommentBySn_result';
  }

  public function read($input)
  {
    return $this->_read('CommentService_getBountyCommentBySn_result', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('CommentService_getBountyCommentBySn_result', self::$_TSPEC, $output);
  }

}


