<?php
namespace cn\choumei\thriftserver\service\stub\gen;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 订单信息列表
 */
class OrderThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $priceall = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var string
   */
  public $priceallOri = null;
  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $shopcartsn = null;
  /**
   * @var int
   */
  public $companyId = null;
  /**
   * @var int
   */
  public $isCompanyPrice = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var string
   */
  public $actuallyPay = null;
  /**
   * @var int
   */
  public $payTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'priceallOri',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'companyId',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'isCompanyPrice',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'actuallyPay',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'payTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['priceall'])) {
        $this->priceall = $vals['priceall'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['priceallOri'])) {
        $this->priceallOri = $vals['priceallOri'];
      }
      if (isset($vals['ispay'])) {
        $this->ispay = $vals['ispay'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['shopcartsn'])) {
        $this->shopcartsn = $vals['shopcartsn'];
      }
      if (isset($vals['companyId'])) {
        $this->companyId = $vals['companyId'];
      }
      if (isset($vals['isCompanyPrice'])) {
        $this->isCompanyPrice = $vals['isCompanyPrice'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['actuallyPay'])) {
        $this->actuallyPay = $vals['actuallyPay'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
    }
  }

  public function getName() {
    return 'OrderThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceallOri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ispay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopcartsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->companyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isCompanyPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actuallyPay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderThrift');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 2);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 3);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceall !== null) {
      $xfer += $output->writeFieldBegin('priceall', TType::STRING, 4);
      $xfer += $output->writeString($this->priceall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 5);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I64, 6);
      $xfer += $output->writeI64($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceallOri !== null) {
      $xfer += $output->writeFieldBegin('priceallOri', TType::STRING, 7);
      $xfer += $output->writeString($this->priceallOri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ispay !== null) {
      $xfer += $output->writeFieldBegin('ispay', TType::I32, 8);
      $xfer += $output->writeI32($this->ispay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopcartsn !== null) {
      $xfer += $output->writeFieldBegin('shopcartsn', TType::STRING, 10);
      $xfer += $output->writeString($this->shopcartsn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->companyId !== null) {
      $xfer += $output->writeFieldBegin('companyId', TType::I64, 11);
      $xfer += $output->writeI64($this->companyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isCompanyPrice !== null) {
      $xfer += $output->writeFieldBegin('isCompanyPrice', TType::I32, 12);
      $xfer += $output->writeI32($this->isCompanyPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 13);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actuallyPay !== null) {
      $xfer += $output->writeFieldBegin('actuallyPay', TType::STRING, 14);
      $xfer += $output->writeString($this->actuallyPay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::I64, 15);
      $xfer += $output->writeI64($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 订单项目信息列表
 */
class OrderItemThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderItemId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemname = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var string
   */
  public $priceDis = null;
  /**
   * @var string
   */
  public $priceall = null;
  /**
   * @var string
   */
  public $priceallOri = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $useTime = null;
  /**
   * @var string
   */
  public $serviceDetail = null;
  /**
   * @var string
   */
  public $useLimit = null;
  /**
   * @var string
   */
  public $normsStr = null;
  /**
   * @var string
   */
  public $extra = null;
  /**
   * @var int
   */
  public $salonNormsId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'itemname',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'priceDis',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'priceallOri',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'useTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'serviceDetail',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'useLimit',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'normsStr',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'extra',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'salonNormsId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderItemId'])) {
        $this->orderItemId = $vals['orderItemId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemname'])) {
        $this->itemname = $vals['itemname'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['priceDis'])) {
        $this->priceDis = $vals['priceDis'];
      }
      if (isset($vals['priceall'])) {
        $this->priceall = $vals['priceall'];
      }
      if (isset($vals['priceallOri'])) {
        $this->priceallOri = $vals['priceallOri'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['useTime'])) {
        $this->useTime = $vals['useTime'];
      }
      if (isset($vals['serviceDetail'])) {
        $this->serviceDetail = $vals['serviceDetail'];
      }
      if (isset($vals['useLimit'])) {
        $this->useLimit = $vals['useLimit'];
      }
      if (isset($vals['normsStr'])) {
        $this->normsStr = $vals['normsStr'];
      }
      if (isset($vals['extra'])) {
        $this->extra = $vals['extra'];
      }
      if (isset($vals['salonNormsId'])) {
        $this->salonNormsId = $vals['salonNormsId'];
      }
    }
  }

  public function getName() {
    return 'OrderItemThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderItemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceDis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceallOri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->useTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normsStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonNormsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderItemThrift');
    if ($this->orderItemId !== null) {
      $xfer += $output->writeFieldBegin('orderItemId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderItemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 2);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 3);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 4);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 5);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I64, 6);
      $xfer += $output->writeI64($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemname !== null) {
      $xfer += $output->writeFieldBegin('itemname', TType::STRING, 7);
      $xfer += $output->writeString($this->itemname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I64, 8);
      $xfer += $output->writeI64($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDis !== null) {
      $xfer += $output->writeFieldBegin('priceDis', TType::STRING, 9);
      $xfer += $output->writeString($this->priceDis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceall !== null) {
      $xfer += $output->writeFieldBegin('priceall', TType::STRING, 10);
      $xfer += $output->writeString($this->priceall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceallOri !== null) {
      $xfer += $output->writeFieldBegin('priceallOri', TType::STRING, 11);
      $xfer += $output->writeString($this->priceallOri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 12);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 13);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useTime !== null) {
      $xfer += $output->writeFieldBegin('useTime', TType::I64, 14);
      $xfer += $output->writeI64($this->useTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceDetail !== null) {
      $xfer += $output->writeFieldBegin('serviceDetail', TType::STRING, 15);
      $xfer += $output->writeString($this->serviceDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useLimit !== null) {
      $xfer += $output->writeFieldBegin('useLimit', TType::STRING, 16);
      $xfer += $output->writeString($this->useLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normsStr !== null) {
      $xfer += $output->writeFieldBegin('normsStr', TType::STRING, 17);
      $xfer += $output->writeString($this->normsStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra !== null) {
      $xfer += $output->writeFieldBegin('extra', TType::STRING, 18);
      $xfer += $output->writeString($this->extra);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsId !== null) {
      $xfer += $output->writeFieldBegin('salonNormsId', TType::I64, 19);
      $xfer += $output->writeI64($this->salonNormsId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 臭美券信息列表
 */
class OrderTicketThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderTicketId = null;
  /**
   * @var string
   */
  public $otOrdersn = null;
  /**
   * @var int
   */
  public $orderItemId = null;
  /**
   * @var string
   */
  public $ticketno = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $iscomment = null;
  /**
   * @var int
   */
  public $useTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $otSalonId = null;
  /**
   * @var int
   */
  public $isSendPhoneMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderTicketId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'otOrdersn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ticketno',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'iscomment',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'useTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'otSalonId',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'isSendPhoneMsg',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderTicketId'])) {
        $this->orderTicketId = $vals['orderTicketId'];
      }
      if (isset($vals['otOrdersn'])) {
        $this->otOrdersn = $vals['otOrdersn'];
      }
      if (isset($vals['orderItemId'])) {
        $this->orderItemId = $vals['orderItemId'];
      }
      if (isset($vals['ticketno'])) {
        $this->ticketno = $vals['ticketno'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['iscomment'])) {
        $this->iscomment = $vals['iscomment'];
      }
      if (isset($vals['useTime'])) {
        $this->useTime = $vals['useTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['otSalonId'])) {
        $this->otSalonId = $vals['otSalonId'];
      }
      if (isset($vals['isSendPhoneMsg'])) {
        $this->isSendPhoneMsg = $vals['isSendPhoneMsg'];
      }
    }
  }

  public function getName() {
    return 'OrderTicketThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderTicketId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->otOrdersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderItemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iscomment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->useTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->otSalonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isSendPhoneMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderTicketThrift');
    if ($this->orderTicketId !== null) {
      $xfer += $output->writeFieldBegin('orderTicketId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderTicketId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otOrdersn !== null) {
      $xfer += $output->writeFieldBegin('otOrdersn', TType::STRING, 2);
      $xfer += $output->writeString($this->otOrdersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderItemId !== null) {
      $xfer += $output->writeFieldBegin('orderItemId', TType::I64, 3);
      $xfer += $output->writeI64($this->orderItemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketno !== null) {
      $xfer += $output->writeFieldBegin('ticketno', TType::STRING, 4);
      $xfer += $output->writeString($this->ticketno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iscomment !== null) {
      $xfer += $output->writeFieldBegin('iscomment', TType::I32, 6);
      $xfer += $output->writeI32($this->iscomment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useTime !== null) {
      $xfer += $output->writeFieldBegin('useTime', TType::I64, 7);
      $xfer += $output->writeI64($this->useTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 8);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 9);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otSalonId !== null) {
      $xfer += $output->writeFieldBegin('otSalonId', TType::I64, 10);
      $xfer += $output->writeI64($this->otSalonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSendPhoneMsg !== null) {
      $xfer += $output->writeFieldBegin('isSendPhoneMsg', TType::I32, 11);
      $xfer += $output->writeI32($this->isSendPhoneMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTicketByUserIdRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetTicketByUserIdRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift();
              $xfer += $elem5->read($input);
              $this->data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTicketByUserIdRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderTicketByStatusRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetOrderTicketByStatusRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift();
              $xfer += $elem12->read($input);
              $this->data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderTicketByStatusRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetOrderRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\OrderThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderItemRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderItemThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderItemThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetOrderItemRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\OrderItemThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderItemRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 我的退款臭美卷信息列表
 * 对应order_ticket表中的字段
 */
class RefundThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderItemId = null;
  /**
   * @var string
   */
  public $ticketno = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ticketno',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderItemId'])) {
        $this->orderItemId = $vals['orderItemId'];
      }
      if (isset($vals['ticketno'])) {
        $this->ticketno = $vals['ticketno'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'RefundThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderItemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RefundThrift');
    if ($this->orderItemId !== null) {
      $xfer += $output->writeFieldBegin('orderItemId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderItemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketno !== null) {
      $xfer += $output->writeFieldBegin('ticketno', TType::STRING, 2);
      $xfer += $output->writeString($this->ticketno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * fundflow信息
 * 对应fundflow表中的字段
 */
class FundflowInfoThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $payType = null;
  /**
   * @var string
   */
  public $money = null;
  /**
   * @var int
   */
  public $codeType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'codeType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payType'])) {
        $this->payType = $vals['payType'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['codeType'])) {
        $this->codeType = $vals['codeType'];
      }
    }
  }

  public function getName() {
    return 'FundflowInfoThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->codeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FundflowInfoThrift');
    if ($this->payType !== null) {
      $xfer += $output->writeFieldBegin('payType', TType::I32, 1);
      $xfer += $output->writeI32($this->payType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 2);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codeType !== null) {
      $xfer += $output->writeFieldBegin('codeType', TType::I32, 3);
      $xfer += $output->writeI32($this->codeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * OrderNorms信息
 * 对应OrderItem表中的字段
 */
class OrderNormsThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $norms = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'norms',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['norms'])) {
        $this->norms = $vals['norms'];
      }
    }
  }

  public function getName() {
    return 'OrderNormsThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->norms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderNormsThrift');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I64, 1);
      $xfer += $output->writeI64($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->norms !== null) {
      $xfer += $output->writeFieldBegin('norms', TType::STRING, 2);
      $xfer += $output->writeString($this->norms);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * RecommendCodeOrder信息
 * 对应RecommendCodeOrderUser表中的字段
 */
class RecommendCodeOrderThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $recommendCode = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $updateime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'recommendCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'updateime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['recommendCode'])) {
        $this->recommendCode = $vals['recommendCode'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['updateime'])) {
        $this->updateime = $vals['updateime'];
      }
    }
  }

  public function getName() {
    return 'RecommendCodeOrderThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecommendCodeOrderThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendCode !== null) {
      $xfer += $output->writeFieldBegin('recommendCode', TType::STRING, 2);
      $xfer += $output->writeString($this->recommendCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 3);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 4);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateime !== null) {
      $xfer += $output->writeFieldBegin('updateime', TType::I64, 5);
      $xfer += $output->writeI64($this->updateime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 我的退款臭美卷信息列表结果集
 */
class GetRefundListRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\RefundThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\RefundThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetRefundListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \cn\choumei\thriftserver\service\stub\gen\RefundThrift();
              $xfer += $elem19->read($input);
              $this->data []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRefundListRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 我的未消费臭美卷信息列表结果集
 */
class GetNonConsumeListRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\RefundThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\RefundThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetNonConsumeListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \cn\choumei\thriftserver\service\stub\gen\RefundThrift();
              $xfer += $elem26->read($input);
              $this->data []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetNonConsumeListRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 通过ticketNo找到pay_type和money结果集
 */
class GetFundflowArrRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\FundflowInfoThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\FundflowInfoThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetFundflowArrRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \cn\choumei\thriftserver\service\stub\gen\FundflowInfoThrift();
              $xfer += $elem33->read($input);
              $this->data []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetFundflowArrRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 通过ordersn找到RecommendCodeOrder结果集
 */
class GetRecommendCodeOrderRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\RecommendCodeOrderThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\RecommendCodeOrderThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetRecommendCodeOrderRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\RecommendCodeOrderThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRecommendCodeOrderRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPaymentLogRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var int
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'AddPaymentLogRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPaymentLogRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::I64, 4);
      $xfer += $output->writeI64($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentLogThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $logtype = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var int
   */
  public $payid = null;
  /**
   * @var string
   */
  public $tn = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $device = null;
  /**
   * @var string
   */
  public $batchNo = null;
  /**
   * @var int
   */
  public $alipayUpdated = null;
  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logtype',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'payid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'tn',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'device',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'batchNo',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'alipayUpdated',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logtype'])) {
        $this->logtype = $vals['logtype'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['payid'])) {
        $this->payid = $vals['payid'];
      }
      if (isset($vals['tn'])) {
        $this->tn = $vals['tn'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
      if (isset($vals['batchNo'])) {
        $this->batchNo = $vals['batchNo'];
      }
      if (isset($vals['alipayUpdated'])) {
        $this->alipayUpdated = $vals['alipayUpdated'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'PaymentLogThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batchNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->alipayUpdated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentLogThrift');
    if ($this->logtype !== null) {
      $xfer += $output->writeFieldBegin('logtype', TType::I32, 1);
      $xfer += $output->writeI32($this->logtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 2);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 3);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 4);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payid !== null) {
      $xfer += $output->writeFieldBegin('payid', TType::I64, 5);
      $xfer += $output->writeI64($this->payid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tn !== null) {
      $xfer += $output->writeFieldBegin('tn', TType::STRING, 6);
      $xfer += $output->writeString($this->tn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 7);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 8);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      $xfer += $output->writeFieldBegin('device', TType::I32, 9);
      $xfer += $output->writeI32($this->device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchNo !== null) {
      $xfer += $output->writeFieldBegin('batchNo', TType::STRING, 10);
      $xfer += $output->writeString($this->batchNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alipayUpdated !== null) {
      $xfer += $output->writeFieldBegin('alipayUpdated', TType::I64, 11);
      $xfer += $output->writeI64($this->alipayUpdated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 12);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPaymentLogRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PaymentLogThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PaymentLogThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetPaymentLogRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\PaymentLogThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPaymentLogRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 购物车信息列表
 */
class ShopCartThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $scId = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $salonName = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var int
   */
  public $salonNormsId = null;
  /**
   * @var string
   */
  public $salonNormsName = null;
  /**
   * @var int
   */
  public $nums = null;
  /**
   * @var int
   */
  public $price = null;
  /**
   * @var int
   */
  public $priceAll = null;
  /**
   * @var int
   */
  public $priceDis = null;
  /**
   * @var int
   */
  public $priceDisAll = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var string
   */
  public $shopcartsn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'salonName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'salonNormsId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'salonNormsName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'nums',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'price',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'priceAll',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'priceDis',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'priceDisAll',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scId'])) {
        $this->scId = $vals['scId'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['salonName'])) {
        $this->salonName = $vals['salonName'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['salonNormsId'])) {
        $this->salonNormsId = $vals['salonNormsId'];
      }
      if (isset($vals['salonNormsName'])) {
        $this->salonNormsName = $vals['salonNormsName'];
      }
      if (isset($vals['nums'])) {
        $this->nums = $vals['nums'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['priceAll'])) {
        $this->priceAll = $vals['priceAll'];
      }
      if (isset($vals['priceDis'])) {
        $this->priceDis = $vals['priceDis'];
      }
      if (isset($vals['priceDisAll'])) {
        $this->priceDisAll = $vals['priceDisAll'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['shopcartsn'])) {
        $this->shopcartsn = $vals['shopcartsn'];
      }
    }
  }

  public function getName() {
    return 'ShopCartThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->scId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salonName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonNormsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salonNormsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->nums);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceAll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceDis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceDisAll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopcartsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ShopCartThrift');
    if ($this->scId !== null) {
      $xfer += $output->writeFieldBegin('scId', TType::I64, 1);
      $xfer += $output->writeI64($this->scId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 2);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonName !== null) {
      $xfer += $output->writeFieldBegin('salonName', TType::STRING, 3);
      $xfer += $output->writeString($this->salonName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I64, 4);
      $xfer += $output->writeI64($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 5);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsId !== null) {
      $xfer += $output->writeFieldBegin('salonNormsId', TType::I64, 6);
      $xfer += $output->writeI64($this->salonNormsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsName !== null) {
      $xfer += $output->writeFieldBegin('salonNormsName', TType::STRING, 7);
      $xfer += $output->writeString($this->salonNormsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nums !== null) {
      $xfer += $output->writeFieldBegin('nums', TType::I64, 8);
      $xfer += $output->writeI64($this->nums);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I64, 9);
      $xfer += $output->writeI64($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceAll !== null) {
      $xfer += $output->writeFieldBegin('priceAll', TType::I64, 10);
      $xfer += $output->writeI64($this->priceAll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDis !== null) {
      $xfer += $output->writeFieldBegin('priceDis', TType::I64, 11);
      $xfer += $output->writeI64($this->priceDis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDisAll !== null) {
      $xfer += $output->writeFieldBegin('priceDisAll', TType::I64, 12);
      $xfer += $output->writeI64($this->priceDisAll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 13);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 14);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopcartsn !== null) {
      $xfer += $output->writeFieldBegin('shopcartsn', TType::STRING, 15);
      $xfer += $output->writeString($this->shopcartsn);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BountyTaskThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $btId = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $money = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var string
   */
  public $needsStr = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $madeTo = null;
  /**
   * @var int
   */
  public $reason = null;
  /**
   * @var int
   */
  public $district = null;
  /**
   * @var int
   */
  public $zone = null;
  /**
   * @var string
   */
  public $remark = null;
  /**
   * @var int
   */
  public $selectType = null;
  /**
   * @var int
   */
  public $satisfyType = null;
  /**
   * @var int
   */
  public $ispay = null;
  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $refundStatus = null;
  /**
   * @var int
   */
  public $requestNum = null;
  /**
   * @var string
   */
  public $detail = null;
  /**
   * @var int
   */
  public $isComment = null;
  /**
   * @var int
   */
  public $taskType = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $selectTime = null;
  /**
   * @var int
   */
  public $serviceTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $payType = null;
  /**
   * @var int
   */
  public $userScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'money',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'hairstylistId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'needsStr',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'madeTo',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'reason',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'zone',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'selectType',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'satisfyType',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'ispay',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'refundStatus',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'requestNum',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'isComment',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'taskType',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'selectTime',
          'type' => TType::I64,
          ),
        25 => array(
          'var' => 'serviceTime',
          'type' => TType::I64,
          ),
        26 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        27 => array(
          'var' => 'payType',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'userScore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['btId'])) {
        $this->btId = $vals['btId'];
      }
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['hairstylistId'])) {
        $this->hairstylistId = $vals['hairstylistId'];
      }
      if (isset($vals['needsStr'])) {
        $this->needsStr = $vals['needsStr'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['madeTo'])) {
        $this->madeTo = $vals['madeTo'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['district'])) {
        $this->district = $vals['district'];
      }
      if (isset($vals['zone'])) {
        $this->zone = $vals['zone'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['selectType'])) {
        $this->selectType = $vals['selectType'];
      }
      if (isset($vals['satisfyType'])) {
        $this->satisfyType = $vals['satisfyType'];
      }
      if (isset($vals['ispay'])) {
        $this->ispay = $vals['ispay'];
      }
      if (isset($vals['btStatus'])) {
        $this->btStatus = $vals['btStatus'];
      }
      if (isset($vals['refundStatus'])) {
        $this->refundStatus = $vals['refundStatus'];
      }
      if (isset($vals['requestNum'])) {
        $this->requestNum = $vals['requestNum'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['isComment'])) {
        $this->isComment = $vals['isComment'];
      }
      if (isset($vals['taskType'])) {
        $this->taskType = $vals['taskType'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['selectTime'])) {
        $this->selectTime = $vals['selectTime'];
      }
      if (isset($vals['serviceTime'])) {
        $this->serviceTime = $vals['serviceTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['payType'])) {
        $this->payType = $vals['payType'];
      }
      if (isset($vals['userScore'])) {
        $this->userScore = $vals['userScore'];
      }
    }
  }

  public function getName() {
    return 'BountyTaskThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->btId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hairstylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->needsStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->madeTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->district);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->zone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->selectType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->satisfyType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ispay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->btStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refundStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->requestNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->selectTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->serviceTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BountyTaskThrift');
    if ($this->btId !== null) {
      $xfer += $output->writeFieldBegin('btId', TType::I64, 1);
      $xfer += $output->writeI64($this->btId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 2);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::I64, 3);
      $xfer += $output->writeI64($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 5);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hairstylistId !== null) {
      $xfer += $output->writeFieldBegin('hairstylistId', TType::I64, 6);
      $xfer += $output->writeI64($this->hairstylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->needsStr !== null) {
      $xfer += $output->writeFieldBegin('needsStr', TType::STRING, 7);
      $xfer += $output->writeString($this->needsStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->madeTo !== null) {
      $xfer += $output->writeFieldBegin('madeTo', TType::I32, 9);
      $xfer += $output->writeI32($this->madeTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::I32, 10);
      $xfer += $output->writeI32($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->district !== null) {
      $xfer += $output->writeFieldBegin('district', TType::I64, 11);
      $xfer += $output->writeI64($this->district);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zone !== null) {
      $xfer += $output->writeFieldBegin('zone', TType::I64, 12);
      $xfer += $output->writeI64($this->zone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 13);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selectType !== null) {
      $xfer += $output->writeFieldBegin('selectType', TType::I32, 14);
      $xfer += $output->writeI32($this->selectType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->satisfyType !== null) {
      $xfer += $output->writeFieldBegin('satisfyType', TType::I32, 15);
      $xfer += $output->writeI32($this->satisfyType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ispay !== null) {
      $xfer += $output->writeFieldBegin('ispay', TType::I32, 16);
      $xfer += $output->writeI32($this->ispay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btStatus !== null) {
      $xfer += $output->writeFieldBegin('btStatus', TType::I32, 17);
      $xfer += $output->writeI32($this->btStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refundStatus !== null) {
      $xfer += $output->writeFieldBegin('refundStatus', TType::I32, 18);
      $xfer += $output->writeI32($this->refundStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestNum !== null) {
      $xfer += $output->writeFieldBegin('requestNum', TType::I64, 19);
      $xfer += $output->writeI64($this->requestNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 20);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isComment !== null) {
      $xfer += $output->writeFieldBegin('isComment', TType::I32, 21);
      $xfer += $output->writeI32($this->isComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskType !== null) {
      $xfer += $output->writeFieldBegin('taskType', TType::I32, 22);
      $xfer += $output->writeI32($this->taskType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 23);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selectTime !== null) {
      $xfer += $output->writeFieldBegin('selectTime', TType::I64, 24);
      $xfer += $output->writeI64($this->selectTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceTime !== null) {
      $xfer += $output->writeFieldBegin('serviceTime', TType::I64, 25);
      $xfer += $output->writeI64($this->serviceTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 26);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payType !== null) {
      $xfer += $output->writeFieldBegin('payType', TType::I32, 27);
      $xfer += $output->writeI32($this->payType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userScore !== null) {
      $xfer += $output->writeFieldBegin('userScore', TType::I32, 28);
      $xfer += $output->writeI32($this->userScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BountyTaskWithNumThrift {
  static $_TSPEC;

  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift[]
   */
  public $bTList = null;
  /**
   * @var int
   */
  public $totalNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bTList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['bTList'])) {
        $this->bTList = $vals['bTList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
    }
  }

  public function getName() {
    return 'BountyTaskWithNumThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->bTList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift();
              $xfer += $elem40->read($input);
              $this->bTList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BountyTaskWithNumThrift');
    if ($this->bTList !== null) {
      if (!is_array($this->bTList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bTList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->bTList));
        {
          foreach ($this->bTList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I64, 2);
      $xfer += $output->writeI64($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetShopCartsRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetShopCartsRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift();
              $xfer += $elem47->read($input);
              $this->data []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetShopCartsRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllShopCartBySnRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetAllShopCartBySnRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift();
              $xfer += $elem54->read($input);
              $this->data []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllShopCartBySnRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetShopCartByItemNormsRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\ShopCartThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetShopCartByItemNormsRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\ShopCartThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetShopCartByItemNormsRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdatShopCartByIdRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var int
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'UpdatShopCartByIdRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdatShopCartByIdRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::I64, 4);
      $xfer += $output->writeI64($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * ************************赏金频道API**************************
 */
class GetTaskRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyTaskWithNumThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyTaskWithNumThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetTaskRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\BountyTaskWithNumThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyTaskRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyTaskRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyTaskRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BountyRequestThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $brId = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $hairstylistId = null;
  /**
   * @var string
   */
  public $remark = null;
  /**
   * @var int
   */
  public $brStatus = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'brId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'hairstylistId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'brStatus',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['brId'])) {
        $this->brId = $vals['brId'];
      }
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['hairstylistId'])) {
        $this->hairstylistId = $vals['hairstylistId'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['brStatus'])) {
        $this->brStatus = $vals['brStatus'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
    }
  }

  public function getName() {
    return 'BountyRequestThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->brId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hairstylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BountyRequestThrift');
    if ($this->brId !== null) {
      $xfer += $output->writeFieldBegin('brId', TType::I64, 1);
      $xfer += $output->writeI64($this->brId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 2);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 3);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hairstylistId !== null) {
      $xfer += $output->writeFieldBegin('hairstylistId', TType::I64, 4);
      $xfer += $output->writeI64($this->hairstylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 5);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brStatus !== null) {
      $xfer += $output->writeFieldBegin('brStatus', TType::I32, 6);
      $xfer += $output->writeI32($this->brStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 7);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleRanklistThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $money = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
    }
  }

  public function getName() {
    return 'GetSingleRanklistThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleRanklistThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 1);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 3);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTotalRanklistThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $totalMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'totalMoney',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['totalMoney'])) {
        $this->totalMoney = $vals['totalMoney'];
      }
    }
  }

  public function getName() {
    return 'GetTotalRanklistThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->totalMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTotalRanklistThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 1);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalMoney !== null) {
      $xfer += $output->writeFieldBegin('totalMoney', TType::STRING, 3);
      $xfer += $output->writeString($this->totalMoney);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyTasksRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyTasksRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \cn\choumei\thriftserver\service\stub\gen\BountyTaskThrift();
              $xfer += $elem61->read($input);
              $this->data []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyTasksRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyRequestListRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyRequestListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift();
              $xfer += $elem68->read($input);
              $this->data []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyRequestListRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleRanklistRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetSingleRanklistRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \cn\choumei\thriftserver\service\stub\gen\GetSingleRanklistThrift();
              $xfer += $elem75->read($input);
              $this->data []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleRanklistRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTotalRanklistRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetTotalRanklistRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new \cn\choumei\thriftserver\service\stub\gen\GetTotalRanklistThrift();
              $xfer += $elem82->read($input);
              $this->data []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTotalRanklistRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderListRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetOrderListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \cn\choumei\thriftserver\service\stub\gen\OrderThrift();
              $xfer += $elem89->read($input);
              $this->data []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderListRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTicketRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetTicketRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\OrderTicketThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTicketRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTicketNoRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetTicketNoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTicketNoRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 4);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderRefund {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var string
   */
  public $ticketno = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $money = null;
  /**
   * @var int
   */
  public $optUserId = null;
  /**
   * @var int
   */
  public $retType = null;
  /**
   * @var string
   */
  public $rereason = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $optTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ticketno',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'optUserId',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'retType',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'rereason',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'optTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['ticketno'])) {
        $this->ticketno = $vals['ticketno'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['optUserId'])) {
        $this->optUserId = $vals['optUserId'];
      }
      if (isset($vals['retType'])) {
        $this->retType = $vals['retType'];
      }
      if (isset($vals['rereason'])) {
        $this->rereason = $vals['rereason'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['optTime'])) {
        $this->optTime = $vals['optTime'];
      }
    }
  }

  public function getName() {
    return 'OrderRefund';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->optUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rereason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->optTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderRefund');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 2);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketno !== null) {
      $xfer += $output->writeFieldBegin('ticketno', TType::STRING, 3);
      $xfer += $output->writeString($this->ticketno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 5);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 6);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->optUserId !== null) {
      $xfer += $output->writeFieldBegin('optUserId', TType::I64, 7);
      $xfer += $output->writeI64($this->optUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retType !== null) {
      $xfer += $output->writeFieldBegin('retType', TType::I32, 8);
      $xfer += $output->writeI32($this->retType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rereason !== null) {
      $xfer += $output->writeFieldBegin('rereason', TType::STRING, 9);
      $xfer += $output->writeString($this->rereason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 11);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->optTime !== null) {
      $xfer += $output->writeFieldBegin('optTime', TType::I64, 12);
      $xfer += $output->writeI64($this->optTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderRefundRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\OrderRefund
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\OrderRefund',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetOrderRefundRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\OrderRefund();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderRefundRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BountyPushThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $reqStatus = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'reqStatus',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['stylistId'])) {
        $this->stylistId = $vals['stylistId'];
      }
      if (isset($vals['reqStatus'])) {
        $this->reqStatus = $vals['reqStatus'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
    }
  }

  public function getName() {
    return 'BountyPushThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BountyPushThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 2);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 3);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stylistId !== null) {
      $xfer += $output->writeFieldBegin('stylistId', TType::I64, 4);
      $xfer += $output->writeI64($this->stylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqStatus !== null) {
      $xfer += $output->writeFieldBegin('reqStatus', TType::I32, 5);
      $xfer += $output->writeI32($this->reqStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 6);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyPushListRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyPushThrift[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyPushThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyPushListRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new \cn\choumei\thriftserver\service\stub\gen\BountyPushThrift();
              $xfer += $elem96->read($input);
              $this->data []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyPushListRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var string
   */
  public $shopcartsn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $priceall = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var string
   */
  public $priceallOri = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $companyId = null;
  /**
   * @var int
   */
  public $isCompanyPrice = null;
  /**
   * @var string
   */
  public $actuallyPay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'shopcartsn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'priceallOri',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'companyId',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'isCompanyPrice',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'actuallyPay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['shopcartsn'])) {
        $this->shopcartsn = $vals['shopcartsn'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['priceall'])) {
        $this->priceall = $vals['priceall'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['priceallOri'])) {
        $this->priceallOri = $vals['priceallOri'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['companyId'])) {
        $this->companyId = $vals['companyId'];
      }
      if (isset($vals['isCompanyPrice'])) {
        $this->isCompanyPrice = $vals['isCompanyPrice'];
      }
      if (isset($vals['actuallyPay'])) {
        $this->actuallyPay = $vals['actuallyPay'];
      }
    }
  }

  public function getName() {
    return 'OrderParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopcartsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceallOri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->companyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isCompanyPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actuallyPay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderParam');
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 1);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopcartsn !== null) {
      $xfer += $output->writeFieldBegin('shopcartsn', TType::STRING, 2);
      $xfer += $output->writeString($this->shopcartsn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 3);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I64, 5);
      $xfer += $output->writeI64($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceall !== null) {
      $xfer += $output->writeFieldBegin('priceall', TType::STRING, 6);
      $xfer += $output->writeString($this->priceall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceallOri !== null) {
      $xfer += $output->writeFieldBegin('priceallOri', TType::STRING, 7);
      $xfer += $output->writeString($this->priceallOri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 8);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->companyId !== null) {
      $xfer += $output->writeFieldBegin('companyId', TType::I64, 9);
      $xfer += $output->writeI64($this->companyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isCompanyPrice !== null) {
      $xfer += $output->writeFieldBegin('isCompanyPrice', TType::I32, 10);
      $xfer += $output->writeI32($this->isCompanyPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actuallyPay !== null) {
      $xfer += $output->writeFieldBegin('actuallyPay', TType::STRING, 11);
      $xfer += $output->writeString($this->actuallyPay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderItemParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $orderId = null;
  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var string
   */
  public $priceDis = null;
  /**
   * @var string
   */
  public $priceall = null;
  /**
   * @var string
   */
  public $priceallOri = null;
  /**
   * @var string
   */
  public $extra = null;
  /**
   * @var string
   */
  public $normsStr = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var string
   */
  public $serviceDetail = null;
  /**
   * @var string
   */
  public $useLimit = null;
  /**
   * @var int
   */
  public $salonNormsId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'priceDis',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'priceall',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'priceallOri',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'extra',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'normsStr',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'serviceDetail',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'useLimit',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'salonNormsId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['priceDis'])) {
        $this->priceDis = $vals['priceDis'];
      }
      if (isset($vals['priceall'])) {
        $this->priceall = $vals['priceall'];
      }
      if (isset($vals['priceallOri'])) {
        $this->priceallOri = $vals['priceallOri'];
      }
      if (isset($vals['extra'])) {
        $this->extra = $vals['extra'];
      }
      if (isset($vals['normsStr'])) {
        $this->normsStr = $vals['normsStr'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['serviceDetail'])) {
        $this->serviceDetail = $vals['serviceDetail'];
      }
      if (isset($vals['useLimit'])) {
        $this->useLimit = $vals['useLimit'];
      }
      if (isset($vals['salonNormsId'])) {
        $this->salonNormsId = $vals['salonNormsId'];
      }
    }
  }

  public function getName() {
    return 'OrderItemParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceDis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceallOri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normsStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->useLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonNormsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderItemParam');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 2);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I64, 3);
      $xfer += $output->writeI64($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 5);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 6);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I64, 7);
      $xfer += $output->writeI64($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDis !== null) {
      $xfer += $output->writeFieldBegin('priceDis', TType::STRING, 8);
      $xfer += $output->writeString($this->priceDis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceall !== null) {
      $xfer += $output->writeFieldBegin('priceall', TType::STRING, 9);
      $xfer += $output->writeString($this->priceall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceallOri !== null) {
      $xfer += $output->writeFieldBegin('priceallOri', TType::STRING, 10);
      $xfer += $output->writeString($this->priceallOri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra !== null) {
      $xfer += $output->writeFieldBegin('extra', TType::STRING, 11);
      $xfer += $output->writeString($this->extra);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normsStr !== null) {
      $xfer += $output->writeFieldBegin('normsStr', TType::STRING, 12);
      $xfer += $output->writeString($this->normsStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 13);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceDetail !== null) {
      $xfer += $output->writeFieldBegin('serviceDetail', TType::STRING, 14);
      $xfer += $output->writeString($this->serviceDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useLimit !== null) {
      $xfer += $output->writeFieldBegin('useLimit', TType::STRING, 15);
      $xfer += $output->writeString($this->useLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsId !== null) {
      $xfer += $output->writeFieldBegin('salonNormsId', TType::I64, 16);
      $xfer += $output->writeI64($this->salonNormsId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPaymentLogParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $tn = null;
  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var int
   */
  public $device = null;
  /**
   * @var int
   */
  public $logType = null;
  /**
   * @var int
   */
  public $payid = null;
  /**
   * @var string
   */
  public $paymentsn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'logType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'payid',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'paymentsn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tn'])) {
        $this->tn = $vals['tn'];
      }
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['device'])) {
        $this->device = $vals['device'];
      }
      if (isset($vals['logType'])) {
        $this->logType = $vals['logType'];
      }
      if (isset($vals['payid'])) {
        $this->payid = $vals['payid'];
      }
      if (isset($vals['paymentsn'])) {
        $this->paymentsn = $vals['paymentsn'];
      }
    }
  }

  public function getName() {
    return 'AddPaymentLogParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->device);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentsn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPaymentLogParam');
    if ($this->tn !== null) {
      $xfer += $output->writeFieldBegin('tn', TType::STRING, 1);
      $xfer += $output->writeString($this->tn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 2);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 3);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device !== null) {
      $xfer += $output->writeFieldBegin('device', TType::I32, 4);
      $xfer += $output->writeI32($this->device);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logType !== null) {
      $xfer += $output->writeFieldBegin('logType', TType::I32, 5);
      $xfer += $output->writeI32($this->logType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payid !== null) {
      $xfer += $output->writeFieldBegin('payid', TType::I32, 6);
      $xfer += $output->writeI32($this->payid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentsn !== null) {
      $xfer += $output->writeFieldBegin('paymentsn', TType::STRING, 7);
      $xfer += $output->writeString($this->paymentsn);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddShopCartParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $salonName = null;
  /**
   * @var int
   */
  public $itemId = null;
  /**
   * @var string
   */
  public $itemName = null;
  /**
   * @var int
   */
  public $salonNormsId = null;
  /**
   * @var string
   */
  public $salonNormsName = null;
  /**
   * @var int
   */
  public $nums = null;
  /**
   * @var int
   */
  public $price = null;
  /**
   * @var int
   */
  public $priceAll = null;
  /**
   * @var int
   */
  public $priceDis = null;
  /**
   * @var int
   */
  public $priceDisAll = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'salonName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'itemId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'salonNormsId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'salonNormsName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'nums',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'price',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'priceAll',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'priceDis',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'priceDisAll',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['salonName'])) {
        $this->salonName = $vals['salonName'];
      }
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['salonNormsId'])) {
        $this->salonNormsId = $vals['salonNormsId'];
      }
      if (isset($vals['salonNormsName'])) {
        $this->salonNormsName = $vals['salonNormsName'];
      }
      if (isset($vals['nums'])) {
        $this->nums = $vals['nums'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['priceAll'])) {
        $this->priceAll = $vals['priceAll'];
      }
      if (isset($vals['priceDis'])) {
        $this->priceDis = $vals['priceDis'];
      }
      if (isset($vals['priceDisAll'])) {
        $this->priceDisAll = $vals['priceDisAll'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
    }
  }

  public function getName() {
    return 'AddShopCartParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salonName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonNormsId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->salonNormsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->nums);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceAll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceDis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->priceDisAll);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddShopCartParam');
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 1);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonName !== null) {
      $xfer += $output->writeFieldBegin('salonName', TType::STRING, 2);
      $xfer += $output->writeString($this->salonName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::I64, 3);
      $xfer += $output->writeI64($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 4);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsId !== null) {
      $xfer += $output->writeFieldBegin('salonNormsId', TType::I64, 5);
      $xfer += $output->writeI64($this->salonNormsId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonNormsName !== null) {
      $xfer += $output->writeFieldBegin('salonNormsName', TType::STRING, 6);
      $xfer += $output->writeString($this->salonNormsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nums !== null) {
      $xfer += $output->writeFieldBegin('nums', TType::I64, 7);
      $xfer += $output->writeI64($this->nums);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I64, 8);
      $xfer += $output->writeI64($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceAll !== null) {
      $xfer += $output->writeFieldBegin('priceAll', TType::I64, 9);
      $xfer += $output->writeI64($this->priceAll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDis !== null) {
      $xfer += $output->writeFieldBegin('priceDis', TType::I64, 10);
      $xfer += $output->writeI64($this->priceDis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDisAll !== null) {
      $xfer += $output->writeFieldBegin('priceDisAll', TType::I64, 11);
      $xfer += $output->writeI64($this->priceDisAll);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 12);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 13);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddBountyTaskParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $money = null;
  /**
   * @var string
   */
  public $needsStr = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $madeTo = null;
  /**
   * @var string
   */
  public $reason = null;
  /**
   * @var int
   */
  public $district = null;
  /**
   * @var int
   */
  public $zone = null;
  /**
   * @var int
   */
  public $selectType = null;
  /**
   * @var string
   */
  public $remark = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var string
   */
  public $detail = null;
  /**
   * @var int
   */
  public $taskType = null;
  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $salonId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'needsStr',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'madeTo',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'district',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'zone',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'selectType',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'taskType',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['needsStr'])) {
        $this->needsStr = $vals['needsStr'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['madeTo'])) {
        $this->madeTo = $vals['madeTo'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['district'])) {
        $this->district = $vals['district'];
      }
      if (isset($vals['zone'])) {
        $this->zone = $vals['zone'];
      }
      if (isset($vals['selectType'])) {
        $this->selectType = $vals['selectType'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['taskType'])) {
        $this->taskType = $vals['taskType'];
      }
      if (isset($vals['stylistId'])) {
        $this->stylistId = $vals['stylistId'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
    }
  }

  public function getName() {
    return 'AddBountyTaskParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->needsStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->madeTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->district);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->zone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->selectType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddBountyTaskParam');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 1);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 2);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->needsStr !== null) {
      $xfer += $output->writeFieldBegin('needsStr', TType::STRING, 3);
      $xfer += $output->writeString($this->needsStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->madeTo !== null) {
      $xfer += $output->writeFieldBegin('madeTo', TType::I32, 5);
      $xfer += $output->writeI32($this->madeTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 6);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->district !== null) {
      $xfer += $output->writeFieldBegin('district', TType::I64, 7);
      $xfer += $output->writeI64($this->district);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zone !== null) {
      $xfer += $output->writeFieldBegin('zone', TType::I64, 8);
      $xfer += $output->writeI64($this->zone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selectType !== null) {
      $xfer += $output->writeFieldBegin('selectType', TType::I32, 9);
      $xfer += $output->writeI32($this->selectType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 10);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 11);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 12);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 13);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskType !== null) {
      $xfer += $output->writeFieldBegin('taskType', TType::I32, 14);
      $xfer += $output->writeI32($this->taskType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stylistId !== null) {
      $xfer += $output->writeFieldBegin('stylistId', TType::I64, 15);
      $xfer += $output->writeI64($this->stylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 16);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddBountyPushParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $reqStatus = null;
  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $ostype = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'ostype',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['reqStatus'])) {
        $this->reqStatus = $vals['reqStatus'];
      }
      if (isset($vals['stylistId'])) {
        $this->stylistId = $vals['stylistId'];
      }
      if (isset($vals['ostype'])) {
        $this->ostype = $vals['ostype'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
    }
  }

  public function getName() {
    return 'AddBountyPushParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ostype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddBountyPushParam');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 1);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 2);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqStatus !== null) {
      $xfer += $output->writeFieldBegin('reqStatus', TType::I32, 4);
      $xfer += $output->writeI32($this->reqStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stylistId !== null) {
      $xfer += $output->writeFieldBegin('stylistId', TType::I64, 5);
      $xfer += $output->writeI64($this->stylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ostype !== null) {
      $xfer += $output->writeFieldBegin('ostype', TType::I32, 6);
      $xfer += $output->writeI32($this->ostype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 7);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddBountyFriendsParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $needsStr = null;
  /**
   * @var int
   */
  public $reason = null;
  /**
   * @var string
   */
  public $remark = null;
  /**
   * @var int
   */
  public $addTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'needsStr',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['needsStr'])) {
        $this->needsStr = $vals['needsStr'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
    }
  }

  public function getName() {
    return 'AddBountyFriendsParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->needsStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddBountyFriendsParam');
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 1);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->needsStr !== null) {
      $xfer += $output->writeFieldBegin('needsStr', TType::STRING, 3);
      $xfer += $output->writeString($this->needsStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::I32, 4);
      $xfer += $output->writeI32($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 5);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 6);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddFundflowParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $ticketNo = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $money = null;
  /**
   * @var int
   */
  public $payType = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $codeType = null;
  /**
   * @var int
   */
  public $fftype = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'payType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'codeType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'fftype',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['ticketNo'])) {
        $this->ticketNo = $vals['ticketNo'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['payType'])) {
        $this->payType = $vals['payType'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['codeType'])) {
        $this->codeType = $vals['codeType'];
      }
      if (isset($vals['fftype'])) {
        $this->fftype = $vals['fftype'];
      }
    }
  }

  public function getName() {
    return 'AddFundflowParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->codeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fftype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddFundflowParam');
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 1);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketNo !== null) {
      $xfer += $output->writeFieldBegin('ticketNo', TType::STRING, 2);
      $xfer += $output->writeString($this->ticketNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 3);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 4);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payType !== null) {
      $xfer += $output->writeFieldBegin('payType', TType::I32, 5);
      $xfer += $output->writeI32($this->payType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 6);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codeType !== null) {
      $xfer += $output->writeFieldBegin('codeType', TType::I32, 7);
      $xfer += $output->writeI32($this->codeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fftype !== null) {
      $xfer += $output->writeFieldBegin('fftype', TType::I32, 8);
      $xfer += $output->writeI32($this->fftype);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddOrderRefundParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $ticketNo = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $money = null;
  /**
   * @var int
   */
  public $retype = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var string
   */
  public $rereason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ticketNo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'money',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'retype',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'rereason',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['ticketNo'])) {
        $this->ticketNo = $vals['ticketNo'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['retype'])) {
        $this->retype = $vals['retype'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['rereason'])) {
        $this->rereason = $vals['rereason'];
      }
    }
  }

  public function getName() {
    return 'AddOrderRefundParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rereason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddOrderRefundParam');
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 1);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketNo !== null) {
      $xfer += $output->writeFieldBegin('ticketNo', TType::STRING, 2);
      $xfer += $output->writeString($this->ticketNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 3);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::STRING, 4);
      $xfer += $output->writeString($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retype !== null) {
      $xfer += $output->writeFieldBegin('retype', TType::I32, 5);
      $xfer += $output->writeI32($this->retype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 6);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rereason !== null) {
      $xfer += $output->writeFieldBegin('rereason', TType::STRING, 7);
      $xfer += $output->writeString($this->rereason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateBountyTaskBybtSnAndSalonIdParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $btSn = null;
  /**
   * @var int
   */
  public $salonId = null;
  /**
   * @var int
   */
  public $stylistId = null;
  /**
   * @var int
   */
  public $btStatus = null;
  /**
   * @var int
   */
  public $requestNum = null;
  /**
   * @var int
   */
  public $addTime = null;
  /**
   * @var int
   */
  public $selectTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'btSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'salonId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'stylistId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'btStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'requestNum',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'addTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'selectTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['btSn'])) {
        $this->btSn = $vals['btSn'];
      }
      if (isset($vals['salonId'])) {
        $this->salonId = $vals['salonId'];
      }
      if (isset($vals['stylistId'])) {
        $this->stylistId = $vals['stylistId'];
      }
      if (isset($vals['btStatus'])) {
        $this->btStatus = $vals['btStatus'];
      }
      if (isset($vals['requestNum'])) {
        $this->requestNum = $vals['requestNum'];
      }
      if (isset($vals['addTime'])) {
        $this->addTime = $vals['addTime'];
      }
      if (isset($vals['selectTime'])) {
        $this->selectTime = $vals['selectTime'];
      }
    }
  }

  public function getName() {
    return 'UpdateBountyTaskBybtSnAndSalonIdParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->btSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->stylistId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->btStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->requestNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->addTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->selectTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateBountyTaskBybtSnAndSalonIdParam');
    if ($this->btSn !== null) {
      $xfer += $output->writeFieldBegin('btSn', TType::STRING, 1);
      $xfer += $output->writeString($this->btSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonId !== null) {
      $xfer += $output->writeFieldBegin('salonId', TType::I64, 2);
      $xfer += $output->writeI64($this->salonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stylistId !== null) {
      $xfer += $output->writeFieldBegin('stylistId', TType::I64, 3);
      $xfer += $output->writeI64($this->stylistId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->btStatus !== null) {
      $xfer += $output->writeFieldBegin('btStatus', TType::I32, 4);
      $xfer += $output->writeI32($this->btStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestNum !== null) {
      $xfer += $output->writeFieldBegin('requestNum', TType::I64, 5);
      $xfer += $output->writeI64($this->requestNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addTime !== null) {
      $xfer += $output->writeFieldBegin('addTime', TType::I64, 6);
      $xfer += $output->writeI64($this->addTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selectTime !== null) {
      $xfer += $output->writeFieldBegin('selectTime', TType::I64, 7);
      $xfer += $output->writeI64($this->selectTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SalonFundflowParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ordersn = null;
  /**
   * @var int
   */
  public $orderid = null;
  /**
   * @var int
   */
  public $orderItemId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $priceDis = null;
  /**
   * @var string
   */
  public $bargainno = null;
  /**
   * @var int
   */
  public $sftype = null;
  /**
   * @var int
   */
  public $salonid = null;
  /**
   * @var string
   */
  public $ticketno = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ordersn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'orderid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'orderItemId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'priceDis',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'bargainno',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'sftype',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'salonid',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'ticketno',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ordersn'])) {
        $this->ordersn = $vals['ordersn'];
      }
      if (isset($vals['orderid'])) {
        $this->orderid = $vals['orderid'];
      }
      if (isset($vals['orderItemId'])) {
        $this->orderItemId = $vals['orderItemId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['priceDis'])) {
        $this->priceDis = $vals['priceDis'];
      }
      if (isset($vals['bargainno'])) {
        $this->bargainno = $vals['bargainno'];
      }
      if (isset($vals['sftype'])) {
        $this->sftype = $vals['sftype'];
      }
      if (isset($vals['salonid'])) {
        $this->salonid = $vals['salonid'];
      }
      if (isset($vals['ticketno'])) {
        $this->ticketno = $vals['ticketno'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'SalonFundflowParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ordersn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderItemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->priceDis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bargainno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sftype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->salonid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ticketno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SalonFundflowParam');
    if ($this->ordersn !== null) {
      $xfer += $output->writeFieldBegin('ordersn', TType::STRING, 1);
      $xfer += $output->writeString($this->ordersn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderid !== null) {
      $xfer += $output->writeFieldBegin('orderid', TType::I64, 2);
      $xfer += $output->writeI64($this->orderid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderItemId !== null) {
      $xfer += $output->writeFieldBegin('orderItemId', TType::I64, 3);
      $xfer += $output->writeI64($this->orderItemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDis !== null) {
      $xfer += $output->writeFieldBegin('priceDis', TType::STRING, 5);
      $xfer += $output->writeString($this->priceDis);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bargainno !== null) {
      $xfer += $output->writeFieldBegin('bargainno', TType::STRING, 6);
      $xfer += $output->writeString($this->bargainno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sftype !== null) {
      $xfer += $output->writeFieldBegin('sftype', TType::I32, 7);
      $xfer += $output->writeI32($this->sftype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->salonid !== null) {
      $xfer += $output->writeFieldBegin('salonid', TType::I64, 8);
      $xfer += $output->writeI64($this->salonid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketno !== null) {
      $xfer += $output->writeFieldBegin('ticketno', TType::STRING, 9);
      $xfer += $output->writeString($this->ticketno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 10);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoPlaceRequest
 * 易联支付下单请求参数
 */
class PayecoPlaceRequestParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var string
   */
  public $merchantId = null;
  /**
   * @var string
   */
  public $privateKey = null;
  /**
   * @var string
   */
  public $publicKey = null;
  /**
   * @var string
   */
  public $payecoUrl = null;
  /**
   * @var string
   */
  public $notifyUrl = null;
  /**
   * @var string
   */
  public $extData = null;
  /**
   * @var string
   */
  public $clientIp = null;
  /**
   * @var string
   */
  public $successUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'merchantId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'privateKey',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'publicKey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'payecoUrl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'notifyUrl',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'extData',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientIp',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'successUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['merchantId'])) {
        $this->merchantId = $vals['merchantId'];
      }
      if (isset($vals['privateKey'])) {
        $this->privateKey = $vals['privateKey'];
      }
      if (isset($vals['publicKey'])) {
        $this->publicKey = $vals['publicKey'];
      }
      if (isset($vals['payecoUrl'])) {
        $this->payecoUrl = $vals['payecoUrl'];
      }
      if (isset($vals['notifyUrl'])) {
        $this->notifyUrl = $vals['notifyUrl'];
      }
      if (isset($vals['extData'])) {
        $this->extData = $vals['extData'];
      }
      if (isset($vals['clientIp'])) {
        $this->clientIp = $vals['clientIp'];
      }
      if (isset($vals['successUrl'])) {
        $this->successUrl = $vals['successUrl'];
      }
    }
  }

  public function getName() {
    return 'PayecoPlaceRequestParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->privateKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payecoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notifyUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->successUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoPlaceRequestParam');
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 1);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 2);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantId !== null) {
      $xfer += $output->writeFieldBegin('merchantId', TType::STRING, 3);
      $xfer += $output->writeString($this->merchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privateKey !== null) {
      $xfer += $output->writeFieldBegin('privateKey', TType::STRING, 4);
      $xfer += $output->writeString($this->privateKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicKey !== null) {
      $xfer += $output->writeFieldBegin('publicKey', TType::STRING, 5);
      $xfer += $output->writeString($this->publicKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payecoUrl !== null) {
      $xfer += $output->writeFieldBegin('payecoUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->payecoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyUrl !== null) {
      $xfer += $output->writeFieldBegin('notifyUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->notifyUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extData !== null) {
      $xfer += $output->writeFieldBegin('extData', TType::STRING, 8);
      $xfer += $output->writeString($this->extData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientIp !== null) {
      $xfer += $output->writeFieldBegin('clientIp', TType::STRING, 9);
      $xfer += $output->writeString($this->clientIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successUrl !== null) {
      $xfer += $output->writeFieldBegin('successUrl', TType::STRING, 10);
      $xfer += $output->writeString($this->successUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoPlaceResponse
 * 易联支付下单请求返回结果
 */
class PayecoPlaceResponseThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $retCode = null;
  /**
   * @var string
   */
  public $retMsg = null;
  /**
   * @var string
   */
  public $version = null;
  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $merchantId = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var string
   */
  public $tradeTime = null;
  /**
   * @var string
   */
  public $tradeSn = null;
  /**
   * @var string
   */
  public $sign = null;
  /**
   * @var string
   */
  public $payUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'retMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'merchantId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'tradeTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'tradeSn',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'payUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retCode'])) {
        $this->retCode = $vals['retCode'];
      }
      if (isset($vals['retMsg'])) {
        $this->retMsg = $vals['retMsg'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['merchantId'])) {
        $this->merchantId = $vals['merchantId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['tradeTime'])) {
        $this->tradeTime = $vals['tradeTime'];
      }
      if (isset($vals['tradeSn'])) {
        $this->tradeSn = $vals['tradeSn'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['payUrl'])) {
        $this->payUrl = $vals['payUrl'];
      }
    }
  }

  public function getName() {
    return 'PayecoPlaceResponseThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tradeTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tradeSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoPlaceResponseThrift');
    if ($this->retCode !== null) {
      $xfer += $output->writeFieldBegin('retCode', TType::STRING, 1);
      $xfer += $output->writeString($this->retCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retMsg !== null) {
      $xfer += $output->writeFieldBegin('retMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->retMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 3);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 4);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantId !== null) {
      $xfer += $output->writeFieldBegin('merchantId', TType::STRING, 5);
      $xfer += $output->writeString($this->merchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 6);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tradeTime !== null) {
      $xfer += $output->writeFieldBegin('tradeTime', TType::STRING, 7);
      $xfer += $output->writeString($this->tradeTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tradeSn !== null) {
      $xfer += $output->writeFieldBegin('tradeSn', TType::STRING, 8);
      $xfer += $output->writeString($this->tradeSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 9);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payUrl !== null) {
      $xfer += $output->writeFieldBegin('payUrl', TType::STRING, 10);
      $xfer += $output->writeString($this->payUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoPlaceRet
 * 易联支付下单请求返回结果
 */
class PayecoPlaceRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceResponseThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoPlaceResponseThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'PayecoPlaceRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\PayecoPlaceResponseThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoPlaceRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoNotifyRequest
 * 易联支付回调请求参数
 */
class PayecoNotifyRequestParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $version = null;
  /**
   * @var string
   */
  public $merchantId = null;
  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var string
   */
  public $extData = null;
  /**
   * @var string
   */
  public $tradeSn = null;
  /**
   * @var string
   */
  public $status = null;
  /**
   * @var string
   */
  public $payTime = null;
  /**
   * @var string
   */
  public $settleDate = null;
  /**
   * @var string
   */
  public $sign = null;
  /**
   * @var string
   */
  public $publicKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'merchantId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'extData',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'tradeSn',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'payTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'settleDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'publicKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['merchantId'])) {
        $this->merchantId = $vals['merchantId'];
      }
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['extData'])) {
        $this->extData = $vals['extData'];
      }
      if (isset($vals['tradeSn'])) {
        $this->tradeSn = $vals['tradeSn'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['settleDate'])) {
        $this->settleDate = $vals['settleDate'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['publicKey'])) {
        $this->publicKey = $vals['publicKey'];
      }
    }
  }

  public function getName() {
    return 'PayecoNotifyRequestParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tradeSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->settleDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoNotifyRequestParam');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 1);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantId !== null) {
      $xfer += $output->writeFieldBegin('merchantId', TType::STRING, 2);
      $xfer += $output->writeString($this->merchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 3);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 4);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extData !== null) {
      $xfer += $output->writeFieldBegin('extData', TType::STRING, 5);
      $xfer += $output->writeString($this->extData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tradeSn !== null) {
      $xfer += $output->writeFieldBegin('tradeSn', TType::STRING, 6);
      $xfer += $output->writeString($this->tradeSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 7);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::STRING, 8);
      $xfer += $output->writeString($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settleDate !== null) {
      $xfer += $output->writeFieldBegin('settleDate', TType::STRING, 9);
      $xfer += $output->writeString($this->settleDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 10);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicKey !== null) {
      $xfer += $output->writeFieldBegin('publicKey', TType::STRING, 11);
      $xfer += $output->writeString($this->publicKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoNotifyResponse
 * 易联支付回调请求返回结果
 */
class PayecoNotifyResponseThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $retCode = null;
  /**
   * @var string
   */
  public $retMsg = null;
  /**
   * @var string
   */
  public $shopcartSn = null;
  /**
   * @var string
   */
  public $bountySn = null;
  /**
   * @var string
   */
  public $orderSn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'retMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'shopcartSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bountySn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retCode'])) {
        $this->retCode = $vals['retCode'];
      }
      if (isset($vals['retMsg'])) {
        $this->retMsg = $vals['retMsg'];
      }
      if (isset($vals['shopcartSn'])) {
        $this->shopcartSn = $vals['shopcartSn'];
      }
      if (isset($vals['bountySn'])) {
        $this->bountySn = $vals['bountySn'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
    }
  }

  public function getName() {
    return 'PayecoNotifyResponseThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopcartSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bountySn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoNotifyResponseThrift');
    if ($this->retCode !== null) {
      $xfer += $output->writeFieldBegin('retCode', TType::STRING, 1);
      $xfer += $output->writeString($this->retCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retMsg !== null) {
      $xfer += $output->writeFieldBegin('retMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->retMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopcartSn !== null) {
      $xfer += $output->writeFieldBegin('shopcartSn', TType::STRING, 3);
      $xfer += $output->writeString($this->shopcartSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bountySn !== null) {
      $xfer += $output->writeFieldBegin('bountySn', TType::STRING, 4);
      $xfer += $output->writeString($this->bountySn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 5);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoNotifyRet
 * 易联支付回调请求返回结果
 */
class PayecoNotifyRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyResponseThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoNotifyResponseThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'PayecoNotifyRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\PayecoNotifyResponseThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoNotifyRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoRefundRequest
 * 易联支付退款请求参数
 */
class PayecoRefundRequestParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var string
   */
  public $merchantId = null;
  /**
   * @var string
   */
  public $privateKey = null;
  /**
   * @var string
   */
  public $publicKey = null;
  /**
   * @var string
   */
  public $payecoUrl = null;
  /**
   * @var string
   */
  public $extData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'merchantId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'privateKey',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'publicKey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'payecoUrl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'extData',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['merchantId'])) {
        $this->merchantId = $vals['merchantId'];
      }
      if (isset($vals['privateKey'])) {
        $this->privateKey = $vals['privateKey'];
      }
      if (isset($vals['publicKey'])) {
        $this->publicKey = $vals['publicKey'];
      }
      if (isset($vals['payecoUrl'])) {
        $this->payecoUrl = $vals['payecoUrl'];
      }
      if (isset($vals['extData'])) {
        $this->extData = $vals['extData'];
      }
    }
  }

  public function getName() {
    return 'PayecoRefundRequestParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->privateKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payecoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoRefundRequestParam');
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 1);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 2);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantId !== null) {
      $xfer += $output->writeFieldBegin('merchantId', TType::STRING, 3);
      $xfer += $output->writeString($this->merchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privateKey !== null) {
      $xfer += $output->writeFieldBegin('privateKey', TType::STRING, 4);
      $xfer += $output->writeString($this->privateKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicKey !== null) {
      $xfer += $output->writeFieldBegin('publicKey', TType::STRING, 5);
      $xfer += $output->writeString($this->publicKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payecoUrl !== null) {
      $xfer += $output->writeFieldBegin('payecoUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->payecoUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extData !== null) {
      $xfer += $output->writeFieldBegin('extData', TType::STRING, 7);
      $xfer += $output->writeString($this->extData);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoRefundResponse
 * 易联支付退款请求返回结果
 */
class PayecoRefundResponseThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $retCode = null;
  /**
   * @var string
   */
  public $retMsg = null;
  /**
   * @var string
   */
  public $version = null;
  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $merchantId = null;
  /**
   * @var string
   */
  public $amount = null;
  /**
   * @var string
   */
  public $tradeTime = null;
  /**
   * @var string
   */
  public $tradeSn = null;
  /**
   * @var string
   */
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'retMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'merchantId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'tradeTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'tradeSn',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retCode'])) {
        $this->retCode = $vals['retCode'];
      }
      if (isset($vals['retMsg'])) {
        $this->retMsg = $vals['retMsg'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['merchantId'])) {
        $this->merchantId = $vals['merchantId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['tradeTime'])) {
        $this->tradeTime = $vals['tradeTime'];
      }
      if (isset($vals['tradeSn'])) {
        $this->tradeSn = $vals['tradeSn'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'PayecoRefundResponseThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tradeTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tradeSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoRefundResponseThrift');
    if ($this->retCode !== null) {
      $xfer += $output->writeFieldBegin('retCode', TType::STRING, 1);
      $xfer += $output->writeString($this->retCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retMsg !== null) {
      $xfer += $output->writeFieldBegin('retMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->retMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 3);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 4);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantId !== null) {
      $xfer += $output->writeFieldBegin('merchantId', TType::STRING, 5);
      $xfer += $output->writeString($this->merchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 6);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tradeTime !== null) {
      $xfer += $output->writeFieldBegin('tradeTime', TType::STRING, 7);
      $xfer += $output->writeString($this->tradeTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tradeSn !== null) {
      $xfer += $output->writeFieldBegin('tradeSn', TType::STRING, 8);
      $xfer += $output->writeString($this->tradeSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 9);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * PayecoPlaceRet
 * 易联支付退款请求返回结果
 */
class PayecoRefundRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\PayecoRefundResponseThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\PayecoRefundResponseThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'PayecoRefundRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\PayecoRefundResponseThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PayecoRefundRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * WechatRefundRequestParam
 * 微信支付退款请求参数
 */
class WechatRefundRequestParam {
  static $_TSPEC;

  /**
   * @var string
   */
  public $payMerchantId = null;
  /**
   * @var string
   */
  public $payMerchantPassword = null;
  /**
   * @var string
   */
  public $payRefundUrl = null;
  /**
   * @var string
   */
  public $payPartnerId = null;
  /**
   * @var string
   */
  public $payPartnerKey = null;
  /**
   * @var string
   */
  public $h5AppId = null;
  /**
   * @var string
   */
  public $h5MerchantId = null;
  /**
   * @var string
   */
  public $h5RefundUrl = null;
  /**
   * @var string
   */
  public $h5PartnerKey = null;
  /**
   * @var string
   */
  public $orderSn = null;
  /**
   * @var string
   */
  public $bountySn = null;
  /**
   * @var string
   */
  public $paymentSn = null;
  /**
   * @var string
   */
  public $shopcartSn = null;
  /**
   * @var string
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payMerchantId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'payMerchantPassword',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'payRefundUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'payPartnerId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'payPartnerKey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'h5AppId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'h5MerchantId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'h5RefundUrl',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'h5PartnerKey',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'orderSn',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'bountySn',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'paymentSn',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'shopcartSn',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'amount',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payMerchantId'])) {
        $this->payMerchantId = $vals['payMerchantId'];
      }
      if (isset($vals['payMerchantPassword'])) {
        $this->payMerchantPassword = $vals['payMerchantPassword'];
      }
      if (isset($vals['payRefundUrl'])) {
        $this->payRefundUrl = $vals['payRefundUrl'];
      }
      if (isset($vals['payPartnerId'])) {
        $this->payPartnerId = $vals['payPartnerId'];
      }
      if (isset($vals['payPartnerKey'])) {
        $this->payPartnerKey = $vals['payPartnerKey'];
      }
      if (isset($vals['h5AppId'])) {
        $this->h5AppId = $vals['h5AppId'];
      }
      if (isset($vals['h5MerchantId'])) {
        $this->h5MerchantId = $vals['h5MerchantId'];
      }
      if (isset($vals['h5RefundUrl'])) {
        $this->h5RefundUrl = $vals['h5RefundUrl'];
      }
      if (isset($vals['h5PartnerKey'])) {
        $this->h5PartnerKey = $vals['h5PartnerKey'];
      }
      if (isset($vals['orderSn'])) {
        $this->orderSn = $vals['orderSn'];
      }
      if (isset($vals['bountySn'])) {
        $this->bountySn = $vals['bountySn'];
      }
      if (isset($vals['paymentSn'])) {
        $this->paymentSn = $vals['paymentSn'];
      }
      if (isset($vals['shopcartSn'])) {
        $this->shopcartSn = $vals['shopcartSn'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'WechatRefundRequestParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payMerchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payMerchantPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payRefundUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payPartnerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payPartnerKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5AppId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5MerchantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5RefundUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5PartnerKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bountySn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paymentSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shopcartSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WechatRefundRequestParam');
    if ($this->payMerchantId !== null) {
      $xfer += $output->writeFieldBegin('payMerchantId', TType::STRING, 1);
      $xfer += $output->writeString($this->payMerchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payMerchantPassword !== null) {
      $xfer += $output->writeFieldBegin('payMerchantPassword', TType::STRING, 2);
      $xfer += $output->writeString($this->payMerchantPassword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payRefundUrl !== null) {
      $xfer += $output->writeFieldBegin('payRefundUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->payRefundUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPartnerId !== null) {
      $xfer += $output->writeFieldBegin('payPartnerId', TType::STRING, 4);
      $xfer += $output->writeString($this->payPartnerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payPartnerKey !== null) {
      $xfer += $output->writeFieldBegin('payPartnerKey', TType::STRING, 5);
      $xfer += $output->writeString($this->payPartnerKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5AppId !== null) {
      $xfer += $output->writeFieldBegin('h5AppId', TType::STRING, 6);
      $xfer += $output->writeString($this->h5AppId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5MerchantId !== null) {
      $xfer += $output->writeFieldBegin('h5MerchantId', TType::STRING, 7);
      $xfer += $output->writeString($this->h5MerchantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5RefundUrl !== null) {
      $xfer += $output->writeFieldBegin('h5RefundUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->h5RefundUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5PartnerKey !== null) {
      $xfer += $output->writeFieldBegin('h5PartnerKey', TType::STRING, 9);
      $xfer += $output->writeString($this->h5PartnerKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderSn !== null) {
      $xfer += $output->writeFieldBegin('orderSn', TType::STRING, 10);
      $xfer += $output->writeString($this->orderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bountySn !== null) {
      $xfer += $output->writeFieldBegin('bountySn', TType::STRING, 11);
      $xfer += $output->writeString($this->bountySn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentSn !== null) {
      $xfer += $output->writeFieldBegin('paymentSn', TType::STRING, 12);
      $xfer += $output->writeString($this->paymentSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopcartSn !== null) {
      $xfer += $output->writeFieldBegin('shopcartSn', TType::STRING, 13);
      $xfer += $output->writeString($this->shopcartSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::STRING, 14);
      $xfer += $output->writeString($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * WechatRefundResponseThrift
 * 微信支付退款请求返回结果
 */
class WechatRefundResponseThrift {
  static $_TSPEC;

  /**
   * @var string
   */
  public $code = null;
  /**
   * @var string
   */
  public $debug = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'debug',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['debug'])) {
        $this->debug = $vals['debug'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'WechatRefundResponseThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->debug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WechatRefundResponseThrift');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 1);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->debug !== null) {
      $xfer += $output->writeFieldBegin('debug', TType::STRING, 2);
      $xfer += $output->writeString($this->debug);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * WechatRefundRet
 * 微信支付退款请求返回结果
 */
class WechatRefundRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\WechatRefundResponseThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\WechatRefundResponseThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'WechatRefundRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\WechatRefundResponseThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WechatRefundRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DisposeOrderThrift {
  static $_TSPEC;

  /**
   * @var int
   */
  public $dpoId = null;
  /**
   * @var string
   */
  public $dpoCode = null;
  /**
   * @var string
   */
  public $dpoOrderSn = null;
  /**
   * @var string
   */
  public $dpoShopcartSn = null;
  /**
   * @var int
   */
  public $dpoAddTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dpoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'dpoCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dpoOrderSn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dpoShopcartSn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dpoAddTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dpoId'])) {
        $this->dpoId = $vals['dpoId'];
      }
      if (isset($vals['dpoCode'])) {
        $this->dpoCode = $vals['dpoCode'];
      }
      if (isset($vals['dpoOrderSn'])) {
        $this->dpoOrderSn = $vals['dpoOrderSn'];
      }
      if (isset($vals['dpoShopcartSn'])) {
        $this->dpoShopcartSn = $vals['dpoShopcartSn'];
      }
      if (isset($vals['dpoAddTime'])) {
        $this->dpoAddTime = $vals['dpoAddTime'];
      }
    }
  }

  public function getName() {
    return 'DisposeOrderThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dpoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dpoCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dpoOrderSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dpoShopcartSn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dpoAddTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DisposeOrderThrift');
    if ($this->dpoId !== null) {
      $xfer += $output->writeFieldBegin('dpoId', TType::I64, 1);
      $xfer += $output->writeI64($this->dpoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dpoCode !== null) {
      $xfer += $output->writeFieldBegin('dpoCode', TType::STRING, 2);
      $xfer += $output->writeString($this->dpoCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dpoOrderSn !== null) {
      $xfer += $output->writeFieldBegin('dpoOrderSn', TType::STRING, 3);
      $xfer += $output->writeString($this->dpoOrderSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dpoShopcartSn !== null) {
      $xfer += $output->writeFieldBegin('dpoShopcartSn', TType::STRING, 4);
      $xfer += $output->writeString($this->dpoShopcartSn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dpoAddTime !== null) {
      $xfer += $output->writeFieldBegin('dpoAddTime', TType::I64, 5);
      $xfer += $output->writeI64($this->dpoAddTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetDisposeOrderRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\DisposeOrderThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\DisposeOrderThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetDisposeOrderRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\DisposeOrderThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetDisposeOrderRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyRequestRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyRequestRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\BountyRequestThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyRequestRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetBountyPushInfoRet {
  static $_TSPEC;

  /**
   * @var string
   */
  public $result = null;
  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errorMsg = null;
  /**
   * @var \cn\choumei\thriftserver\service\stub\gen\BountyPushThrift
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorMsg',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\cn\choumei\thriftserver\service\stub\gen\BountyPushThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMsg'])) {
        $this->errorMsg = $vals['errorMsg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GetBountyPushInfoRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->data = new \cn\choumei\thriftserver\service\stub\gen\BountyPushThrift();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetBountyPushInfoRet');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 2);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMsg !== null) {
      $xfer += $output->writeFieldBegin('errorMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->errorMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 4);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


